<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Simplicity</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://minhajuddin.com/"/>
  <updated>2017-02-13T08:53:21.000Z</updated>
  <id>http://minhajuddin.com/</id>
  
  <author>
    <name>Khaja Minhajuddin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Getting started with Elm</title>
    <link href="http://minhajuddin.com/2017/02/13/getting-started-with-elm/"/>
    <id>http://minhajuddin.com/2017/02/13/getting-started-with-elm/</id>
    <published>2017-02-13T14:00:17.000Z</published>
    <updated>2017-02-13T08:53:21.000Z</updated>
    
    <content type="html">&lt;p&gt;I had a good time presenting a talk about “Getting Started with Elm” at the awesome &lt;a href=&quot;https://www.meetup.com/nghyderabad/events/237337105/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nghyderabad&lt;/a&gt;
The audience was very interactive and the food was great. Shout out to &lt;a href=&quot;http://www.fissionlabs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fission Labs&lt;/a&gt; for the awesome venue!&lt;/p&gt;
&lt;p&gt;Here are a few useful links which should help you learn Elm&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;elm-lang home page: &lt;a href=&quot;http://elm-lang.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://elm-lang.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;docs: &lt;a href=&quot;http://elm-lang.org/docs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://elm-lang.org/docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;examples: &lt;a href=&quot;http://elm-lang.org/examples&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://elm-lang.org/examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A handy online book: &lt;a href=&quot;https://guide.elm-lang.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://guide.elm-lang.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Online editor: &lt;a href=&quot;http://elm-lang.org/try&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://elm-lang.org/try&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Elm packages website: &lt;a href=&quot;http://package.elm-lang.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://package.elm-lang.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Code for the app that we built: &lt;a href=&quot;https://github.com/minhajuddin/getting-started-with-elm/blob/master/Counter.elm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/minhajuddin/getting-started-with-elm/blob/master/Counter.elm&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;I had a good time presenting a talk about “Getting Started with Elm” at the awesome &lt;a href=&quot;https://www.meetup.com/nghyderabad/events/23
    
    </summary>
    
    
      <category term="Elm" scheme="http://minhajuddin.com/tags/elm/"/>
    
      <category term="Meetup" scheme="http://minhajuddin.com/tags/meetup/"/>
    
      <category term="Presentation" scheme="http://minhajuddin.com/tags/presentation/"/>
    
  </entry>
  
  <entry>
    <title>How to fix Ecto duplicate name migrations error</title>
    <link href="http://minhajuddin.com/2017/02/09/how-to-fix-ecto-duplicate-name-migrations-error/"/>
    <id>http://minhajuddin.com/2017/02/09/how-to-fix-ecto-duplicate-name-migrations-error/</id>
    <published>2017-02-09T18:36:37.000Z</published>
    <updated>2017-02-13T08:53:21.000Z</updated>
    
    <content type="html">&lt;p&gt;If you run into the following error while running your Ecto migrations&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ReleaseTasks.migrate
** (Ecto.MigrationError) migrations can&amp;apos;t be executed, migration name foo_bar is duplicated
   (ecto) lib/ecto/migrator.ex:259: Ecto.Migrator.ensure_no_duplication/1
   (ecto) lib/ecto/migrator.ex:235: Ecto.Migrator.migrate/4
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can fix it by running 1 migration at a time&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix ecto.migrate --step 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This happens when you are trying to run two migrations with the same name (regardless of the timestamps).
By restricting it to run 1 migration at a time you won’t run into this issue.&lt;/p&gt;
&lt;p&gt;Ideally you should not have 2 migrations with the same name :)&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;If you run into the following error while running your Ecto migrations&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ReleaseTasks.migrate
** (Ecto.MigrationError) migra
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="Ecto" scheme="http://minhajuddin.com/tags/ecto/"/>
    
      <category term="Migration" scheme="http://minhajuddin.com/tags/migration/"/>
    
      <category term="Error" scheme="http://minhajuddin.com/tags/error/"/>
    
  </entry>
  
  <entry>
    <title>Lightweight xml utility to pluck elements</title>
    <link href="http://minhajuddin.com/2017/02/02/lightweight-xml-utility-to-pluck-elements/"/>
    <id>http://minhajuddin.com/2017/02/02/lightweight-xml-utility-to-pluck-elements/</id>
    <published>2017-02-02T16:14:42.000Z</published>
    <updated>2017-02-13T08:53:21.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://stedolan.github.io/jq/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jq&lt;/a&gt; is an awesome utility for parsing and transforming json via the command line. I wanted something similar for xml.
The following is a short ruby script which does a tiny tiny (did I say tiny?) bit of what jq does for xml. Hope you find it useful.&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#!/usr/bin/env ruby&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Author: Khaja Minhajuddin&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;nokogiri&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;parallel&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;etc&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ARGV.count &amp;lt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  puts &amp;lt;&amp;lt;-EOS&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;symbol&quot;&gt;Usage:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    xml_pluck xpath file1.xml file2.xml&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  e.g.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    xml_pluck &lt;span class=&quot;string&quot;&gt;&quot;//children/name/text()&quot;&lt;/span&gt; &amp;lt;(echo &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;&amp;lt;children&amp;gt;&amp;lt;name&amp;gt;Zainab&amp;lt;/name&amp;gt;&amp;lt;name&amp;gt;Mujju&amp;lt;/name&amp;gt;&amp;lt;/children&amp;gt;&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# prints&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Zainab&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Mujju&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  EOS&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  exit -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;xpath = ARGV.shift&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Parallel.each(ARGV, &lt;span class=&quot;symbol&quot;&gt;in_processes:&lt;/span&gt; Etc.nprocessors) &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;|file|&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  doc = Nokogiri::XML(File.read(file))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  puts doc.xpath(xpath)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://stedolan.github.io/jq/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jq&lt;/a&gt; is an awesome utility for parsing and transforming json vi
    
    </summary>
    
    
      <category term="Ruby" scheme="http://minhajuddin.com/tags/ruby/"/>
    
      <category term="Xml Pluck" scheme="http://minhajuddin.com/tags/xml-pluck/"/>
    
  </entry>
  
  <entry>
    <title>Key transformation after decoding json in Elixir</title>
    <link href="http://minhajuddin.com/2017/01/24/key-transformation-after-decoding-json-in-elixir/"/>
    <id>http://minhajuddin.com/2017/01/24/key-transformation-after-decoding-json-in-elixir/</id>
    <published>2017-01-24T13:36:26.000Z</published>
    <updated>2017-02-13T08:53:21.000Z</updated>
    
    <content type="html">&lt;p&gt;In a previous blog post we saw how to do &lt;a href=&quot;http://minhajuddin.com/2017/01/11/case-insensitive-key-retrieval-from-maps-in-elixir/&quot;&gt;case insensitive retrieval from maps&lt;/a&gt;.
A better solution for this if there are many key lookups is to transform the input by lower casing all the keys just after decoding. The solution from the blog post would iterate over each &lt;code&gt;{key, value}&lt;/code&gt; pair till it found the desired key.
However a proper map lookup doesn’t iterate over the keys but uses a hashing algorithm to get to the key’s location in constant time regardless of the size of the map.&lt;/p&gt;
&lt;p&gt;Anyway, Here is the solution to transform each key for input JSON. Hope you find it useful :)&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;KeyTransformer&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;lower_case_keys&lt;/span&gt;&lt;/span&gt;(input) &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    transform_keys(input, &amp;amp;String.downcase/&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;transform_keys&lt;/span&gt;&lt;/span&gt;(input, tx_key_fun) &lt;span class=&quot;keyword&quot;&gt;when&lt;/span&gt; is_list(input) &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Enum.map(input, &lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt; el -&amp;gt; transform_keys(el, tx_key_fun) &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;transform_keys&lt;/span&gt;&lt;/span&gt;(input, tx_key_fun) &lt;span class=&quot;keyword&quot;&gt;when&lt;/span&gt; is_map(input) &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Enum.reduce(input, %&amp;#123;&amp;#125;, &lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt; &amp;#123;k, v&amp;#125;, acc -&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      Map.put(acc, tx_key_fun.(k), transform_keys(v, tx_key_fun))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;transform_keys&lt;/span&gt;&lt;/span&gt;(value, _tx_key_fun), &lt;span class=&quot;symbol&quot;&gt;do:&lt;/span&gt; value&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ExUnit.start&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;KeyTransformerTest&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; ExUnit.Case&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  import KeyTransformer&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  test &lt;span class=&quot;string&quot;&gt;&quot;simple map&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    assert lower_case_keys(%&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;NAME&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;Khaja&quot;&lt;/span&gt;&amp;#125;) == %&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;Khaja&quot;&lt;/span&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    assert lower_case_keys(%&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;NAME&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;Khaja&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Age&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125;) == %&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;Khaja&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;age&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  test &lt;span class=&quot;string&quot;&gt;&quot;nested map&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    assert lower_case_keys(%&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;Mujju&quot;&lt;/span&gt; =&amp;gt; %&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;NAME&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;Khaja&quot;&lt;/span&gt;&amp;#125;&amp;#125;) == %&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;mujju&quot;&lt;/span&gt; =&amp;gt; %&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;Khaja&quot;&lt;/span&gt;&amp;#125;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  test &lt;span class=&quot;string&quot;&gt;&quot;deeply nested map&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    assert lower_case_keys(%&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;Children&quot;&lt;/span&gt; =&amp;gt; %&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;Mujju&quot;&lt;/span&gt; =&amp;gt; %&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;NAME&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;Khaja&quot;&lt;/span&gt;&amp;#125;&amp;#125;&amp;#125;) == %&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;children&quot;&lt;/span&gt; =&amp;gt; %&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;mujju&quot;&lt;/span&gt; =&amp;gt; %&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;Khaja&quot;&lt;/span&gt;&amp;#125;&amp;#125;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  test &lt;span class=&quot;string&quot;&gt;&quot;list of maps&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    assert lower_case_keys([%&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;NAME&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;Zainu&quot;&lt;/span&gt;&amp;#125;]) == [%&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;Zainu&quot;&lt;/span&gt;&amp;#125;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    assert lower_case_keys([%&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;NAME&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;Khaja Muzaffaruddin&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;agE&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#125;, %&amp;#123;&amp;#125;]) == [%&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;age&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;Khaja Muzaffaruddin&quot;&lt;/span&gt;&amp;#125;, %&amp;#123;&amp;#125;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  test &lt;span class=&quot;string&quot;&gt;&quot;nested list of maps&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    assert lower_case_keys(%&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                             &lt;span class=&quot;string&quot;&gt;&quot;JUlian&quot;&lt;/span&gt; =&amp;gt; [%&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;Movie&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;Madagascar&quot;&lt;/span&gt;&amp;#125;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                           &amp;#125;) == %&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;julian&quot;&lt;/span&gt; =&amp;gt; [%&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;movie&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;Madagascar&quot;&lt;/span&gt;&amp;#125;]&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  test &lt;span class=&quot;string&quot;&gt;&quot;deeply nested list of maps&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    assert lower_case_keys(%&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;MovieGenres&quot;&lt;/span&gt; =&amp;gt; [%&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                             &lt;span class=&quot;string&quot;&gt;&quot;JUlian&quot;&lt;/span&gt; =&amp;gt; [%&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;Movie&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;Madagascar&quot;&lt;/span&gt;&amp;#125;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                           &amp;#125;, %&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;Ho&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;&amp;#125;], &lt;span class=&quot;string&quot;&gt;&quot;OK then&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;little story&quot;&lt;/span&gt;&amp;#125;) == %&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;moviegenres&quot;&lt;/span&gt; =&amp;gt; [%&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;julian&quot;&lt;/span&gt; =&amp;gt; [%&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;movie&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;Madagascar&quot;&lt;/span&gt;&amp;#125;]&amp;#125;, %&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;ho&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;&amp;#125;], &lt;span class=&quot;string&quot;&gt;&quot;ok then&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;little story&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;In a previous blog post we saw how to do &lt;a href=&quot;http://minhajuddin.com/2017/01/11/case-insensitive-key-retrieval-from-maps-in-elixir/&quot;&gt;
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="Map" scheme="http://minhajuddin.com/tags/map/"/>
    
      <category term="JSON" scheme="http://minhajuddin.com/tags/json/"/>
    
      <category term="Key Transform" scheme="http://minhajuddin.com/tags/key-transform/"/>
    
  </entry>
  
  <entry>
    <title>How to learn vim properly</title>
    <link href="http://minhajuddin.com/2017/01/19/how-to-learn-vim-properly/"/>
    <id>http://minhajuddin.com/2017/01/19/how-to-learn-vim-properly/</id>
    <published>2017-01-19T00:16:17.000Z</published>
    <updated>2017-02-13T08:53:21.000Z</updated>
    
    <content type="html">&lt;p&gt;Vim is the editor of my choice, I love it a lot. I try to find vim bindings everywhere I can,
A few apps which have good vim bindings&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Chrome with vimium&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The terminal with a proper &lt;code&gt;~/.inputrc&lt;/code&gt;. My &lt;code&gt;~/.inputrc&lt;/code&gt; below&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ~/.inputrc&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#vim key bindings&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; editing-mode vi&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; keymap vi&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# do not bell on tab-completion&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; bell-style bell&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; expand-tilde off&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; input-meta off&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; convert-meta on&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; output-meta off&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; horizontal-scroll-mode off&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;history&lt;/span&gt;-preserve-point on&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; mark-directories on&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; mark-symlinked-directories on&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; match-hidden-files off&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# completion settings&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; page-completions off&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; completion-query-items 2000&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; completion-ignore-case off&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; show-all-if-ambiguous on&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; show-all-if-unmodified on&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; completion-prefix-display-length 10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;-completions-horizontally off&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;C-n: &lt;span class=&quot;built_in&quot;&gt;history&lt;/span&gt;-search-forward&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;C-p: &lt;span class=&quot;built_in&quot;&gt;history&lt;/span&gt;-search-backward&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#new stuff&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;\C-a&quot;&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;history&lt;/span&gt;-search-forward&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once you set this up, many repls will respect these bindings. For instance irb, pry respect these. As a matter of fact any good terminal app which use the &lt;code&gt;readline&lt;/code&gt; library will respect this.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Tmux is another software that has vim bindings&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, whenever I work with someone people always seem to be impressed that vim can do so much so simply.
This is really the power of vim, vim was built for text editing and it is the best for this job. However, learning it can be quite painful and many people will abandon learning it in a few days.&lt;/p&gt;
&lt;p&gt;There is a very popular learning curve graph about vim&lt;/p&gt;
&lt;img src=&quot;/2017/01/19/how-to-learn-vim-properly/editor-learning-curve.png&quot; alt=&quot;Editor learning curves&quot; title=&quot;Editor learning curves&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/steverowe/2004/11/17/code-editor-learning-curves/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The part about vim is partially true, in that once it &lt;em&gt;clicks&lt;/em&gt; everything falls into place.&lt;/p&gt;
&lt;p&gt;Notepad is an editor which is very easy to use, but if you compare it to programming languages it has the capability of a calculator. You put your cursor in a place type stuff and that is all.
&lt;strong&gt;Vim lets you speak to it, in an intelligent way&lt;/strong&gt; Anyway, I am rambling at this point.&lt;/p&gt;
&lt;p&gt;The reason I am writing this blog post in the middle of the night is because many people ask me “How should I setup vim?”, I’d love to have it look/work like yours.
And many times I &lt;a href=&quot;https://github.com/minhajuddin/vimrc/blob/master/vimrc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;point them to my vimrc&lt;/a&gt;.
However, if you are planning on learning vim, don’t go there. Start with the following &lt;code&gt;~/.vimrc&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;set nocompatible&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;quot; plugins&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;call plug#begin(&amp;apos;~/.vim/plugged&amp;apos;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Plug &amp;apos;tpope/vim-sensible&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Plug &amp;apos;kien/ctrlp.vim&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Plug &amp;apos;matchit.zip&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;runtime macros/matchit.vim&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;call plug#end()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;quot; Ctrlp.vim&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let g:ctrlp_map = &amp;apos;&amp;lt;c-p&amp;gt;&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let g:ctrlp_cmd = &amp;apos;CtrlP&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let g:ctrlp_working_path_mode = &amp;apos;ra&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let g:ctrlp_custom_ignore = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  \ &amp;apos;dir&amp;apos;:  &amp;apos;\v[\/]\.(git|hg|svn)$&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  \ &amp;apos;file&amp;apos;: &amp;apos;\v\.(exe|so|dll)$&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  \ &amp;apos;link&amp;apos;: &amp;apos;some_bad_symbolic_links&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  \ &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;That is all, no more no less.&lt;/p&gt;
&lt;p&gt;To finish the installation, you need to do 2 things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Run &lt;code&gt;curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;vim +PlugInstall&lt;/code&gt; from your terminal&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A few simple tips on how to learn vim properly:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Finish &lt;code&gt;vimtutor&lt;/code&gt; on your terminal 3 to 4 times. Read everything 3 to 4 times and actually practice it.&lt;/li&gt;
&lt;li&gt;Learn about vim movements, commands and modes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Open your vim editor at the root of the project and have just one instance open, don’t open more than one instance per project. This is very very important. I can’t stress this enough&lt;/strong&gt;. To open another file from your project, hit Ctrl+P&lt;/li&gt;
&lt;li&gt;Start with a simple vimrc, The one I pasted above is a good start.&lt;/li&gt;
&lt;li&gt;Learn about buffers / windows and tabs in vim and how to navigate them.&lt;/li&gt;
&lt;li&gt;Add 1 extension that you think might help every month. And put a few sticky notes with its shortcuts/mappings on your monitor.&lt;/li&gt;
&lt;li&gt;Use &lt;a href=&quot;http://vimawesome.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://vimawesome.com/&lt;/a&gt; to find useful plugins.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt; Most important of all: Don’t use any plugin other than sensible and CtrlP for the first month&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Once you learn to speak the language of vim, using other editors will make you feel dumb.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Vim is the editor of my choice, I love it a lot. I try to find vim bindings everywhere I can,
A few apps which have good vim bindings&lt;/p&gt;
    
    </summary>
    
    
      <category term="Vim" scheme="http://minhajuddin.com/tags/vim/"/>
    
      <category term="Learn" scheme="http://minhajuddin.com/tags/learn/"/>
    
  </entry>
  
  <entry>
    <title>A simpler way to generate an incrementing version for elixir apps</title>
    <link href="http://minhajuddin.com/2017/01/18/a-simpler-way-to-generate-an-incrementing-version-for-elixir-apps/"/>
    <id>http://minhajuddin.com/2017/01/18/a-simpler-way-to-generate-an-incrementing-version-for-elixir-apps/</id>
    <published>2017-01-18T12:44:32.000Z</published>
    <updated>2017-02-13T08:53:21.000Z</updated>
    
    <content type="html">&lt;p&gt;Mix has the notion of versions built into it. If you open up a mix file you’ll see a line like below:&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# mix.exs&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Webmonitor&lt;/span&gt;&lt;/span&gt;.Mixfile &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; Mix.Project&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;project&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [&lt;span class=&quot;symbol&quot;&gt;app:&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;:webmonitor&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;symbol&quot;&gt;version:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;0.1.0&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ...&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;If you are using Git, there is a simple way to automatically generate a meaningful semantic version.
All you need to do is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Tag a commit with a version tag, like below:&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git tag --annotate v1.0 --message &lt;span class=&quot;string&quot;&gt;&#39;First production version, Yay!&#39;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;Put a helper function which can use this info with &lt;code&gt;git describe&lt;/code&gt; to generate a version&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;app_version&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# get git version&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#123;description, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125; = System.cmd(&lt;span class=&quot;string&quot;&gt;&quot;git&quot;&lt;/span&gt;, ~w[describe]) &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; returns something like: v1.0-231-g1c7ef8b&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  _git_version = String.strip(description)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                  |&amp;gt; String.split(&lt;span class=&quot;string&quot;&gt;&quot;-&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                  |&amp;gt; Enum.take(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                  |&amp;gt; Enum.join(&lt;span class=&quot;string&quot;&gt;&quot;.&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                  |&amp;gt; String.replace_leading(&lt;span class=&quot;string&quot;&gt;&quot;v&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;Use the return value from this function as the version&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# mix.exs&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Webmonitor&lt;/span&gt;&lt;/span&gt;.Mixfile &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; Mix.Project&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;project&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [&lt;span class=&quot;symbol&quot;&gt;app:&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;:webmonitor&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;symbol&quot;&gt;version:&lt;/span&gt; app_version(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ...&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The way this works is simple. &lt;a href=&quot;https://git-scm.com/docs/git-describe&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;From the man pages of git-describe&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NAME
      git-describe - Describe a commit using the most recent tag reachable from it&lt;/p&gt;
&lt;p&gt;DESCRIPTION
      The command finds the most recent tag that is reachable from a commit. If the tag points to the commit, then only the tag is shown. Otherwise, it suffixes the tag name with the
      number of additional commits on top of the tagged object and the abbreviated object name of the most recent commit.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, if you have a tag &lt;code&gt;v1.0&lt;/code&gt; like above, and if you have 10 commits on top of it, &lt;code&gt;git-describe&lt;/code&gt; will print &lt;code&gt;v1.0-100-g1c7ef8b&lt;/code&gt; where &lt;code&gt;v1.0&lt;/code&gt; is the latest git tag reachable from the
current commit, &lt;code&gt;100&lt;/code&gt; is the number of commits since then and &lt;code&gt;g1c7ef8b&lt;/code&gt; is the short commit hash of the current commit. We can easily transform this to &lt;code&gt;1.0.100&lt;/code&gt; using the above helper function.
Now, you have a nice way of automatically managing versions. The patch version is bumped whenever a commit is made, the major and minor version can be changed by creating a new tag, e.g. &lt;code&gt;v1.2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This is very useful when you are using &lt;a href=&quot;https://github.com/bitwalker/distillery&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;distillery&lt;/a&gt; for building your releases&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Mix has the notion of versions built into it. If you open up a mix file you’ll see a line like below:&lt;/p&gt;
&lt;figure class=&quot;highlight elixir
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="Version" scheme="http://minhajuddin.com/tags/version/"/>
    
      <category term="SemVer" scheme="http://minhajuddin.com/tags/semver/"/>
    
      <category term="Automatic Generation" scheme="http://minhajuddin.com/tags/automatic-generation/"/>
    
      <category term="Hex" scheme="http://minhajuddin.com/tags/hex/"/>
    
  </entry>
  
  <entry>
    <title>Case insensitive key retrieval from maps in Elixir</title>
    <link href="http://minhajuddin.com/2017/01/11/case-insensitive-key-retrieval-from-maps-in-elixir/"/>
    <id>http://minhajuddin.com/2017/01/11/case-insensitive-key-retrieval-from-maps-in-elixir/</id>
    <published>2017-01-11T16:27:40.000Z</published>
    <updated>2017-02-13T08:53:21.000Z</updated>
    
    <content type="html">&lt;p&gt;I ran into an issue with inconsistent naming of keys in one of my provider’s json.
This is really bad data quality, the data that is being sent should have consistent key names.
Either uppper, lower, or capitalized, but consistent. Anyway, this provider was sending data will all kinds of mixed case keys.&lt;/p&gt;
&lt;p&gt;Here is some elixir code that I wrote to get keys using a case insensitive match.
There is an issue on the &lt;a href=&quot;https://github.com/devinus/poison/issues/44&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Poison decoder project&lt;/a&gt; which should render this useless, however till that is fixed you can use the code below:&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CaseInsensitiveGetIn&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ci_get_in&lt;/span&gt;&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nil&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;), &lt;span class=&quot;symbol&quot;&gt;do:&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;nil&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ci_get_in&lt;/span&gt;&lt;/span&gt;(&amp;#123;_k, val&amp;#125;, []), &lt;span class=&quot;symbol&quot;&gt;do:&lt;/span&gt; val&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ci_get_in&lt;/span&gt;&lt;/span&gt;(&amp;#123;_k, val&amp;#125;, key), &lt;span class=&quot;symbol&quot;&gt;do:&lt;/span&gt; ci_get_in val, key&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ci_get_in&lt;/span&gt;&lt;/span&gt;(map, [key|rest]) &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    current_level_map = Enum.find(map, &amp;amp;key_lookup(&amp;amp;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, key))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ci_get_in current_level_map, rest&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;key_lookup&lt;/span&gt;&lt;/span&gt;(&amp;#123;k, _v&amp;#125;, key) &lt;span class=&quot;keyword&quot;&gt;when&lt;/span&gt; is_binary(k) &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    String.downcase(k) == String.downcase(key)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ExUnit.start&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CaseInsensitiveGetInTest&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; ExUnit.Case&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  import CaseInsensitiveGetIn&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  test &lt;span class=&quot;string&quot;&gt;&quot;gets an exact key&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    assert ci_get_in(%&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;Mujju&quot;&lt;/span&gt;&amp;#125;, ~w(name)) == &lt;span class=&quot;string&quot;&gt;&quot;Mujju&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  test &lt;span class=&quot;string&quot;&gt;&quot;gets capitalized key in map&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    assert ci_get_in(%&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;Name&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;Mujju&quot;&lt;/span&gt;&amp;#125;, ~w(name)) == &lt;span class=&quot;string&quot;&gt;&quot;Mujju&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  test &lt;span class=&quot;string&quot;&gt;&quot;gets capitalized input key in map&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    assert ci_get_in(%&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;Name&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;Mujju&quot;&lt;/span&gt;&amp;#125;, ~w(Name)) == &lt;span class=&quot;string&quot;&gt;&quot;Mujju&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  test &lt;span class=&quot;string&quot;&gt;&quot;gets mixed input key in map&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    assert ci_get_in(%&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;NaME&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;Mujju&quot;&lt;/span&gt;&amp;#125;, ~w(nAme)) == &lt;span class=&quot;string&quot;&gt;&quot;Mujju&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  test &lt;span class=&quot;string&quot;&gt;&quot;gets an exact deep key&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    assert ci_get_in(%&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;Mujju&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;sister&quot;&lt;/span&gt; =&amp;gt; %&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;Zainu&quot;&lt;/span&gt;&amp;#125;&amp;#125;, ~w(sister name)) == &lt;span class=&quot;string&quot;&gt;&quot;Zainu&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  test &lt;span class=&quot;string&quot;&gt;&quot;gets an mixed case deep map key&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    assert ci_get_in(%&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;Mujju&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;sisTER&quot;&lt;/span&gt; =&amp;gt; %&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;naME&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;Zainu&quot;&lt;/span&gt;&amp;#125;&amp;#125;, ~w(sister name)) == &lt;span class=&quot;string&quot;&gt;&quot;Zainu&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  test &lt;span class=&quot;string&quot;&gt;&quot;gets an mixed case deep key&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    assert ci_get_in(%&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;Mujju&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;sisTER&quot;&lt;/span&gt; =&amp;gt; %&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;naME&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;Zainu&quot;&lt;/span&gt;&amp;#125;&amp;#125;, ~w(sIStER NAme)) == &lt;span class=&quot;string&quot;&gt;&quot;Zainu&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  test &lt;span class=&quot;string&quot;&gt;&quot;gets a very deep key&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    map = %&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;aB&quot;&lt;/span&gt; =&amp;gt; %&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;BC&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;c&quot;&lt;/span&gt; =&amp;gt; %&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;DD&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;symbol&quot;&gt;:foo&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Cassandra&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;symbol&quot;&gt;:awesome&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;MOO&quot;&lt;/span&gt; =&amp;gt; %&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;Mujju&quot;&lt;/span&gt;&amp;#125;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    assert ci_get_in(map, ~w(ab bc)) == &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    assert ci_get_in(map, ~w(ab c dd)) == &lt;span class=&quot;symbol&quot;&gt;:foo&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    assert ci_get_in(map, ~w(ab c moo name)) == &lt;span class=&quot;string&quot;&gt;&quot;Mujju&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    assert ci_get_in(map, ~w(ab Bc)) == &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    assert ci_get_in(map, ~w(ab C dD)) == &lt;span class=&quot;symbol&quot;&gt;:foo&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    assert ci_get_in(map, ~w(ab C mOo nAMe)) == &lt;span class=&quot;string&quot;&gt;&quot;Mujju&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;I ran into an issue with inconsistent naming of keys in one of my provider’s json.
This is really bad data quality, the data that is bein
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="Case insensitive" scheme="http://minhajuddin.com/tags/case-insensitive/"/>
    
      <category term="Map" scheme="http://minhajuddin.com/tags/map/"/>
    
      <category term="Retrieval" scheme="http://minhajuddin.com/tags/retrieval/"/>
    
  </entry>
  
  <entry>
    <title>Script to analyze the structure of an xml document</title>
    <link href="http://minhajuddin.com/2017/01/05/script-to-analyze-the-structure-of-an-xml-document/"/>
    <id>http://minhajuddin.com/2017/01/05/script-to-analyze-the-structure-of-an-xml-document/</id>
    <published>2017-01-05T16:22:24.000Z</published>
    <updated>2017-02-13T08:53:21.000Z</updated>
    
    <content type="html">&lt;p&gt;While working with XML data, you often don’t find the WSDL files and may end up
manually working through the document to understand its structure. At my current project
I ran into a few hundred XML files and had to analyze them to understand the data available.
Here is a script I created which prints all the possible nodes in the input files&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;#!/usr/bin/env ruby&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Author: Khaja Minhajuddin &amp;lt;minhajuddin.k@gmail.com&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;require &amp;apos;nokogiri&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;class XmlAnalyze&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  def initialize(filepaths)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    @filepaths = filepaths&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    @node_paths = &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  end&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  def analyze&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    @filepaths.each &amp;#123; |filepath| analyze_file(filepath) &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    @node_paths.keys.sort&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  end&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  private&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  def analyze_file(filepath)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    @doc = File.open(filepath) &amp;#123; |f| Nokogiri::XML(f) &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    analyze_node(@doc.children.first)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  end&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  def analyze_node(node)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return if node.is_a? Nokogiri::XML::Text&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    add_path node.path&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    node.attributes.keys.each do |attr|&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      add_path(&amp;quot;#&amp;#123;node.path&amp;#125;:#&amp;#123;attr&amp;#125;&amp;quot;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    end&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    node.children.each do |child|&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      analyze_node(child)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    end&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  end&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  def add_path(path)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    path = path.gsub(/\[\d+\]/, &amp;apos;&amp;apos;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    @node_paths[path] = true&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  end&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;end&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;if ARGV.empty?&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  puts &amp;apos;Usage: ./analyze_xml.rb file1.xml file2.xml ....&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  exit(-1)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;end&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;puts XmlAnalyze.new(ARGV).analyze&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;It outputs the following for the xml below&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;root&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;person&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;full&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Khaja&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;age&lt;/span&gt;&amp;gt;&lt;/span&gt;31&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;age&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;person&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;person&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;full&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Khaja&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dob&lt;/span&gt;&amp;gt;&lt;/span&gt;Jan&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dob&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;person&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;root&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;/root&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/root/person&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/root/person/age&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/root/person/dob&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/root/person/name&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/root/person/name:type&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Hope you find it useful!&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;While working with XML data, you often don’t find the WSDL files and may end up
manually working through the document to understand its s
    
    </summary>
    
    
      <category term="Nokogiri" scheme="http://minhajuddin.com/tags/nokogiri/"/>
    
      <category term="Xml" scheme="http://minhajuddin.com/tags/xml/"/>
    
      <category term="Analyze" scheme="http://minhajuddin.com/tags/analyze/"/>
    
      <category term="Structure" scheme="http://minhajuddin.com/tags/structure/"/>
    
  </entry>
  
  <entry>
    <title>Bash completion script for mix</title>
    <link href="http://minhajuddin.com/2016/12/23/bash-completion-script-for-mix/"/>
    <id>http://minhajuddin.com/2016/12/23/bash-completion-script-for-mix/</id>
    <published>2016-12-23T17:02:14.000Z</published>
    <updated>2017-02-13T08:53:21.000Z</updated>
    
    <content type="html">&lt;p&gt;Bash completion is very handy for cli tools. You can set it up very easily for &lt;code&gt;mix&lt;/code&gt; using the following script.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;#!/bin/bash&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# `sudo vim /etc/bash_completion.d/mix.sh` and put this inside of it&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# mix bash completion script&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;complete_mix_command() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  [ -f mix.exs ] || exit 0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  mix help --search &amp;quot;$2&amp;quot;| cut -f1 -d&amp;apos;#&amp;apos; | cut -f2 -d&amp;apos; &amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  return $?&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;complete -C complete_mix_command -o default mix&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Bash completion is very handy for cli tools. You can set it up very easily for &lt;code&gt;mix&lt;/code&gt; using the following script.&lt;/p&gt;
&lt;figure c
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="Mix" scheme="http://minhajuddin.com/tags/mix/"/>
    
      <category term="Bash completion" scheme="http://minhajuddin.com/tags/bash-completion/"/>
    
  </entry>
  
  <entry>
    <title>How to show your blog content in your Rails application</title>
    <link href="http://minhajuddin.com/2016/12/22/how-to-show-your-blog-content-in-your-rails-application/"/>
    <id>http://minhajuddin.com/2016/12/22/how-to-show-your-blog-content-in-your-rails-application/</id>
    <published>2016-12-22T08:19:24.000Z</published>
    <updated>2017-02-13T08:53:21.000Z</updated>
    
    <content type="html">&lt;p&gt;I recently released &lt;a href=&quot;https://liveformhq.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LiveForm&lt;/a&gt; which is a service which gives you form endpoints (I’d love to have you check it out :) )
I wanted to show my blog’s content on the home page, It is pretty straightforward with the rich ruby ecosystem.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;First you need a way to get the data from your blog. The LiveForm blog has an atom feed at &lt;a href=&quot;http://blog.liveformhq.com/atom.xml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.liveformhq.com/atom.xml&lt;/a&gt; . I initially used RestClient to get the data from the feed.  &lt;/li&gt;
&lt;li&gt;Once we have the feed, we need to parse it to extract the right content. Some quick googling led me to the awesome &lt;a href=&quot;https://github.com/feedjira/feedjira&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;feedjira&lt;/a&gt; gem, (I am not gonna comment about the awesome name:))&lt;/li&gt;
&lt;li&gt;feedjira actually has a simple method to parse the feed from a URL &lt;code&gt;Feedjira::Feed.fetch_and_parse(url)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Once I got the entries, I just had to format them properly. However, there was an issue with summaries of blog posts having malformed html. This was due to naively slicing the blog post content at 200 characters by hexo (the blog engine I use), Nokogiri has a simple way of working around this. However, I went one step further and removed all html markup from the summary so that it doesn’t mess with the web application’s markup: &lt;code&gt;Nokogiri::HTML(entry.summary).css(&amp;quot;body&amp;quot;).text&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Finally, I didn’t want to fetch and parse my feed for every user that visited my website. So, I used fragment caching to render the feed once every day.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here is all the relevant code:&lt;/p&gt;
&lt;p&gt;The class that fetches and parses the feed&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LiveformBlog&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  URL = &lt;span class=&quot;string&quot;&gt;&quot;http://blog.liveformhq.com/atom.xml&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;entries&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Rails.logger.info &lt;span class=&quot;string&quot;&gt;&quot;Fetching feed....................&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    feed = Feedjira::Feed.fetch_and_parse(URL)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    feed.entries.take(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;).map &amp;#123;&lt;span class=&quot;params&quot;&gt;|x|&lt;/span&gt; parse_entry(x)&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  private&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;parse_entry&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(entry)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    OpenStruct.new(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;symbol&quot;&gt;title:&lt;/span&gt; entry.title,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;symbol&quot;&gt;summary:&lt;/span&gt; fix_summary(entry),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;symbol&quot;&gt;url:&lt;/span&gt; entry.url,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;symbol&quot;&gt;published:&lt;/span&gt; entry.published,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    )&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fix_summary&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(entry)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    doc = Nokogiri::HTML(entry.summary)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    doc.css(&lt;span class=&quot;string&quot;&gt;&#39;body&#39;&lt;/span&gt;).text&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The view that caches and renders the feed&lt;/p&gt;
&lt;figure class=&quot;highlight erb&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;ruby&quot;&gt; cache Date.today.to_s &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;blog-posts&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h2&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;section-heading&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;From our Blog&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;ruby&quot;&gt; LiveformBlog.new.entries.each &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;|entry|&lt;/span&gt; &lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;blog-post&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h4&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;%=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;ruby&quot;&gt; entry.url &lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;string&quot;&gt;%&amp;gt;&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;ruby&quot;&gt; entry.title &lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h4&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;blog-post__published&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;ruby&quot;&gt; short_time entry.published &lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;ruby&quot;&gt; entry.summary &lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;%&amp;gt;&lt;/span&gt;...&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;ruby&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt; &lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;ruby&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt; &lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Screenshot of the current page&lt;/p&gt;
&lt;img src=&quot;/2016/12/22/how-to-show-your-blog-content-in-your-rails-application/liveform-blog-content.png&quot; alt=&quot;Liveform blog&quot; title=&quot;Liveform blog&quot;&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;I recently released &lt;a href=&quot;https://liveformhq.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LiveForm&lt;/a&gt; which is a service which gives you form
    
    </summary>
    
    
      <category term="Blog" scheme="http://minhajuddin.com/tags/blog/"/>
    
      <category term="Rails" scheme="http://minhajuddin.com/tags/rails/"/>
    
      <category term="Atom" scheme="http://minhajuddin.com/tags/atom/"/>
    
  </entry>
  
  <entry>
    <title>How to deploy a simple phoenix app on a single server using distillery</title>
    <link href="http://minhajuddin.com/2016/11/13/how-to-deploy-a-simple-phoenix-app-on-a-single-server-using-distillery/"/>
    <id>http://minhajuddin.com/2016/11/13/how-to-deploy-a-simple-phoenix-app-on-a-single-server-using-distillery/</id>
    <published>2016-11-13T16:09:14.000Z</published>
    <updated>2017-02-13T08:53:21.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;If-you-find-issues-or-can-improve-this-guide-please-create-a-pull-request-at&quot;&gt;&lt;a href=&quot;#If-you-find-issues-or-can-improve-this-guide-please-create-a-pull-request-at&quot; class=&quot;headerlink&quot; title=&quot;If you find issues or can improve this guide, please create a pull request at:&quot;&gt;&lt;/a&gt;If you find issues or can improve this guide, please create a pull request at:&lt;/h3&gt;&lt;h2 id=&quot;2-Setup-the-server&quot;&gt;&lt;a href=&quot;#2-Setup-the-server&quot; class=&quot;headerlink&quot; title=&quot;2. Setup the server&quot;&gt;&lt;/a&gt;2. Setup the server&lt;/h2&gt;&lt;p&gt;We’ll be running our server under the user called &lt;code&gt;slugex&lt;/code&gt;. So, we first need
to create that user.&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;## commands to be executed on our server&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;APP_USER=slugex&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# create prent dir for our home&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo mkdir -p /opt/www&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# create the user&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo useradd --home &lt;span class=&quot;string&quot;&gt;&quot;/opt/www/&lt;span class=&quot;variable&quot;&gt;$APP_USER&lt;/span&gt;&quot;&lt;/span&gt; --create-home --shell /bin/bash &lt;span class=&quot;variable&quot;&gt;$APP_USER&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# create the postgresql role for our user&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo -u postgres createuser --echo --no-createrole --no-superuser --createdb &lt;span class=&quot;variable&quot;&gt;$APP_USER&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;3-Install-the-git-deploy-rubygem-on-our-local-computer&quot;&gt;&lt;a href=&quot;#3-Install-the-git-deploy-rubygem-on-our-local-computer&quot; class=&quot;headerlink&quot; title=&quot;3. Install the git-deploy rubygem on our local computer&quot;&gt;&lt;/a&gt;3. Install the git-deploy rubygem on our local computer&lt;/h2&gt;&lt;p&gt;We’ll be using the &lt;a href=&quot;https://github.com/mislav/git-deploy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git-deploy&lt;/a&gt; rubygem to
do deploys. This allows deploys similar to Heroku. You just need to push to your
  production git repository to start a deployment.&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;## commands to be executed on our local computer&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# install the gem&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# you need ruby installed on your computer for this&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gem install git-deploy&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;4-Setup-distillery-in-our-phoenix-app-on-local-computer&quot;&gt;&lt;a href=&quot;#4-Setup-distillery-in-our-phoenix-app-on-local-computer&quot; class=&quot;headerlink&quot; title=&quot;4. Setup distillery in our phoenix app (on local computer)&quot;&gt;&lt;/a&gt;4. Setup distillery in our phoenix app (on local computer)&lt;/h2&gt;&lt;p&gt;We’ll be using &lt;a href=&quot;https://github.com/bitwalker/distillery&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;distillery&lt;/a&gt; to manage our releases.&lt;/p&gt;
&lt;p&gt;Add the distillery dependency to our &lt;code&gt;mix.exs&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;deps&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  [&amp;#123;&lt;span class=&quot;symbol&quot;&gt;:distillery&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;~&amp;gt; 0.10&quot;&lt;/span&gt;&amp;#125;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Init the distillery config
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# get dependencies&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mix deps.get&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# init distillery&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mix release.init&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Change &lt;code&gt;rel/config.ex&lt;/code&gt; to look like below&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;environment &lt;span class=&quot;symbol&quot;&gt;:prod&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  set &lt;span class=&quot;symbol&quot;&gt;include_erts:&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  set &lt;span class=&quot;symbol&quot;&gt;include_src:&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# cookie info ...&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;5-Setup-git-deploy-local-computer&quot;&gt;&lt;a href=&quot;#5-Setup-git-deploy-local-computer&quot; class=&quot;headerlink&quot; title=&quot;5. Setup git deploy (local computer)&quot;&gt;&lt;/a&gt;5. Setup git deploy (local computer)&lt;/h2&gt;&lt;p&gt;Let us setup the remote and the deploy hooks&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;## commands to be executed on our local computer&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# setup the git remote pointing to our prod server&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git remote add prod slugex@slugex.com:/opt/www/slugex&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# init&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git deploy setup -r &lt;span class=&quot;string&quot;&gt;&quot;prod&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# create the deploy files&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git deploy init&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# push to production&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git push prod master&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;TODO-release-this-as-a-book&quot;&gt;&lt;a href=&quot;#TODO-release-this-as-a-book&quot; class=&quot;headerlink&quot; title=&quot;TODO: release this as a book&quot;&gt;&lt;/a&gt;TODO: release this as a book&lt;/h2&gt;&lt;h2 id=&quot;6-Setup-postgresql-access&quot;&gt;&lt;a href=&quot;#6-Setup-postgresql-access&quot; class=&quot;headerlink&quot; title=&quot;6. Setup postgresql access&quot;&gt;&lt;/a&gt;6. Setup postgresql access&lt;/h2&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;## commands to be executed on the server as the slugex user&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# create the database&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;createdb slugex_prod&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# set the password for the slugex user&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;psql slugex_prod&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt; slugex_prod=&amp;gt; \password slugex&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt; Enter new password: enter the password&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt; Enter it again: repeat the password&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;6-Setup-the-prod-secret-exs&quot;&gt;&lt;a href=&quot;#6-Setup-the-prod-secret-exs&quot; class=&quot;headerlink&quot; title=&quot;6. Setup the prod.secret.exs&quot;&gt;&lt;/a&gt;6. Setup the prod.secret.exs&lt;/h2&gt;&lt;p&gt;Copy the config/prod.secret.exs file from your local computer to /opt/www/slugex/config/prod.secret.exs&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;## on local computer from our phoenix app directory&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;scp config/prod.secret.exs slugex@slugex.com:config/&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;create a new secret on your local computer using &lt;code&gt;mix phoenix.gen.secret&lt;/code&gt; and
paste it in the server’s config/prod.secret.exs secret&lt;/p&gt;
&lt;p&gt;It should look something like below:&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# on the server&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# /opt/www/slugex/config/prod.secret.exs&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; Mix.Config&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;config &lt;span class=&quot;symbol&quot;&gt;:simple&lt;/span&gt;, Simple.Endpoint,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;symbol&quot;&gt;secret_key_base:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;RgeM4Dt8kl3yyf47K1DXWr8mgANzOL9TNOOiCknZM8LLDeSdS1ia5Vc2HkmKhy68&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;symbol&quot;&gt;http:&lt;/span&gt; [&lt;span class=&quot;symbol&quot;&gt;port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4010&lt;/span&gt;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;symbol&quot;&gt;server:&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;# &amp;lt;=== this is very important&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;symbol&quot;&gt;root:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;/opt/www/slugex&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;symbol&quot;&gt;url:&lt;/span&gt; [&lt;span class=&quot;symbol&quot;&gt;host:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;slugex.com&quot;&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;443&lt;/span&gt;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;symbol&quot;&gt;cache_static_manifest:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;priv/static/manifest.json&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Do not print debug messages in production&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;config &lt;span class=&quot;symbol&quot;&gt;:logger&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;level:&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;:info&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Configure your database&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;config &lt;span class=&quot;symbol&quot;&gt;:simple&lt;/span&gt;, Simple.Repo,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;symbol&quot;&gt;adapter:&lt;/span&gt; Ecto.Adapters.Postgres,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;symbol&quot;&gt;username:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;slugex&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;symbol&quot;&gt;password:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;another brick in the wall&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;symbol&quot;&gt;database:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;slugex_prod&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;symbol&quot;&gt;pool_size:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;6-Tweak-the-deploy-scripts&quot;&gt;&lt;a href=&quot;#6-Tweak-the-deploy-scripts&quot; class=&quot;headerlink&quot; title=&quot;6. Tweak the deploy scripts&quot;&gt;&lt;/a&gt;6. Tweak the deploy scripts&lt;/h2&gt;&lt;h2 id=&quot;7-One-time-setup-on-the-server&quot;&gt;&lt;a href=&quot;#7-One-time-setup-on-the-server&quot; class=&quot;headerlink&quot; title=&quot;7. One time setup on the server&quot;&gt;&lt;/a&gt;7. One time setup on the server&lt;/h2&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;## commands to be executed on server as slugex&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;MIX_ENV=prod mix &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; compile, ecto.create&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;MIX_ENV=prod ./deploy/after_push&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Logger&quot;&gt;&lt;a href=&quot;#Logger&quot; class=&quot;headerlink&quot; title=&quot;Logger&quot;&gt;&lt;/a&gt;Logger&lt;/h2&gt;&lt;h2 id=&quot;Exception-notifications&quot;&gt;&lt;a href=&quot;#Exception-notifications&quot; class=&quot;headerlink&quot; title=&quot;Exception notifications&quot;&gt;&lt;/a&gt;Exception notifications&lt;/h2&gt;&lt;h2 id=&quot;Setup-systemd&quot;&gt;&lt;a href=&quot;#Setup-systemd&quot; class=&quot;headerlink&quot; title=&quot;Setup systemd&quot;&gt;&lt;/a&gt;Setup systemd&lt;/h2&gt;&lt;h2 id=&quot;6-One-time-setup-on-server-on-server-as-slugex-user&quot;&gt;&lt;a href=&quot;#6-One-time-setup-on-server-on-server-as-slugex-user&quot; class=&quot;headerlink&quot; title=&quot;6. One time setup on server (on server as slugex user)&quot;&gt;&lt;/a&gt;6. One time setup on server (on server as slugex user)&lt;/h2&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;## commands to be run on the server as the slugex user&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; /opt/www/slugex&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# create the secrets config&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;use Mix.Config&#39;&lt;/span&gt; &amp;gt; config/prod.secrets.exs&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# add your configuration to this file&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# update hex&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; MIX_ENV=prod&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mix local.hex --force&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mix deps.get&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mix ecto.create&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;6-Nginx-configuration&quot;&gt;&lt;a href=&quot;#6-Nginx-configuration&quot; class=&quot;headerlink&quot; title=&quot;6. Nginx configuration&quot;&gt;&lt;/a&gt;6. Nginx configuration&lt;/h2&gt;&lt;h2 id=&quot;7-Letsencrypt-setup-and-configuration&quot;&gt;&lt;a href=&quot;#7-Letsencrypt-setup-and-configuration&quot; class=&quot;headerlink&quot; title=&quot;7. Letsencrypt setup and configuration&quot;&gt;&lt;/a&gt;7. Letsencrypt setup and configuration&lt;/h2&gt;&lt;h2 id=&quot;9-TODO-Configuration-using-conform&quot;&gt;&lt;a href=&quot;#9-TODO-Configuration-using-conform&quot; class=&quot;headerlink&quot; title=&quot;9. TODO: Configuration using conform&quot;&gt;&lt;/a&gt;9. TODO: Configuration using conform&lt;/h2&gt;&lt;h2 id=&quot;10-TODO-database-backups-to-S3&quot;&gt;&lt;a href=&quot;#10-TODO-database-backups-to-S3&quot; class=&quot;headerlink&quot; title=&quot;10. TODO: database backups to S3&quot;&gt;&lt;/a&gt;10. TODO: database backups to S3&lt;/h2&gt;&lt;h2 id=&quot;10-TODO-uptime-monitoring-of-websites-using-uptime-monitor&quot;&gt;&lt;a href=&quot;#10-TODO-uptime-monitoring-of-websites-using-uptime-monitor&quot; class=&quot;headerlink&quot; title=&quot;10. TODO: uptime monitoring of websites using uptime monitor&quot;&gt;&lt;/a&gt;10. TODO: uptime monitoring of websites using uptime monitor&lt;/h2&gt;&lt;h2 id=&quot;10-TODO-email-via-SES&quot;&gt;&lt;a href=&quot;#10-TODO-email-via-SES&quot; class=&quot;headerlink&quot; title=&quot;10. TODO: email via SES&quot;&gt;&lt;/a&gt;10. TODO: email via SES&lt;/h2&gt;&lt;h2 id=&quot;10-TODO-db-seeds&quot;&gt;&lt;a href=&quot;#10-TODO-db-seeds&quot; class=&quot;headerlink&quot; title=&quot;10. TODO: db seeds&quot;&gt;&lt;/a&gt;10. TODO: db seeds&lt;/h2&gt;&lt;h2 id=&quot;10-TODO-nginx-caching-basics-static-assets-large-expirations&quot;&gt;&lt;a href=&quot;#10-TODO-nginx-caching-basics-static-assets-large-expirations&quot; class=&quot;headerlink&quot; title=&quot;10. TODO: nginx caching basics, static assets large expirations&quot;&gt;&lt;/a&gt;10. TODO: nginx caching basics, static assets large expirations&lt;/h2&gt;&lt;h2 id=&quot;10-TODO-remote-console-for-debugging&quot;&gt;&lt;a href=&quot;#10-TODO-remote-console-for-debugging&quot; class=&quot;headerlink&quot; title=&quot;10. TODO: remote console for debugging&quot;&gt;&lt;/a&gt;10. TODO: remote console for debugging&lt;/h2&gt;&lt;p&gt;sudo letsencrypt certonly –webroot -w /opt/www/webmonitor/public/ -d webmonitorhq.com  –webroot -w /opt/www/webmonitor/public/ -d www.webmonitorhq.com&lt;/p&gt;
&lt;h2 id=&quot;11-Check-SSL-certificate-https-www-sslshopper-com-ssl-checker-html&quot;&gt;&lt;a href=&quot;#11-Check-SSL-certificate-https-www-sslshopper-com-ssl-checker-html&quot; class=&quot;headerlink&quot; title=&quot;11. Check SSL certificate: https://www.sslshopper.com/ssl-checker.html&quot;&gt;&lt;/a&gt;11. Check SSL certificate: &lt;a href=&quot;https://www.sslshopper.com/ssl-checker.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.sslshopper.com/ssl-checker.html&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&quot;Common-mistakes-errors&quot;&gt;&lt;a href=&quot;#Common-mistakes-errors&quot; class=&quot;headerlink&quot; title=&quot;Common mistakes/errors&quot;&gt;&lt;/a&gt;Common mistakes/errors&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;SSH errors&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Improvements&quot;&gt;&lt;a href=&quot;#Improvements&quot; class=&quot;headerlink&quot; title=&quot;Improvements&quot;&gt;&lt;/a&gt;Improvements&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Automate all of these using a hex package?&lt;/li&gt;
&lt;li&gt;Remove dependencies on &lt;code&gt;git-deploy&lt;/code&gt; if possible&lt;/li&gt;
&lt;li&gt;Hot upgrades&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;If-you-find-issues-or-can-improve-this-guide-please-create-a-pull-request-at&quot;&gt;&lt;a href=&quot;#If-you-find-issues-or-can-improve-this-guide
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="Phoenix" scheme="http://minhajuddin.com/tags/phoenix/"/>
    
      <category term="Distillery" scheme="http://minhajuddin.com/tags/distillery/"/>
    
      <category term="Git" scheme="http://minhajuddin.com/tags/git/"/>
    
      <category term="Deploy" scheme="http://minhajuddin.com/tags/deploy/"/>
    
      <category term="Heroku" scheme="http://minhajuddin.com/tags/heroku/"/>
    
  </entry>
  
  <entry>
    <title>How to extract bits from a binary in elixir</title>
    <link href="http://minhajuddin.com/2016/11/01/how-to-extract-bits-from-a-binary-in-elixir/"/>
    <id>http://minhajuddin.com/2016/11/01/how-to-extract-bits-from-a-binary-in-elixir/</id>
    <published>2016-11-01T10:58:50.000Z</published>
    <updated>2017-02-13T08:53:21.000Z</updated>
    
    <content type="html">&lt;p&gt;Erlang and by extension Elixir have powerful pattern matching constructs, which
allow you to easily extract bits from a binary. Here is an example which takes
a binary and returns their bits&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Bits&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# this is the public api which allows you to pass any binary representation&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;extract&lt;/span&gt;&lt;/span&gt;(str) &lt;span class=&quot;keyword&quot;&gt;when&lt;/span&gt; is_binary(str) &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    extract(str, [])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# this function does the heavy lifting by matching the input binary to&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# a single bit and sends the rest of the bits recursively back to itself&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;extract&lt;/span&gt;&lt;/span&gt;(&amp;lt;&amp;lt;b &lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;: size(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), bits &lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;: bitstring&amp;gt;&amp;gt;, acc) &lt;span class=&quot;keyword&quot;&gt;when&lt;/span&gt; is_bitstring(bits) &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    extract(bits, [b | acc])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# this is the terminal condition when we don&#39;t have anything more to extract&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;extract&lt;/span&gt;&lt;/span&gt;(&amp;lt;&amp;lt;&amp;gt;&amp;gt;, acc), &lt;span class=&quot;symbol&quot;&gt;do:&lt;/span&gt; acc |&amp;gt; Enum.reverse&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;IO.inspect Bits.extract(&lt;span class=&quot;string&quot;&gt;&quot;!!&quot;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;IO.inspect Bits.extract(&amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;99&lt;/span&gt; &amp;gt;&amp;gt;) &lt;span class=&quot;comment&quot;&gt;#=&amp;gt; [0, 1, 1, 0, 0, 0, 1, 1]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The code is pretty self explanatory&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Erlang and by extension Elixir have powerful pattern matching constructs, which
allow you to easily extract bits from a binary. Here is a
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="Binary" scheme="http://minhajuddin.com/tags/binary/"/>
    
      <category term="Bits" scheme="http://minhajuddin.com/tags/bits/"/>
    
      <category term="Pattern matching" scheme="http://minhajuddin.com/tags/pattern-matching/"/>
    
  </entry>
  
  <entry>
    <title>Elixir process timeout pitfall</title>
    <link href="http://minhajuddin.com/2016/10/31/elixir-process-timeout-pitfall/"/>
    <id>http://minhajuddin.com/2016/10/31/elixir-process-timeout-pitfall/</id>
    <published>2016-10-31T17:13:12.000Z</published>
    <updated>2017-02-13T08:53:21.000Z</updated>
    
    <content type="html">&lt;p&gt;If you taken a look at Elixir, you may have come across something like the below code&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HardWorker&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;work&lt;/span&gt;&lt;/span&gt;(id) &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Process.sleep(id * &lt;span class=&quot;number&quot;&gt;900&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;span class=&quot;symbol&quot;&gt;:done&lt;/span&gt;, id&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Runner&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;variable&quot;&gt;@total_timeout&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;us, &lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;&amp;#125; = &lt;span class=&quot;symbol&quot;&gt;:timer&lt;/span&gt;.tc &amp;amp;work/&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    IO.puts &lt;span class=&quot;string&quot;&gt;&quot;ELAPSED_TIME: &lt;span class=&quot;subst&quot;&gt;#&amp;#123;us/&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;work&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    tasks = Enum.map &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;..&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt; id -&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      Task.async(HardWorker, &lt;span class=&quot;symbol&quot;&gt;:work&lt;/span&gt;, [id])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Enum.map(tasks, &lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt; task -&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      Task.await(task, &lt;span class=&quot;variable&quot;&gt;@total_timeout&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Runner.run&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Looks simple enough, we loop over and create 10 processes and then wait
for them to finish. It also prints out a message &lt;code&gt;ELAPSED_TIME: _&lt;/code&gt; at the end where
_ is the time taken for it to run all the processes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Can you take a guess how long this runner will take in the worst case?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you guessed 10 seconds, you are right! I didn’t guess 10 seconds when I first
saw this kind of code. I expected it to exit after 1 second. However, the key
here is that &lt;code&gt;Task.await&lt;/code&gt; is called on 10 tasks and if the 10 tasks finish
at the end of 1s, 2s, … 10s This code will run just fine.&lt;/p&gt;
&lt;p&gt;This is a completely made up example but it should show you that running in parallel
with timeouts is not just a &lt;code&gt;Task.await&lt;/code&gt; away.&lt;/p&gt;
&lt;p&gt;I have coded an example app with proper timeout handling and parallel processing at &lt;a href=&quot;https://github.com/minhajuddin/parallel_elixir_workers&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/minhajuddin/parallel_elixir_workers&lt;/a&gt;
Check it out.&lt;/p&gt;
&lt;h3 id=&quot;Addendum&quot;&gt;&lt;a href=&quot;#Addendum&quot; class=&quot;headerlink&quot; title=&quot;Addendum&quot;&gt;&lt;/a&gt;Addendum&lt;/h3&gt;&lt;p&gt;I posted this on &lt;a href=&quot;https://elixirforum.com/t/elixir-task-timeout-pitfall/2192/11&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;the elixirforum&lt;/a&gt; and got some feedback about it.&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;tasks = Enum.map &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;..&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt; id -&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  Task.async(HardWorker, &lt;span class=&quot;symbol&quot;&gt;:work&lt;/span&gt;, [id])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# at this point all tasks are running in parallel&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Enum.map(tasks, &lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt; task -&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  Task.await(task, &lt;span class=&quot;variable&quot;&gt;@total_timeout&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Let us take another look at the relevant code. Now, let us say that this is spawning
processes P1 to P10 in that order. Let’s say tasks T1 to T10 are created for these processes.
Now all these tasks are running concurrently.&lt;/p&gt;
&lt;p&gt;Now, in the second &lt;code&gt;Enum.map&lt;/code&gt;, in the first iteration the task is set to T1,
so T1 has to finish before 1 second otherwise this code will timeout. However,
while T1 is running T2..T10 are also running. So, when this code runs for T2 and
waits for 1 second, T2 had been running for 2s. So, effectively T1 would be given
a time of 1 second, T2 a time of 2 seconds and T3 a time of 3 seconds and so on.&lt;/p&gt;
&lt;p&gt;This may be what you want. However, if you want all the tasks to finish executing within 1 second.
You shouldn’t use &lt;code&gt;Task.await&lt;/code&gt;. You can use &lt;code&gt;Task.yield_many&lt;/code&gt; which takes a list of tasks
and allows you to specify a timeout after which it returns with the results of whatever
processes finished. The &lt;a href=&quot;http://elixir-lang.org/docs/stable/elixir/Task.html#yield_many/2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation for Task.yield_many&lt;/a&gt; has a very good
example on how to use it.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://elixirforum.com/t/elixir-task-timeout-pitfall/2192/7?u=minhajuddin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@benwilson512 has a good example on this&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;..suppose you wrote the following code:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;task = Task.async(&lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt; -&amp;gt; Process.sleep(&lt;span class=&quot;symbol&quot;&gt;:infinity&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Process.sleep(&lt;span class=&quot;number&quot;&gt;5_000&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Task.await(task, &lt;span class=&quot;number&quot;&gt;5_000&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;How long before it times out? 10 seconds of course. But this is obvious and expected.
This is exactly what you’re doing by making the Task.await calls consecutive.
It’s just that instead of sleeping in the main process you’re waiting on a different task.
Task.await is blocking, this is expected.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;If you taken a look at Elixir, you may have come across something like the below code&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="Process" scheme="http://minhajuddin.com/tags/process/"/>
    
      <category term="Timeout" scheme="http://minhajuddin.com/tags/timeout/"/>
    
      <category term="Task" scheme="http://minhajuddin.com/tags/task/"/>
    
  </entry>
  
  <entry>
    <title>How to control pianobar using global hotkeys using Tmux</title>
    <link href="http://minhajuddin.com/2016/10/28/how-to-control-pianobar-using-global-hotkeys-using-tmux/"/>
    <id>http://minhajuddin.com/2016/10/28/how-to-control-pianobar-using-global-hotkeys-using-tmux/</id>
    <published>2016-10-28T11:22:24.000Z</published>
    <updated>2017-02-13T08:53:21.000Z</updated>
    
    <content type="html">&lt;p&gt;I love pianobar. However, until yesterday I hated pausing and moving to the next video
using pianobar. I had a small terminal dedicated for pianobar and every time I had to
change the song or pause, I used to select the window and then hit the right shortcut.
I love hotkeys, the allow you to control your stuff without opening windows. I also happen
to use tmux a lot. And it hit me yesterday, I could have easily bound hotkeys to send the
right key sequences to pianobar running a tmux session. Here is how I did it.&lt;/p&gt;
&lt;p&gt;I use xmonad, so I wired up &lt;code&gt;Windows + Shift + p&lt;/code&gt; to &lt;code&gt;tmux send-keys -t scratch:1.0 p &amp;amp;&amp;gt; /tmp/null.log&lt;/code&gt;
So, now whenever I hit the right hotkey it types the letter ‘p’ in the tmux session &lt;code&gt;scratch&lt;/code&gt; window 1 and pane 0, where I have pianobar running.&lt;/p&gt;
&lt;p&gt;I use xmonad, but you should be able to put these in a wrapper script and wire them up with any window manager or with unity.&lt;/p&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- relevant configuration&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;, ((modMask .|. shiftMask, xK_p    ), spawn &lt;span class=&quot;string&quot;&gt;&quot;tmux send-keys -t scratch:1.0 p &amp;amp;&amp;gt; /tmp/null.log&quot;&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;-- %! Pause pianobar&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;, ((modMask .|. shiftMask, xK_v    ), spawn &lt;span class=&quot;string&quot;&gt;&quot;tmux send-keys -t scratch:1.0 n &amp;amp;&amp;gt; /tmp/null.log&quot;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;-- %! next pianobar&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;, ((modMask, xK_c     ), spawn &lt;span class=&quot;string&quot;&gt;&quot;mpc toggle&quot;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;-- %! Pause mpd&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;, ((modMask, xK_z     ), spawn &lt;span class=&quot;string&quot;&gt;&quot;mpc prev&quot;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;-- %! previous in mpd&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;, ((modMask, xK_v     ), spawn &lt;span class=&quot;string&quot;&gt;&quot;mpc next&quot;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;-- %! next in mpd&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;I love pianobar. However, until yesterday I hated pausing and moving to the next video
using pianobar. I had a small terminal dedicated f
    
    </summary>
    
    
      <category term="Pianobar" scheme="http://minhajuddin.com/tags/pianobar/"/>
    
      <category term="Tmux" scheme="http://minhajuddin.com/tags/tmux/"/>
    
      <category term="Hotkeys" scheme="http://minhajuddin.com/tags/hotkeys/"/>
    
  </entry>
  
  <entry>
    <title>How to use pianobar with a socks5 proxy to play pandora</title>
    <link href="http://minhajuddin.com/2016/10/27/how-to-use-pianobar-with-a-socks5-proxy-to-play-pandora/"/>
    <id>http://minhajuddin.com/2016/10/27/how-to-use-pianobar-with-a-socks5-proxy-to-play-pandora/</id>
    <published>2016-10-27T15:57:00.000Z</published>
    <updated>2017-02-13T08:53:21.000Z</updated>
    
    <content type="html">&lt;p&gt;I love pandora, However, I live in India where pandora is doesn’t stream.
I got around this by proxying over socks5. Here is how you can do it.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;First you need access to a socks 5 proxy, If you have an ssh server running in the US or any country where pandora streams, you can spin up a proxy connection by running the following command
&lt;code&gt;ssh -D 1337 -f -C -q -N username@yourserver.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Once you have this running you’ll need to change your pianobar config to make it use this proxy&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# ~/.config/pianobar/config&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;password = yoursecretpasswordinplaintext&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;user = youremail&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;proxy = socks5://localhost:1337/&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once you have this setup, you can just run the &lt;code&gt;pianobar&lt;/code&gt; command and it will start playing your favorite music.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;I love pandora, However, I live in India where pandora is doesn’t stream.
I got around this by proxying over socks5. Here is how you can 
    
    </summary>
    
    
      <category term="Pianobar" scheme="http://minhajuddin.com/tags/pianobar/"/>
    
      <category term="Pandora" scheme="http://minhajuddin.com/tags/pandora/"/>
    
      <category term="socks5" scheme="http://minhajuddin.com/tags/socks5/"/>
    
      <category term="Proxy" scheme="http://minhajuddin.com/tags/proxy/"/>
    
  </entry>
  
  <entry>
    <title>A simple ticker to receive tick events for every interval in Elixir</title>
    <link href="http://minhajuddin.com/2016/10/27/a-simple-ticker-to-receive-tick-events-for-every-interval-in-elixir/"/>
    <id>http://minhajuddin.com/2016/10/27/a-simple-ticker-to-receive-tick-events-for-every-interval-in-elixir/</id>
    <published>2016-10-27T02:26:07.000Z</published>
    <updated>2017-02-13T08:53:21.000Z</updated>
    
    <content type="html">&lt;p&gt;Go has very utilitarian ticker methods, for instance check: &lt;a href=&quot;https://gobyexample.com/tickers&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://gobyexample.com/tickers&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Tickers use a similar mechanism to timers: a&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// channel that is sent values. Here we&#39;ll use the&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// `range` builtin on the channel to iterate over&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// the values as they arrive every 500ms.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ticker := time.NewTicker(time.Millisecond * &lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; t := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; ticker.C &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;Tick at&quot;&lt;/span&gt;, t)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Tickers can be stopped like timers. Once a ticker&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// is stopped it won&#39;t receive any more values on its&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// channel. We&#39;ll stop ours after 1600ms.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    time.Sleep(time.Millisecond * &lt;span class=&quot;number&quot;&gt;1600&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ticker.Stop()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;Ticker stopped&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;These are very nice for running code at every interval. If you want something like this in Elixir,
it can be implemented in a few lines of code.&lt;/p&gt;
&lt;p&gt;This code allows you to create a &lt;code&gt;Ticker&lt;/code&gt; process by calling &lt;code&gt;Ticker.start&lt;/code&gt; with a &lt;code&gt;recipient_pid&lt;/code&gt;
which is the process which receives the &lt;code&gt;:tick&lt;/code&gt; events, a &lt;code&gt;tick_interval&lt;/code&gt; to specify how often
a &lt;code&gt;:tick&lt;/code&gt; event should be sent to the recipient_pid and finally a &lt;code&gt;duration&lt;/code&gt; whose default is
&lt;code&gt;:infinity&lt;/code&gt; which means it will just keep ticking till the end of time. Once you set this up,
the recipient will keep getting &lt;code&gt;:tick&lt;/code&gt; events for every &lt;code&gt;tick_interval&lt;/code&gt;.
Go ahead and read the code, it is pretty self explanatory.&lt;/p&gt;
&lt;p&gt;There is also erlang’s &lt;code&gt;:timer.apply_interval(time, module, function, arguments)&lt;/code&gt; which will run
some code for every interval of &lt;code&gt;time&lt;/code&gt;. However, the code below doesn’t create overlapping executions.&lt;/p&gt;
&lt;p&gt;I have also created a gist in the interest of collaboration here: &lt;a href=&quot;https://gist.github.com/minhajuddin/064226d73d5648aa73364218e862a497&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://gist.github.com/minhajuddin/064226d73d5648aa73364218e862a497&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Ticker&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  require Logger&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# public api&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;start&lt;/span&gt;&lt;/span&gt;(recipient_pid, tick_interval, duration \\ &lt;span class=&quot;symbol&quot;&gt;:infinity&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# Process.monitor(pid) # what to do if the process is dead before this?&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# start a process whose only responsibility is to wait for the interval&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ticker_pid = spawn(__MODULE_&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:loop&lt;/span&gt;, [recipient_pid, tick_interval, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# and send a tick to the recipient pid and loop back&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    send(ticker_pid, &lt;span class=&quot;symbol&quot;&gt;:send_tick&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    schedule_terminate(ticker_pid, duration)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# returns the pid of the ticker, which can be used to stop the ticker&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ticker_pid&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;stop&lt;/span&gt;&lt;/span&gt;(ticker_pid) &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    send(ticker_pid, &lt;span class=&quot;symbol&quot;&gt;:terminate&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# internal api&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;loop&lt;/span&gt;&lt;/span&gt;(recipient_pid, tick_interval, current_index) &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    receive &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;symbol&quot;&gt;:send_tick&lt;/span&gt; -&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        send(recipient_pid, &amp;#123;&lt;span class=&quot;symbol&quot;&gt;:tick&lt;/span&gt;, current_index&amp;#125;) &lt;span class=&quot;comment&quot;&gt;# send the tick event&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Process.send_after(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:send_tick&lt;/span&gt;, tick_interval) &lt;span class=&quot;comment&quot;&gt;# schedule a self event after interval&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        loop(recipient_pid, tick_interval, current_index + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;symbol&quot;&gt;:terminate&lt;/span&gt; -&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;symbol&quot;&gt;:ok&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# terminating&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# &lt;span class=&quot;doctag&quot;&gt;NOTE:&lt;/span&gt; we could also optionally wire it up to send a last_tick event when it terminates&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        send(recipient_pid, &amp;#123;&lt;span class=&quot;symbol&quot;&gt;:last_tick&lt;/span&gt;, current_index&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      oops -&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Logger.error(&lt;span class=&quot;string&quot;&gt;&quot;received unexepcted message &lt;span class=&quot;subst&quot;&gt;#&amp;#123;inspect oops&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        loop(recipient_pid, tick_interval, current_index + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;schedule_terminate&lt;/span&gt;&lt;/span&gt;(_pid, &lt;span class=&quot;symbol&quot;&gt;:infinity&lt;/span&gt;), &lt;span class=&quot;symbol&quot;&gt;do:&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;:ok&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;schedule_terminate&lt;/span&gt;&lt;/span&gt;(ticker_pid, duration), &lt;span class=&quot;symbol&quot;&gt;do:&lt;/span&gt; Process.send_after(ticker_pid, &lt;span class=&quot;symbol&quot;&gt;:terminate&lt;/span&gt;, duration)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Listener&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;start&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Ticker.start &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# will send approximately 4 messages&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    receive &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#123;&lt;span class=&quot;symbol&quot;&gt;:tick&lt;/span&gt;, _index&amp;#125; = message -&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        IO.inspect(message)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        run&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#123;&lt;span class=&quot;symbol&quot;&gt;:last_tick&lt;/span&gt;, _index&amp;#125; = message -&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        IO.inspect(message)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;symbol&quot;&gt;:ok&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Listener.start&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Listener.run&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# will output&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# =&amp;gt; &amp;#123;:tick, 0&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# =&amp;gt; &amp;#123;:tick, 1&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# =&amp;gt; &amp;#123;:tick, 2&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# =&amp;gt; &amp;#123;:tick, 3&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# =&amp;gt; &amp;#123;:last_tick, 4&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Go has very utilitarian ticker methods, for instance check: &lt;a href=&quot;https://gobyexample.com/tickers&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http
    
    </summary>
    
    
      <category term="Go" scheme="http://minhajuddin.com/tags/go/"/>
    
      <category term="Ticker" scheme="http://minhajuddin.com/tags/ticker/"/>
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
  </entry>
  
  <entry>
    <title>Lets encrypt auto renewal for ubuntu and nginx</title>
    <link href="http://minhajuddin.com/2016/10/13/lets-encrypt-auto-renewal-for-ubuntu-and-nginx/"/>
    <id>http://minhajuddin.com/2016/10/13/lets-encrypt-auto-renewal-for-ubuntu-and-nginx/</id>
    <published>2016-10-13T10:27:16.000Z</published>
    <updated>2017-02-13T08:53:21.000Z</updated>
    
    <content type="html">&lt;p&gt;Create a file called &lt;code&gt;/etc/nginx/le_redirect_include.conf&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# intercept the challenges&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;location &amp;apos;/.well-known/acme-challenge&amp;apos; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  default_type &amp;quot;text/plain&amp;quot;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  root /usr/share/nginx/letsencrypt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# redirect all traffic to the https version&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;location / &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  return 301 https://$host$request_uri;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;In your redirect block include this file&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;server &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  server_name www.liveformhq.com liveformhq.com;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  include /etc/nginx/le_redirect_include.conf;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;To generate the LE keys run the following&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo mkdir -p /usr/share/nginx/letsencrypt&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# generate the certificate&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo letsencrypt certonly --webroot=/usr/share/nginx/letsencrypt --domain cosmicvent.com --domain www.cosmicvent.com&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# reload nginx&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo &lt;span class=&quot;built_in&quot;&gt;kill&lt;/span&gt; &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; HUP $(cat /var/run/nginx.pid)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Put the following in your crontab
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ sudo crontab &lt;span class=&quot;_&quot;&gt;-e&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@weekly /usr/bin/letsencrypt &amp;amp;&amp;gt; /tmp/letsencrypt.log; sudo &lt;span class=&quot;built_in&quot;&gt;kill&lt;/span&gt; &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; HUP $(cat /var/run/nginx.pid)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Create a file called &lt;code&gt;/etc/nginx/le_redirect_include.conf&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;
    
    </summary>
    
    
      <category term="Lets encrypt" scheme="http://minhajuddin.com/tags/lets-encrypt/"/>
    
      <category term="Auto renew" scheme="http://minhajuddin.com/tags/auto-renew/"/>
    
      <category term="Nginx" scheme="http://minhajuddin.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm to compute downtime of a service/server</title>
    <link href="http://minhajuddin.com/2016/07/05/algorithm-to-compute-downtime-of-a-service-server/"/>
    <id>http://minhajuddin.com/2016/07/05/algorithm-to-compute-downtime-of-a-service-server/</id>
    <published>2016-07-05T08:43:42.000Z</published>
    <updated>2017-02-13T08:53:21.000Z</updated>
    
    <content type="html">&lt;p&gt;I am working on an open source side project called &lt;a href=&quot;http://webmonitorhq.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;webmonitorhq.com&lt;/a&gt;
It notifies you when your service goes down. It also stores the events when a service goes down
and comes back up. And I wanted to show the uptime of a service for a duration of 24 hours, 7 days etc,.&lt;/p&gt;
&lt;p&gt;This is the algorithm I came up with, Please point out any improvements that can be made to it. I’d love to hear them.&lt;/p&gt;
&lt;p&gt;The prerequisite to this algorithm is that you have data for the UP events and the DOWN events&lt;/p&gt;
&lt;p&gt;I have a table called events with an event string and an event_at datetime&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;events&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;event (UP or DOWN)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;event_at (datetime of event occurence)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;Algorithm-to-calculate-downtime&quot;&gt;&lt;a href=&quot;#Algorithm-to-calculate-downtime&quot; class=&quot;headerlink&quot; title=&quot;Algorithm to calculate downtime&quot;&gt;&lt;/a&gt;Algorithm to calculate downtime&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Decide the duration (24 hours, 7 days, 30 days)&lt;/li&gt;
&lt;li&gt;Select all the events in that duration&lt;/li&gt;
&lt;li&gt;Add an UP event at the end of the duration&lt;/li&gt;
&lt;li&gt;Add a inverse of the first event at the beginning of this duration
e.g. if the first event is an UP add a DOWN and vice versa&lt;/li&gt;
&lt;li&gt;Start from the first UP event after a DOWN event and subtract the DOWN event_at from the UP event_at, do this till you reach the end. This gives you the downtime&lt;/li&gt;
&lt;li&gt;Subtract duration from downtime to get uptime duration&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;24 hour duration. Current Time is 00hours&lt;/li&gt;
&lt;li&gt;UPat1 DOWNat5 UPat10&lt;/li&gt;
&lt;li&gt;UPat1 DOWNat5 UPat10 UPat24&lt;/li&gt;
&lt;li&gt;DOWNat0 UPat1 DOWNat5 UPat10 UPat24&lt;/li&gt;
&lt;li&gt;UPat1 - DOWNat0 + UPat10 - DOWNat5
Downtime = 1 + 5&lt;/li&gt;
&lt;li&gt;24 - 6 =&amp;gt; 18&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;I am working on an open source side project called &lt;a href=&quot;http://webmonitorhq.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;webmonitorhq.com&lt;/a&gt;
    
    </summary>
    
    
      <category term="algorithm" scheme="http://minhajuddin.com/tags/algorithm/"/>
    
      <category term="downtime calculation" scheme="http://minhajuddin.com/tags/downtime-calculation/"/>
    
  </entry>
  
  <entry>
    <title>Elixir IO.inspect to debug pipelines</title>
    <link href="http://minhajuddin.com/2016/05/20/elixir-io-inspect-to-debug-pipelines/"/>
    <id>http://minhajuddin.com/2016/05/20/elixir-io-inspect-to-debug-pipelines/</id>
    <published>2016-05-20T15:16:42.000Z</published>
    <updated>2017-02-13T08:53:21.000Z</updated>
    
    <content type="html">&lt;p&gt;While writing multiple pipelines, you may want to debug the intermediate values.
Just insert &lt;code&gt;|&amp;gt; IO.inspect&lt;/code&gt; between your pipelines.&lt;/p&gt;
&lt;p&gt;e.g. in the expression below:&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;:crypto&lt;/span&gt;.strong_rand_bytes(&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  |&amp;gt; &lt;span class=&quot;symbol&quot;&gt;:base64&lt;/span&gt;.encode_to_string&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  |&amp;gt; &lt;span class=&quot;symbol&quot;&gt;:base64&lt;/span&gt;.decode&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  |&amp;gt; &lt;span class=&quot;symbol&quot;&gt;:base64&lt;/span&gt;.encode&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;If we want to check intermediate values we just need to add a &lt;code&gt;|&amp;gt; IO.inspect&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;:crypto&lt;/span&gt;.strong_rand_bytes(&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  |&amp;gt; IO.inspect&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  |&amp;gt; &lt;span class=&quot;symbol&quot;&gt;:base64&lt;/span&gt;.encode_to_string&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  |&amp;gt; IO.inspect&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  |&amp;gt; &lt;span class=&quot;symbol&quot;&gt;:base64&lt;/span&gt;.decode&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  |&amp;gt; IO.inspect&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  |&amp;gt; &lt;span class=&quot;symbol&quot;&gt;:base64&lt;/span&gt;.encode&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  |&amp;gt; IO.inspect&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This will print all the intermediate values to the STDOUT. IO.inspect is a function which prints the input and returns it.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;While writing multiple pipelines, you may want to debug the intermediate values.
Just insert &lt;code&gt;|&amp;gt; IO.inspect&lt;/code&gt; between your p
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="Pipelines" scheme="http://minhajuddin.com/tags/pipelines/"/>
    
      <category term="Debug" scheme="http://minhajuddin.com/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>How to store temporary data and share it with your background processor</title>
    <link href="http://minhajuddin.com/2016/03/11/how-to-store-temporary-data-and-share-it-with-your-background-processor/"/>
    <id>http://minhajuddin.com/2016/03/11/how-to-store-temporary-data-and-share-it-with-your-background-processor/</id>
    <published>2016-03-11T18:40:36.000Z</published>
    <updated>2017-02-13T08:53:21.000Z</updated>
    
    <content type="html">&lt;p&gt;In my current project, I had to store some temporary data for a user and let a few background
processors have access to it. I wrote something small with a dependency on Redis which does the job.&lt;/p&gt;
&lt;p&gt;It allows me to use &lt;code&gt;current_user.tmp[:token_id] = &amp;quot;somedata here&amp;quot;&lt;/code&gt; and then access it
in the background processor using &lt;code&gt;user.tmp[:token_id]&lt;/code&gt; which I think is pretty neat.&lt;/p&gt;
&lt;p&gt;Moreover, since my use case needed this for temporary storage, I set it to auto expire in 1 day.
If yours is different you could change that piece of code.&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# /app/models/user_tmp.rb&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UserTmp&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;:user&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(user)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    @user = user&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  EXPIRATION_SECONDS = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;.day&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  SERIALIZER = Marshal&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(key)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    serialized_val = Redis.current.get(namespaced_key(key))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    SERIALIZER.load(serialized_val) &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; serialized_val&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;[]=&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(key, val)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    serialized_val = SERIALIZER.dump(val)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Redis.current.setex(namespaced_key(key), EXPIRATION_SECONDS, serialized_val)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  private&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;namespaced_key&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(key)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;u:&lt;span class=&quot;subst&quot;&gt;#&amp;#123;user.id&amp;#125;&lt;/span&gt;:&lt;span class=&quot;subst&quot;&gt;#&amp;#123;key&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;And here is the user class&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# /app/models/user.rb&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;User&lt;/span&gt; &amp;lt; ActiveRecord::Base&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;#...&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;tmp&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    @tmp &lt;span class=&quot;params&quot;&gt;||&lt;/span&gt;= UserTmp.new(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;#...&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Hope you find it useful :)&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;In my current project, I had to store some temporary data for a user and let a few background
processors have access to it. I wrote somet
    
    </summary>
    
    
      <category term="Ruby" scheme="http://minhajuddin.com/tags/ruby/"/>
    
      <category term="Redis" scheme="http://minhajuddin.com/tags/redis/"/>
    
  </entry>
  
</feed>

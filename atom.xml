<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Simplicity</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://minhajuddin.com/"/>
  <updated>2019-11-30T05:36:43.314Z</updated>
  <id>http://minhajuddin.com/</id>
  
  <author>
    <name>Khaja Minhajuddin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How to copy output of a function to your clipboard in Elixir or Ruby</title>
    <link href="http://minhajuddin.com/2019/06/03/how-to-copy-output-of-a-function-to-your-clipboard-in-elixir-or-ruby/"/>
    <id>http://minhajuddin.com/2019/06/03/how-to-copy-output-of-a-function-to-your-clipboard-in-elixir-or-ruby/</id>
    <published>2019-06-03T17:51:36.000Z</published>
    <updated>2019-11-30T05:36:43.314Z</updated>
    
    <content type="html"><![CDATA[<p>Having the ability to drive your development using just a keyboard is veryproductive. However, when you are using a terminal and have to copy the outputof a command to use it somewhere else, it breaks your flow, you need to moveyour hands away from your keyboard, use the mouse to select the text and thencopy it.</p><p>When I want to copy passwords to be used elsewhere from my browser, I usuallyopen the developer tools console, inspect element and click on the passwordinput box and then run the following code:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy($<span class="number">0.</span>value)</span><br></pre></td></tr></table></figure><p>Chrome sets <code>$0</code> to refer to the currently selected DOM element and <code>$0.value</code>will give us the value of the password field and sending it to the <code>copy</code>function copies this text to the OS clipboard.</p><p>I have a similar script set up for my terminal, when I want to copy the outputof a command like <code>rake secret</code> I run the following command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rake secret | xc <span class="comment"># copies a new secret to the clipboard.</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Hello"</span> | xc <span class="comment"># copies the string `Hello` to the clipboard.</span></span><br></pre></td></tr></table></figure><p><code>xc</code> is aliased to the following in my bashrc:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> xc=<span class="string">'tee /dev/tty | xclip -selection clipboard'</span></span><br></pre></td></tr></table></figure><p>This command prints the output to the terminal (using <code>tee /dev/tty</code>) and copiesit to the OS clipboard using the <code>xclip</code> package.</p><p>I wanted the same ability in my ruby and elixir REPLs. It was prettystraightforward to do in ruby. Here is the annotated code:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">puts <span class="string">'loading ~/.pryrc ...'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'open3'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># copy takes an argument and converts it into a string and copies it to the OS</span></span><br><span class="line"><span class="comment"># clipboard using the `xclip` command line package.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">copy</span><span class="params">(text)</span></span></span><br><span class="line">  <span class="comment"># start running the `xclip` command to copy the stdin to the OS primary</span></span><br><span class="line">  <span class="comment"># clipboard. Also pass the stdin and stdout, stderr to the block</span></span><br><span class="line">  Open3.popen3(<span class="string">'xclip'</span>, <span class="string">'-selection'</span>, <span class="string">'clipboard'</span>) <span class="keyword">do</span> <span class="params">|stdin, _stdout, _stderr, _wait_thr|</span></span><br><span class="line">    <span class="comment"># convert the input argument to a string and write it to the stdin of the</span></span><br><span class="line">    <span class="comment"># spawned `xclip` process and the close the input stream</span></span><br><span class="line">    stdin.puts text.to_s</span><br><span class="line">    stdin.close</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># print out an informational message to signal that the argument has been</span></span><br><span class="line">  <span class="comment"># copied to the clipboard.</span></span><br><span class="line">  puts <span class="string">"copied to clipboard: <span class="subst">#&#123;text.to_s[<span class="number">0</span>..<span class="number">10</span>]&#125;</span>..."</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># e.g. running `copy SecureRandom.uuid` will print the following</span></span><br><span class="line"><span class="comment"># pry(main)&gt; copy SecureRandom.uuid</span></span><br><span class="line"><span class="comment"># copied to clipboard: 14438d5c-62...</span></span><br><span class="line"><span class="comment"># and copies: `14438d5c-62b9-40a1-a324-5d2bd2205990` to the OS clipboard</span></span><br></pre></td></tr></table></figure><p>Below is a similar script for Elixir:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">IO.puts(<span class="string">"loading ~/.iex.exs"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># open a module called `H` as we can't have functions outside modules</span></span><br><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">H</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="comment"># copy function takes the input and converts it into a string before copying</span></span><br><span class="line">  <span class="comment"># it to the OS clipboard.</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">copy</span></span>(text) <span class="keyword">do</span></span><br><span class="line">    <span class="comment"># convert input argument to a string</span></span><br><span class="line">    text = to_s(text)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># spawn a new xclip process configured to copy the stdin to the OS's primary</span></span><br><span class="line">    <span class="comment"># clipboard</span></span><br><span class="line">    port = Port.open(&#123;<span class="symbol">:spawn</span>, <span class="string">"xclip -selection clipboard"</span>&#125;, [])</span><br><span class="line">    <span class="comment"># send the input text as stdin to the xclip process</span></span><br><span class="line">    Port.command(port, text)</span><br><span class="line">    <span class="comment"># close the port</span></span><br><span class="line">    Port.close(port)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print out an informational message to signal that the text has been copied</span></span><br><span class="line">    <span class="comment"># to the OS's clipboard"</span></span><br><span class="line">    IO.puts(<span class="string">"copied to clipboard: <span class="subst">#&#123;String.slice(text, <span class="number">0</span>, <span class="number">10</span>)&#125;</span>..."</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># to_s converts an elixir term to a string if it implements the `String.Chars`</span></span><br><span class="line">  <span class="comment"># protocol otherwise it uses `inspect` to convert it into a string.</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">to_s</span></span>(text) <span class="keyword">do</span></span><br><span class="line">    to_string(text)</span><br><span class="line">  rescue</span><br><span class="line">    <span class="number">_</span> -&gt; inspect(text)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iex(<span class="number">2</span>)&gt; <span class="symbol">:crypto</span>.strong_rand_bytes(<span class="number">16</span>) |&gt; Base.encode16 |&gt; H.copy</span><br><span class="line"><span class="comment"># copied to clipboard: 347B175C6F...</span></span><br><span class="line"><span class="comment"># it has also copied `347B175C6F397B2808DE7168444ED428` to the OS's clipboard</span></span><br></pre></td></tr></table></figure><p>All these utilities (except for the browser’s <code>copy</code> function) depend on the<code>xclip</code> utility which can be installed on ubuntu using <code>sudo apt-get installxclip</code>. You can emulate the same behaviour on a Mac using the <code>pbcopy</code> utility,you might have to tweak things a little bit, but it should be pretty straightforward.</p><p>You can do the same in your favorite programming language too, just find theright way to spawn an <code>xclip</code> process and send the text you want to be copied toits’ stdin. Hope this makes your development a little more pleasant :)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Having the ability to drive your development using just a keyboard is very
productive. However, when you are using a terminal and have to
      
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="Ruby" scheme="http://minhajuddin.com/tags/ruby/"/>
    
      <category term="Pry" scheme="http://minhajuddin.com/tags/pry/"/>
    
      <category term="IRB" scheme="http://minhajuddin.com/tags/irb/"/>
    
      <category term="IEx" scheme="http://minhajuddin.com/tags/iex/"/>
    
      <category term="copy" scheme="http://minhajuddin.com/tags/copy/"/>
    
      <category term="pbcopy" scheme="http://minhajuddin.com/tags/pbcopy/"/>
    
      <category term="xclip" scheme="http://minhajuddin.com/tags/xclip/"/>
    
  </entry>
  
  <entry>
    <title>How to store username or email with case insensitive search using Ecto - Part 2</title>
    <link href="http://minhajuddin.com/2019/04/14/how-to-store-username-or-email-with-case-insensitive-search-using-ecto-part2/"/>
    <id>http://minhajuddin.com/2019/04/14/how-to-store-username-or-email-with-case-insensitive-search-using-ecto-part2/</id>
    <published>2019-04-14T10:59:55.000Z</published>
    <updated>2019-11-30T05:36:43.318Z</updated>
    
    <content type="html"><![CDATA[<p>In a previous blog post I was trying to <a href="/2019/04/14/how-to-store-username-or-email-with-case-insensitive-search-using-ecto/">store username/email in a caseinsensitive way inpostgres</a>.A few folks commented that the <code>citext</code> postgres extension actually did this ina very easy and straightforward way. So, I went back to my code and ripped outthe unnecessary complexity and here is what I ended up with:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">SF</span></span>.Repo.Migrations.EnableCitextExtension <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">use</span> Ecto.Migration</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">change</span></span> <span class="keyword">do</span></span><br><span class="line">    execute <span class="string">"CREATE EXTENSION citext"</span>, <span class="string">"DROP EXTENSION citext"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"> SF.Repo.Migrations.CreateUsers <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">use</span> Ecto.Migration</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">change</span></span> <span class="keyword">do</span></span><br><span class="line">    create table(<span class="symbol">:users</span>, <span class="symbol">primary_key:</span> <span class="keyword">false</span>) <span class="keyword">do</span></span><br><span class="line">      add <span class="symbol">:id</span>, <span class="symbol">:binary_id</span>, <span class="symbol">primary_key:</span> <span class="keyword">true</span></span><br><span class="line">      add <span class="symbol">:email</span>, <span class="symbol">:citext</span>, <span class="symbol">null:</span> <span class="keyword">false</span></span><br><span class="line">      add <span class="symbol">:magic_token</span>, <span class="symbol">:uuid</span></span><br><span class="line">      add <span class="symbol">:magic_token_created_at</span>, <span class="symbol">:naive_datetime</span></span><br><span class="line">      add <span class="symbol">:confirmation_token</span>, <span class="symbol">:uuid</span></span><br><span class="line">      add <span class="symbol">:confirmed_at</span>, <span class="symbol">:naive_datetime</span></span><br><span class="line"></span><br><span class="line">      timestamps()</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    create index(<span class="symbol">:users</span>, [<span class="symbol">:email</span>], <span class="symbol">unique:</span> <span class="keyword">true</span>)</span><br><span class="line">    create index(<span class="symbol">:users</span>, [<span class="symbol">:magic_token</span>], <span class="symbol">unique:</span> <span class="keyword">true</span>)</span><br><span class="line">    create index(<span class="symbol">:users</span>, [<span class="symbol">:confirmation_token</span>], <span class="symbol">unique:</span> <span class="keyword">true</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">SF</span></span>.User <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">use</span> Ecto.Schema</span><br><span class="line">  import Ecto.Changeset</span><br><span class="line"></span><br><span class="line">  <span class="variable">@primary_key</span> &#123;<span class="symbol">:id</span>, <span class="symbol">:binary_id</span>, <span class="symbol">autogenerate:</span> <span class="keyword">true</span>&#125;</span><br><span class="line">  <span class="variable">@foreign_key_type</span> <span class="symbol">:binary_id</span></span><br><span class="line">  schema <span class="string">"users"</span> <span class="keyword">do</span></span><br><span class="line">    field <span class="symbol">:email</span>, <span class="symbol">:string</span></span><br><span class="line">    field <span class="symbol">:magic_token</span>, Ecto.Base64UUID</span><br><span class="line">    field <span class="symbol">:confirmation_token</span>, Ecto.Base64UUID</span><br><span class="line">    field <span class="symbol">:confirmed_at</span>, <span class="symbol">:naive_datetime</span></span><br><span class="line"></span><br><span class="line">    timestamps()</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="variable">@doc</span> <span class="keyword">false</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">changeset</span></span>(user, attrs) <span class="keyword">do</span></span><br><span class="line">    user</span><br><span class="line">    |&gt; cast(attrs, [<span class="symbol">:email</span>, <span class="symbol">:confirmation_token</span>])</span><br><span class="line">    |&gt; validate_required([<span class="symbol">:email</span>])</span><br><span class="line">    |&gt; unique_constraint(<span class="symbol">:email</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">SF</span></span>.UserService <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">find_by_email</span></span>(email) <span class="keyword">do</span></span><br><span class="line">    Repo.one(from u <span class="keyword">in</span> User, <span class="symbol">where:</span> u.email == ^email)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>So, the way <a href="https://www.postgresql.org/docs/11/citext.html" target="_blank" rel="noopener">citext</a> works issimilar to our previous approach. If you want to get into all the gory detailsabout how citext is implemented you can check out the code on GitHub at:<a href="https://github.com/postgres/postgres/blob/6dd86c269d5b9a176f6c9f67ea61cc17fef9d860/contrib/citext/citext.c" target="_blank" rel="noopener">https://github.com/postgres/postgres/blob/6dd86c269d5b9a176f6c9f67ea61cc17fef9d860/contrib/citext/citext.c</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In a previous blog post I was trying to &lt;a href=&quot;/2019/04/14/how-to-store-username-or-email-with-case-insensitive-search-using-ecto/&quot;&gt;sto
      
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="Ecto" scheme="http://minhajuddin.com/tags/ecto/"/>
    
      <category term="Postgresql" scheme="http://minhajuddin.com/tags/postgresql/"/>
    
      <category term="Username" scheme="http://minhajuddin.com/tags/username/"/>
    
      <category term="Email" scheme="http://minhajuddin.com/tags/email/"/>
    
      <category term="Index" scheme="http://minhajuddin.com/tags/index/"/>
    
  </entry>
  
  <entry>
    <title>How to store username or email with case insensitive search using Ecto</title>
    <link href="http://minhajuddin.com/2019/04/14/how-to-store-username-or-email-with-case-insensitive-search-using-ecto/"/>
    <id>http://minhajuddin.com/2019/04/14/how-to-store-username-or-email-with-case-insensitive-search-using-ecto/</id>
    <published>2019-04-14T10:59:55.000Z</published>
    <updated>2019-11-30T05:36:43.318Z</updated>
    
    <content type="html"><![CDATA[<p>I am building a small personal project which stores users in a <code>users</code> table andevery user has a unique email. So, my first model looked something like below:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">SF</span></span>.Repo.Migrations.CreateUsers <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">use</span> Ecto.Migration</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">change</span></span> <span class="keyword">do</span></span><br><span class="line">    create table(<span class="symbol">:users</span>, <span class="symbol">primary_key:</span> <span class="keyword">false</span>) <span class="keyword">do</span></span><br><span class="line">      add <span class="symbol">:id</span>, <span class="symbol">:binary_id</span>, <span class="symbol">primary_key:</span> <span class="keyword">true</span></span><br><span class="line">      add <span class="symbol">:email</span>, <span class="symbol">:string</span>, <span class="symbol">null:</span> <span class="keyword">false</span></span><br><span class="line">      add <span class="symbol">:magic_token</span>, <span class="symbol">:uuid</span></span><br><span class="line">      add <span class="symbol">:confirmation_token</span>, <span class="symbol">:uuid</span></span><br><span class="line">      add <span class="symbol">:confirmed_at</span>, <span class="symbol">:naive_datetime</span></span><br><span class="line"></span><br><span class="line">      timestamps()</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    create index(<span class="symbol">:users</span>, [<span class="symbol">:email</span>], <span class="symbol">unique:</span> <span class="keyword">true</span>)</span><br><span class="line">    create index(<span class="symbol">:users</span>, [<span class="symbol">:magic_token</span>], <span class="symbol">unique:</span> <span class="keyword">true</span>)</span><br><span class="line">    create index(<span class="symbol">:users</span>, [<span class="symbol">:confirmation_token</span>], <span class="symbol">unique:</span> <span class="keyword">true</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">SF</span></span>.User <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">use</span> Ecto.Schema</span><br><span class="line">  import Ecto.Changeset</span><br><span class="line"></span><br><span class="line">  <span class="variable">@primary_key</span> &#123;<span class="symbol">:id</span>, <span class="symbol">:binary_id</span>, <span class="symbol">autogenerate:</span> <span class="keyword">true</span>&#125;</span><br><span class="line">  <span class="variable">@foreign_key_type</span> <span class="symbol">:binary_id</span></span><br><span class="line">  schema <span class="string">"users"</span> <span class="keyword">do</span></span><br><span class="line">    field <span class="symbol">:email</span>, <span class="symbol">:string</span></span><br><span class="line">    field <span class="symbol">:magic_token</span>, Ecto.Base64UUID</span><br><span class="line">    field <span class="symbol">:confirmation_token</span>, Ecto.Base64UUID</span><br><span class="line">    field <span class="symbol">:confirmed_at</span>, <span class="symbol">:naive_datetime</span></span><br><span class="line"></span><br><span class="line">    timestamps()</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="variable">@doc</span> <span class="keyword">false</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">changeset</span></span>(user, attrs) <span class="keyword">do</span></span><br><span class="line">    user</span><br><span class="line">    |&gt; cast(attrs, [<span class="symbol">:email</span>, <span class="symbol">:confirmation_token</span>])</span><br><span class="line">    |&gt; validate_required([<span class="symbol">:email</span>])</span><br><span class="line">    |&gt; unique_constraint(<span class="symbol">:email</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>Like all good developers I had a unique index on the email field to make thesearches faster. So, when I do a <code>Repo.get_by(User, email: &quot;danny@m.com&quot;)</code>,postgres doesn’t have to scan the whole table to find my user. However, userssometimes enter email in mixed case, so some people might enter the above emailas <a href="mailto:`DANNY@m.com" target="_blank" rel="noopener">`DANNY@m.com</a>`, and since postgres makes a distinction between upper cased andlower cased strings, we would end up returning a 404 Not found error to theuser. To work around this I would usually lower case the email whenever itentered the system, in Rails you would do something like below:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateUsers</span> &lt; ActiveRecord::Migration[5.2]</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">change</span></span></span><br><span class="line">    create_table <span class="symbol">:users</span>, <span class="symbol">id:</span> <span class="symbol">:uuid</span> <span class="keyword">do</span> <span class="params">|t|</span></span><br><span class="line">      <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    add_index <span class="symbol">:users</span>, %i[email], <span class="symbol">unique:</span> <span class="literal">true</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ActiveRecord::Base</span></span><br><span class="line">  <span class="comment"># downcase email before saving</span></span><br><span class="line">  before_save <span class="symbol">:normalize_email</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">normalize_email</span></span></span><br><span class="line">    <span class="keyword">self</span>.email = email&amp;.downcase</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># always downcase before you find a record</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">find_by_email</span></span></span><br><span class="line">    find_by(<span class="symbol">email:</span> email.downcase)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>One downside of this approach is the need to ensure that all the emails in thedatabase are stored as lower case. If you mess up on your data entry code, youmight end up with a table containing the same email with different cases.</p><p>A better way to do this in Ecto would be to create an index on a lower casedemail like so:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create index(<span class="symbol">:users</span>, [<span class="string">"(lower(email))"</span>], <span class="symbol">unique:</span> <span class="keyword">true</span>)</span><br></pre></td></tr></table></figure><p>This way you would never end up with a table with duplicate emails, and when youwant to find a user with an email you can do something like below:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">SF</span></span>.UserService <span class="keyword">do</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">find_by_email</span></span>(email) <span class="keyword">do</span></span><br><span class="line">    email = String.downcase(email)</span><br><span class="line"></span><br><span class="line">    user =</span><br><span class="line">      Repo.one(</span><br><span class="line">        from u <span class="keyword">in</span> User,</span><br><span class="line">          <span class="symbol">where:</span> fragment(<span class="string">"lower(?)"</span>, u.email) == ^email</span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line">    if user != <span class="keyword">nil</span>, <span class="symbol">do:</span> &#123;<span class="symbol">:ok</span>, user&#125;, <span class="symbol">else:</span> &#123;<span class="symbol">:error</span>, <span class="symbol">:not_found</span>&#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>This would also make sure that your index is actually used. You can take the SQLlogged in your IEx and run a quick <code>EXPLAIN</code> to make sure that your index isproperly being used:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># EXPLAIN ANALYZE SELECT u0."id", u0."email", u0."magic_token", u0."confirmation_token", u0."confirmed_at", u0."inserted_at", u0."updated_at" FROM "users" AS u0 WHERE (lower(u0</span><br><span class="line">."email") = 'foobar@x.com');</span><br><span class="line">┌─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐</span><br><span class="line">│                                                             QUERY PLAN                                                              │</span><br><span class="line">├─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤</span><br><span class="line">│ Index Scan using users__lower_email_index on users u0  (cost=0.14..8.16 rows=1 width=588) (actual time=0.013..0.014 rows=0 loops=1) │</span><br><span class="line">│   Index Cond: (lower((email)::text) = 'foobar@x.com'::text)                                                                         │</span><br><span class="line">│ Planning time: 0.209 ms                                                                                                             │</span><br><span class="line">│ Execution time: 0.064 ms                                                                                                            │</span><br><span class="line">└─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘</span><br><span class="line">(4 rows)</span><br><span class="line"></span><br><span class="line">Time: 1.086 ms</span><br></pre></td></tr></table></figure><p>A common rookie mistake is creating an index on the email column and then comparingin sql using the <code>lower</code> function like so:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">simpleform_dev=# EXPLAIN ANALYZE select * from users where lower(email) = 'danny';</span><br><span class="line">┌─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐</span><br><span class="line">│                                                     QUERY PLAN                                                      │</span><br><span class="line">├─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤</span><br><span class="line">│ Seq Scan on users  (cost=10000000000.00..10000000001.01 rows=1 width=580) (actual time=0.034..0.034 rows=0 loops=1) │</span><br><span class="line">│   Filter: (lower((email)::text) = 'danny'::text)                                                                     │</span><br><span class="line">│   Rows Removed by Filter: 1                                                                                         │</span><br><span class="line">│ Planning time: 0.158 ms                                                                                             │</span><br><span class="line">│ Execution time: 0.076 ms                                                                                            │</span><br><span class="line">└─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘</span><br><span class="line">(5 rows)</span><br><span class="line"></span><br><span class="line">Time: 1.060 ms</span><br><span class="line">simpleform_dev=#</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I am building a small personal project which stores users in a &lt;code&gt;users&lt;/code&gt; table and
every user has a unique email. So, my first m
      
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="Ecto" scheme="http://minhajuddin.com/tags/ecto/"/>
    
      <category term="Postgresql" scheme="http://minhajuddin.com/tags/postgresql/"/>
    
      <category term="Username" scheme="http://minhajuddin.com/tags/username/"/>
    
      <category term="Email" scheme="http://minhajuddin.com/tags/email/"/>
    
      <category term="Index" scheme="http://minhajuddin.com/tags/index/"/>
    
  </entry>
  
  <entry>
    <title>How to view documentation of callbacks in IEx for Elixir</title>
    <link href="http://minhajuddin.com/2019/03/20/how-to-view-documentation-of-callbacks-in-iex-for-elixir/"/>
    <id>http://minhajuddin.com/2019/03/20/how-to-view-documentation-of-callbacks-in-iex-for-elixir/</id>
    <published>2019-03-20T09:36:03.000Z</published>
    <updated>2019-11-30T05:36:43.318Z</updated>
    
    <content type="html"><![CDATA[<p>The other day, I was playing around with GenServers and I needed to see thedocumentation for the <code>handle_call</code> hook. I knew that this wasn’t a functiondefined on the <code>GenServer</code>, So I couldn’t just do a <code>h GenServer.callback</code>. Ithought to myself that there must be a way to get callback documentation using<code>h</code>, so I typed <code>h h</code> in IEx.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">iex(9)&gt; h h</span><br><span class="line"></span><br><span class="line">                                    def h()</span><br><span class="line"></span><br><span class="line">Prints the documentation for IEx.Helpers.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                                defmacro h(term)</span><br><span class="line"></span><br><span class="line">Prints the documentation for the given module or for the given function/arity</span><br><span class="line">pair.</span><br><span class="line"></span><br><span class="line">## Examples</span><br><span class="line"></span><br><span class="line">    iex&gt; h(Enum)</span><br><span class="line"></span><br><span class="line">It also accepts functions in the format fun/arity and module.fun/arity, for</span><br><span class="line">example:</span><br><span class="line"></span><br><span class="line">    iex&gt; h(receive/1)</span><br><span class="line">    iex&gt; h(Enum.all?/2)</span><br><span class="line">    iex&gt; h(Enum.all?)</span><br><span class="line"></span><br><span class="line">iex(10)&gt;</span><br></pre></td></tr></table></figure><p>No luck with that! Nothing that references getting callback documentation, Istill wanted to do the naive thing and just see what <code>h GenServer.callback</code>returned. And, to my surprise it ended up returning something useful:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">iex(10)&gt; h GenServer.handle_call</span><br><span class="line">No documentation for function GenServer.handle_call was found, but there is a callback with the same name.</span><br><span class="line">You can view callback documentation with the b/1 helper.</span><br><span class="line"></span><br><span class="line">iex(11)&gt;</span><br></pre></td></tr></table></figure><p>Aha! These are the little things which make me love Elixir so much :’)So, the next time you want to look up documentation about callbacks just use the<code>b</code> helper in IEx, hope that saves you some time :) It even accepts a module andshows you all the callbacks that a module defines!</p><p>P.S: The curse of knowledge is real, if I hadn’t tried the naive way, I wouldn’tknow that it was so easy to get documentation for callbacks and I would haveended up creating a GenServer, sending a message and inspecting the arguments tofigure out what they were. So, the next time you run into a problem, it might beworth your while to take a step back and ask yourself, How would an Elixirbeginner do this?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">iex(13)&gt; b GenServer.handle_call</span><br><span class="line">@callback handle_call(request :: term(), from(), state :: term()) ::</span><br><span class="line">            &#123;:reply, reply, new_state&#125;</span><br><span class="line">            | &#123;:reply, reply, new_state,</span><br><span class="line">               timeout() | :hibernate | &#123;:continue, term()&#125;&#125;</span><br><span class="line">            | &#123;:noreply, new_state&#125;</span><br><span class="line">            | &#123;:noreply, new_state,</span><br><span class="line">               timeout() | :hibernate | &#123;:continue, term()&#125;&#125;</span><br><span class="line">            | &#123;:stop, reason, reply, new_state&#125;</span><br><span class="line">            | &#123;:stop, reason, new_state&#125;</span><br><span class="line">          when reply: term(), new_state: term(), reason: term()</span><br><span class="line"></span><br><span class="line">Invoked to handle synchronous call/3 messages. call/3 will block until a reply</span><br><span class="line">is received (unless the call times out or nodes are disconnected).</span><br><span class="line"></span><br><span class="line">request is the request message sent by a call/3, from is a 2-tuple containing</span><br><span class="line">the caller&apos;s PID and a term that uniquely identifies the call, and state is the</span><br><span class="line">current state of the GenServer.</span><br><span class="line"></span><br><span class="line">Returning &#123;:reply, reply, new_state&#125; sends the response reply to the caller and</span><br><span class="line">continues the loop with new state new_state.</span><br><span class="line"></span><br><span class="line">Returning &#123;:reply, reply, new_state, timeout&#125; is similar to &#123;:reply, reply,</span><br><span class="line">new_state&#125; except handle_info(:timeout, new_state) will be called after timeout</span><br><span class="line">milliseconds if no messages are received.</span><br><span class="line"></span><br><span class="line">Returning &#123;:reply, reply, new_state, :hibernate&#125; is similar to &#123;:reply, reply,</span><br><span class="line">new_state&#125; except the process is hibernated and will continue the loop once a</span><br><span class="line">message is in its message queue. If a message is already in the message queue</span><br><span class="line">this will be immediately. Hibernating a GenServer causes garbage collection and</span><br><span class="line">leaves a continuous heap that minimises the memory used by the process.</span><br><span class="line"></span><br><span class="line">Returning &#123;:reply, reply, new_state, &#123;:continue, continue&#125;&#125; is similar to</span><br><span class="line">&#123;:reply, reply, new_state&#125; except c:handle_continue/2 will be invoked</span><br><span class="line">immediately after with the value continue as first argument.</span><br><span class="line"></span><br><span class="line">Hibernating should not be used aggressively as too much time could be spent</span><br><span class="line">garbage collecting. Normally it should only be used when a message is not</span><br><span class="line">expected soon and minimising the memory of the process is shown to be</span><br><span class="line">beneficial.</span><br><span class="line"></span><br><span class="line">Returning &#123;:noreply, new_state&#125; does not send a response to the caller and</span><br><span class="line">continues the loop with new state new_state. The response must be sent with</span><br><span class="line">reply/2.</span><br><span class="line"></span><br><span class="line">There are three main use cases for not replying using the return value:</span><br><span class="line"></span><br><span class="line">  • To reply before returning from the callback because the response is</span><br><span class="line">    known before calling a slow function.</span><br><span class="line">  • To reply after returning from the callback because the response is not</span><br><span class="line">    yet available.</span><br><span class="line">  • To reply from another process, such as a task.</span><br><span class="line"></span><br><span class="line">When replying from another process the GenServer should exit if the other</span><br><span class="line">process exits without replying as the caller will be blocking awaiting a reply.</span><br><span class="line"></span><br><span class="line">Returning &#123;:noreply, new_state, timeout | :hibernate | &#123;:continue, continue&#125;&#125;</span><br><span class="line">is similar to &#123;:noreply, new_state&#125; except a timeout, hibernation or continue</span><br><span class="line">occurs as with a :reply tuple.</span><br><span class="line"></span><br><span class="line">Returning &#123;:stop, reason, reply, new_state&#125; stops the loop and c:terminate/2 is</span><br><span class="line">called with reason reason and state new_state. Then the reply is sent as the</span><br><span class="line">response to call and the process exits with reason reason.</span><br><span class="line"></span><br><span class="line">Returning &#123;:stop, reason, new_state&#125; is similar to &#123;:stop, reason, reply,</span><br><span class="line">new_state&#125; except a reply is not sent.</span><br><span class="line"></span><br><span class="line">This callback is optional. If one is not implemented, the server will fail if a</span><br><span class="line">call is performed against it.</span><br><span class="line"></span><br><span class="line">iex(14)&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The other day, I was playing around with GenServers and I needed to see the
documentation for the &lt;code&gt;handle_call&lt;/code&gt; hook. I knew t
      
    
    </summary>
    
    
      <category term="GenServer" scheme="http://minhajuddin.com/tags/genserver/"/>
    
      <category term="TIL" scheme="http://minhajuddin.com/tags/til/"/>
    
      <category term="Documentation" scheme="http://minhajuddin.com/tags/documentation/"/>
    
      <category term="Callbacks" scheme="http://minhajuddin.com/tags/callbacks/"/>
    
  </entry>
  
  <entry>
    <title>Pearls of Elixir - Interesting patterns from popular Elixir packages</title>
    <link href="http://minhajuddin.com/2019/02/01/pearls-of-elixir-interesting-patterns-from-popular-elixir-packages/"/>
    <id>http://minhajuddin.com/2019/02/01/pearls-of-elixir-interesting-patterns-from-popular-elixir-packages/</id>
    <published>2019-02-01T09:11:16.000Z</published>
    <updated>2019-11-30T05:36:43.318Z</updated>
    
    <content type="html"><![CDATA[<p>I had a wonderful time giving a talk at the <a href="https://www.meetup.com/TorontoElixir/events/258157474/" target="_blank" rel="noopener">Elixir January Tech Meetup</a>here in Toronto. Big thanks to <a href="https://twitter.com/ghedamat" target="_blank" rel="noopener">Mattia</a> for organizing and <a href="https://twitter.com/pagerduty" target="_blank" rel="noopener">PagerDuty</a> forhosting the meetup!</p><p>I wanted to capture the talk in a blog post and here it is.</p><h2 id="1-Canada"><a href="#1-Canada" class="headerlink" title="1. Canada"></a>1. Canada</h2><p>Many of us have used cancan for authorization in our Rails applications. WhenI was searching for a similar package in Elixir, I found the awesome <a href="https://github.com/jarednorman/canada" target="_blank" rel="noopener">canada</a>package.</p><p>It’s DSL is pretty straightforward</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># In this example we have a User and a Post entity.</span></span><br><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">User</span></span> <span class="keyword">do</span></span><br><span class="line">  defstruct <span class="symbol">id:</span> <span class="keyword">nil</span>, <span class="symbol">name:</span> <span class="keyword">nil</span>, <span class="symbol">admin:</span> <span class="keyword">false</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Post</span></span> <span class="keyword">do</span></span><br><span class="line">  defstruct <span class="symbol">user_id:</span> <span class="keyword">nil</span>, <span class="symbol">content:</span> <span class="keyword">nil</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Followed by a protocol definition which allows you to define the rules on what</span></span><br><span class="line"><span class="comment"># is allowed and what is forbidden.</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">defimpl</span> <span class="title">Canada</span></span>.Can, <span class="symbol">for:</span> User <span class="keyword">do</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">can?</span></span>(%User&#123;<span class="symbol">id:</span> user_id&#125;, action, %Post&#123;<span class="symbol">user_id:</span> user_id&#125;)</span><br><span class="line">    <span class="keyword">when</span> action <span class="keyword">in</span> [<span class="symbol">:update</span>, <span class="symbol">:read</span>, <span class="symbol">:destroy</span>, <span class="symbol">:touch</span>], <span class="symbol">do:</span> <span class="keyword">true</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">can?</span></span>(%User&#123;<span class="symbol">admin:</span> admin&#125;, action, <span class="number">_</span>)</span><br><span class="line">    <span class="keyword">when</span> action <span class="keyword">in</span> [<span class="symbol">:update</span>, <span class="symbol">:read</span>, <span class="symbol">:destroy</span>, <span class="symbol">:touch</span>], <span class="symbol">do:</span> admin</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">can?</span></span>(%User&#123;&#125;, <span class="symbol">:create</span>, Post), <span class="symbol">do:</span> <span class="keyword">true</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Finally, when we want to use this we just use the following syntax which reads</span></span><br><span class="line"><span class="comment"># very nicely.</span></span><br><span class="line"></span><br><span class="line">import Canada, <span class="symbol">only:</span> [<span class="symbol">can?:</span> <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">if some_user |&gt; can? read(some_post) <span class="keyword">do</span></span><br><span class="line">  <span class="comment"># render the post</span></span><br><span class="line">else</span><br><span class="line">  <span class="comment"># sorry (raise a 403)</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>When using packages, I try to take a peek at the source code andunderstand how things work. And, I was <em>shocked</em> when I saw just 10 lines ofcode in the <code>lib</code> folder! See for yourself:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># lib/canada.ex</span></span><br><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Canada</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="function"><span class="keyword">defmacro</span> <span class="title">can?</span></span>(subject, &#123;action, <span class="number">_</span>, [argument]&#125;) <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">quote</span> <span class="keyword">do</span></span><br><span class="line">      Canada.Can.can? unquote(subject), unquote(action), unquote(argument)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># lib/canada/can.ex</span></span><br><span class="line"><span class="class"><span class="keyword">defprotocol</span> <span class="title">Canada</span></span>.Can <span class="keyword">do</span></span><br><span class="line">  <span class="variable">@doc</span> <span class="string">"Evaluates permissions"</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">can?</span></span>(subject, action, resource)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>The protocol is what allows you to define your custom rules for authorizationand the <code>Canada</code> module defines a neat little macro which allows you to test ifa <em>user</em> is authorized to perform an <em>action</em> using syntax like: <code>can? user,read(post)</code>. How cool is that!</p><h1 id="2-Readable-binary-match-specs"><a href="#2-Readable-binary-match-specs" class="headerlink" title="2. Readable binary match specs"></a>2. Readable binary match specs</h1><p>Postgrex is another one of those packages which is filled with neat Elixir code.When I was skimming through the code, I ran into a piece of code which surprisedme:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Postgrex</span></span>.BinaryUtils <span class="keyword">do</span></span><br><span class="line">  <span class="variable">@moduledoc</span> <span class="keyword">false</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">defmacro</span> <span class="title">int64</span></span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">quote</span> <span class="symbol">do:</span> signed-<span class="number">64</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">defmacro</span> <span class="title">uint16</span></span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">quote</span> <span class="symbol">do:</span> unsigned-<span class="number">16</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>I was having a difficult time understanding how <code>signed-64</code> could be validElixir code. I quickly spun up an iex console and typed in <code>signed-64</code> andunsurprisingly it threw an error. Upon further searching I found that this wasactually used in binary pattern matches all over the code:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Postgrex</span></span>.Messages <span class="keyword">do</span></span><br><span class="line">  import Postgrex.BinaryUtils</span><br><span class="line">  <span class="comment"># ....</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">parse</span></span>(&lt;&lt;type <span class="symbol">:</span>: int32, rest <span class="symbol">:</span>: binary&gt;&gt;, ?R, size) <span class="keyword">do</span></span><br><span class="line">  <span class="comment"># ....</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">parse</span></span>(&lt;&lt;pid <span class="symbol">:</span>: int32, key <span class="symbol">:</span>: int32&gt;&gt;, ?K, _size) <span class="keyword">do</span></span><br><span class="line">  <span class="comment"># ....</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>So, the macro <code>int32</code> would actually be spliced inside of a binary patternmatch. I would never have thought of doing this! And it makes the code so muchmore readable and easy to follow.</p><h1 id="3-Compiling-lookup-tables-in-Modules"><a href="#3-Compiling-lookup-tables-in-Modules" class="headerlink" title="3. Compiling lookup tables in Modules"></a>3. Compiling lookup tables in Modules</h1><p>While browsing through postgrex, I found a text file called <code>errcodes.txt</code> whichI thought was a bit strange. Here is a snippet of that file:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line"># errcodes.txt</span><br><span class="line">#      PostgreSQL error codes</span><br><span class="line">#</span><br><span class="line"># Copyright (c) 2003-2015, PostgreSQL Global Development Group</span><br><span class="line"></span><br><span class="line"># ...</span><br><span class="line"></span><br><span class="line">Section: Class 00 - Successful Completion</span><br><span class="line"></span><br><span class="line">00000    S    ERRCODE_SUCCESSFUL_COMPLETION                                  successful_completion</span><br><span class="line"></span><br><span class="line">Section: Class 01 - Warning</span><br><span class="line"></span><br><span class="line"># do not use this class for failure conditions</span><br><span class="line">01000    W    ERRCODE_WARNING                                                warning</span><br><span class="line">0100C    W    ERRCODE_WARNING_DYNAMIC_RESULT_SETS_RETURNED                   dynamic_result_sets_returned</span><br><span class="line">01008    W    ERRCODE_WARNING_IMPLICIT_ZERO_BIT_PADDING                      implicit_zero_bit_padding</span><br><span class="line">01003    W    ERRCODE_WARNING_NULL_VALUE_ELIMINATED_IN_SET_FUNCTION          null_value_eliminated_in_set_function</span><br><span class="line">01007    W    ERRCODE_WARNING_PRIVILEGE_NOT_GRANTED                          privilege_not_granted</span><br><span class="line">01006    W    ERRCODE_WARNING_PRIVILEGE_NOT_REVOKED                          privilege_not_revoked</span><br><span class="line">01004    W    ERRCODE_WARNING_STRING_DATA_RIGHT_TRUNCATION                   string_data_right_truncation</span><br><span class="line">01P01    W    ERRCODE_WARNING_DEPRECATED_FEATURE                             deprecated_feature</span><br><span class="line"></span><br><span class="line"># ...</span><br></pre></td></tr></table></figure><p>This file maps error codes to their symbols. The reason this was in the <code>lib</code>folder was because it was supposed to be used as a source for error codesmapping. Upon further reading I found that this was being used in a modulecalled <code>Postgrex.ErrorCode</code>. Here are the interesting pieces of that module:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Postgrex</span></span>.ErrorCode <span class="keyword">do</span></span><br><span class="line">  <span class="variable">@external_resource</span> errcodes_path = Path.join(__DIR_<span class="number">_</span>, <span class="string">"errcodes.txt"</span>)</span><br><span class="line"></span><br><span class="line">  errcodes = <span class="keyword">for</span> line &lt;- File.stream!(errcodes_path),</span><br><span class="line">             <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># errcode duplication removal</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># defining a `code_to_name` function for every single error code which maps</span></span><br><span class="line">  <span class="comment"># the code to a name.</span></span><br><span class="line">  <span class="keyword">for</span> &#123;code, errcodes&#125; &lt;- Enum.group_by(errcodes, &amp;elem(&amp;<span class="number">1</span>, <span class="number">0</span>)) <span class="keyword">do</span></span><br><span class="line">    [&#123;^code, name&#125;] = errcodes</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">code_to_name</span></span>(unquote(code)), <span class="symbol">do:</span> unquote(name)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">code_to_name</span></span>(<span class="number">_</span>), <span class="symbol">do:</span> <span class="keyword">nil</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>This code file uses our errorcodes text file to define around 400 functions whichembed the actual code to name mapping. And whenever you wanted to do the actual lookup you could just use<code>Postgrex.ErrorCode.code_to_name(error_code)</code></p><img src="/2019/02/01/pearls-of-elixir-interesting-patterns-from-popular-elixir-packages/blow-my-mind.gif"><h1 id="4-Validating-UUIDs"><a href="#4-Validating-UUIDs" class="headerlink" title="4. Validating UUIDs"></a>4. Validating UUIDs</h1><p>Did you know that you don’t need the <code>uuid</code> package to generate UUIDs? UUIDgeneration is available in Ecto as part of the <code>Ecto.UUID</code> module. And it evenhas a function which allows you to validate a UUID. Most of us would quicklyreach for a regex pattern to validate a UUID, However, the Ecto library uses aninteresting approach:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Ecto</span></span>.UUID <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">  <span class="variable">@doc</span> <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">  Casts to UUID.</span></span><br><span class="line"><span class="string">  "</span><span class="string">""</span></span><br><span class="line">  <span class="variable">@spec</span> cast(t | raw | any) <span class="symbol">:</span>: &#123;<span class="symbol">:ok</span>, t&#125; | <span class="symbol">:error</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">cast</span></span>(&lt;&lt; a1, a2, a3, a4, a5, a6, a7, a8, ?-,</span><br><span class="line">              b1, b2, b3, b4, ?-,</span><br><span class="line">              c1, c2, c3, c4, ?-,</span><br><span class="line">              d1, d2, d3, d4, ?-,</span><br><span class="line">              e1, e2, e3, e4, e5, e6, e7, e8, e9, e1<span class="number">0</span>, e11, e12 &gt;&gt;) <span class="keyword">do</span></span><br><span class="line">    &lt;&lt; c(a1), c(a2), c(a3), c(a4),</span><br><span class="line">       c(a5), c(a6), c(a7), c(a8), ?-,</span><br><span class="line">       c(b1), c(b2), c(b3), c(b4), ?-,</span><br><span class="line">       c(c1), c(c2), c(c3), c(c4), ?-,</span><br><span class="line">       c(d1), c(d2), c(d3), c(d4), ?-,</span><br><span class="line">       c(e1), c(e2), c(e3), c(e4),</span><br><span class="line">       c(e5), c(e6), c(e7), c(e8),</span><br><span class="line">       c(e9), c(e1<span class="number">0</span>), c(e11), c(e12) &gt;&gt;</span><br><span class="line">  catch</span><br><span class="line">    <span class="symbol">:error</span> -&gt; <span class="symbol">:error</span></span><br><span class="line">  else</span><br><span class="line">    casted -&gt; &#123;<span class="symbol">:ok</span>, casted&#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">cast</span></span>(&lt;&lt; <span class="symbol">_:</span><span class="symbol">:</span><span class="number">128</span> &gt;&gt; = binary), <span class="symbol">do:</span> encode(binary)</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">cast</span></span>(<span class="number">_</span>), <span class="symbol">do:</span> <span class="symbol">:error</span></span><br><span class="line"></span><br><span class="line">  <span class="variable">@compile</span> &#123;<span class="symbol">:inline</span>, <span class="symbol">c:</span> <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(?<span class="number">0</span>), <span class="symbol">do:</span> ?<span class="number">0</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(?<span class="number">1</span>), <span class="symbol">do:</span> ?<span class="number">1</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(?<span class="number">2</span>), <span class="symbol">do:</span> ?<span class="number">2</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(?<span class="number">3</span>), <span class="symbol">do:</span> ?<span class="number">3</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(?<span class="number">4</span>), <span class="symbol">do:</span> ?<span class="number">4</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(?<span class="number">5</span>), <span class="symbol">do:</span> ?<span class="number">5</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(?<span class="number">6</span>), <span class="symbol">do:</span> ?<span class="number">6</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(?<span class="number">7</span>), <span class="symbol">do:</span> ?<span class="number">7</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(?<span class="number">8</span>), <span class="symbol">do:</span> ?<span class="number">8</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(?<span class="number">9</span>), <span class="symbol">do:</span> ?<span class="number">9</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(?A), <span class="symbol">do:</span> ?a</span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(?B), <span class="symbol">do:</span> ?b</span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(?C), <span class="symbol">do:</span> ?c</span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(?D), <span class="symbol">do:</span> ?d</span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(?E), <span class="symbol">do:</span> ?e</span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(?F), <span class="symbol">do:</span> ?f</span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(?a), <span class="symbol">do:</span> ?a</span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(?b), <span class="symbol">do:</span> ?b</span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(?c), <span class="symbol">do:</span> ?c</span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(?d), <span class="symbol">do:</span> ?d</span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(?e), <span class="symbol">do:</span> ?e</span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(?f), <span class="symbol">do:</span> ?f</span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(<span class="number">_</span>),  <span class="symbol">do:</span> throw(<span class="symbol">:error</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>This code is pretty self explanatory and is a <em>literal</em> translation of how youwould validate a UUID using a pen and paper.</p><h1 id="5-Honorable-Mentions"><a href="#5-Honorable-Mentions" class="headerlink" title="5. Honorable Mentions"></a>5. Honorable Mentions</h1><h3 id="Static-struct-assertions-checks-in-functions"><a href="#Static-struct-assertions-checks-in-functions" class="headerlink" title="Static struct assertions/checks in functions"></a>Static struct assertions/checks in functions</h3><p>With Elixir you can assert that the argument your function receives is of aspecific type by using a pattern like below:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">User</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">authorized?</span></span>(%User&#123;&#125; = user) <span class="keyword">do</span></span><br><span class="line">    <span class="comment"># ....</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>This code would blow up if the argument passed was not a <code>User</code> struct. This isa nice way of asserting the type. However, you can overdo this by using iteverywhere. A good rule of thumb is to use this pattern in your public API atthe periphery where data comes in.</p><h3 id="Tagged-with-blocks"><a href="#Tagged-with-blocks" class="headerlink" title="Tagged with blocks"></a>Tagged with blocks</h3><p>You can wrap your <code>with</code> matches in tagged tuples like below if you want tohandle errors differently for different failures.</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">with &#123;<span class="symbol">:parse</span>, &#123;<span class="symbol">:ok</span>, user_attrs&#125;&#125; &lt;- &#123;<span class="symbol">:parse</span>, Jason.parse(body)&#125;,</span><br><span class="line">     &#123;<span class="symbol">:persist</span>, &#123;<span class="symbol">:ok</span>, user&#125;&#125; &lt;- &#123;<span class="symbol">:persist</span>, Users.create(user_attrs)&#125;,</span><br><span class="line">     &#123;<span class="symbol">:welcome_email</span>, <span class="symbol">:ok</span>&#125; &lt;- &#123;<span class="symbol">:welcome_email</span>, Emailer.welcome(user)&#125; <span class="keyword">do</span></span><br><span class="line">     <span class="symbol">:ok</span></span><br><span class="line">else</span><br><span class="line">  &#123;<span class="symbol">:parse</span>, err&#125; -&gt;</span><br><span class="line">    <span class="comment"># raise an error</span></span><br><span class="line">    &#123;<span class="symbol">:error</span>, <span class="symbol">:parse_error</span>&#125;</span><br><span class="line">  &#123;<span class="symbol">:persist</span>, &#123;<span class="symbol">:error</span>, changeset&#125;&#125; -&gt;</span><br><span class="line">    <span class="comment"># return validation errors</span></span><br><span class="line">    &#123;<span class="symbol">:error</span>, changeset&#125;</span><br><span class="line">  &#123;<span class="symbol">:welcome_email</span>, err&#125; -&gt;</span><br><span class="line">    <span class="comment"># it is ok if email sending failed, we just log this</span></span><br><span class="line">    Logger.error(<span class="string">"SENDING_WELCOME_EMAIL_FAILED"</span>)</span><br><span class="line">    <span class="symbol">:ok</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Delegating-function-calls-on-your-root-API-module"><a href="#Delegating-function-calls-on-your-root-API-module" class="headerlink" title="Delegating function calls on your root API module"></a>Delegating function calls on your root API module</h3><p><code>defdelegate</code> allows you to delegate function calls to a different module usingthe same arguments.</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">API</span></span> <span class="keyword">do</span></span><br><span class="line">  defdelegate create_customer(customer_json), <span class="symbol">to:</span> API.CustomerCreator</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">API</span></span>.CustomerCreator <span class="keyword">do</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">create_customer</span></span>(customer_json) <span class="keyword">do</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Enforcing-Keys"><a href="#Enforcing-Keys" class="headerlink" title="Enforcing Keys"></a>Enforcing Keys</h3><p>While defining a struct you can also define which keys are mandatory.</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">User</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="variable">@enforce_keys</span> [<span class="symbol">:email</span>, <span class="symbol">:name</span>]</span><br><span class="line">  defstruct [<span class="symbol">:email</span>, <span class="symbol">:name</span>]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Interpolation-in-docs"><a href="#Interpolation-in-docs" class="headerlink" title="Interpolation in docs"></a>Interpolation in docs</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">HTTPClient</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="variable">@timeout</span> <span class="number">60_000</span></span><br><span class="line">  <span class="variable">@doc</span> <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">  Times out after <span class="subst">#&#123;<span class="variable">@timeout</span>&#125;</span> seconds</span></span><br><span class="line"><span class="string">  "</span><span class="string">""</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get</span></span>(url) <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Suppressing-logs-in-your-tests"><a href="#Suppressing-logs-in-your-tests" class="headerlink" title="Suppressing logs in your tests"></a>Suppressing logs in your tests</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ExUnit.start</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">HTTPTest</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">use</span> ExUnit.Case</span><br><span class="line">  require Logger</span><br><span class="line"></span><br><span class="line">  <span class="variable">@moduletag</span> <span class="symbol">:capture_log</span></span><br><span class="line"></span><br><span class="line">  test <span class="string">"suppress logs"</span> <span class="keyword">do</span></span><br><span class="line">    Logger.info <span class="string">"AAAAAAAAAAAAAAAAAAAHHHHHHHHH"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h3><ul><li><a href="https://github.com/jarednorman/canada" target="_blank" rel="noopener">Canada</a></li><li><a href="https://github.com/elixir-ecto/postgrex/blob/master/lib/postgrex/binary_utils.ex" target="_blank" rel="noopener">Postgrex.BinaryUtils</a></li><li><a href="https://github.com/elixir-ecto/postgrex/blob/master/lib/postgrex/error_code.ex" target="_blank" rel="noopener">Postgrex.ErrorCode</a></li><li><a href="https://github.com/elixir-ecto/ecto/blob/master/lib/ecto/uuid.ex" target="_blank" rel="noopener">Ecto.UUID</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I had a wonderful time giving a talk at the &lt;a href=&quot;https://www.meetup.com/TorontoElixir/events/258157474/&quot; target=&quot;_blank&quot; rel=&quot;noopene
      
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="Pearls" scheme="http://minhajuddin.com/tags/pearls/"/>
    
  </entry>
  
  <entry>
    <title>Solution to Advent of Code 2018 Day 5 in Elixir</title>
    <link href="http://minhajuddin.com/2018/12/14/solution-to-advent-of-code-2018-day-5-in-elixir/"/>
    <id>http://minhajuddin.com/2018/12/14/solution-to-advent-of-code-2018-day-5-in-elixir/</id>
    <published>2018-12-14T05:26:18.000Z</published>
    <updated>2019-11-30T05:36:43.322Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Day5</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">scan</span></span>(polymer) <span class="keyword">do</span></span><br><span class="line">    chars =</span><br><span class="line">      polymer</span><br><span class="line">      |&gt; String.to_charlist()</span><br><span class="line"></span><br><span class="line">    res =</span><br><span class="line">      chars</span><br><span class="line">      |&gt; Enum.reduce(&#123;<span class="symbol">:none</span>, []&#125;, <span class="keyword">fn</span></span><br><span class="line">        c, &#123;<span class="symbol">:none</span>, acc&#125; -&gt;</span><br><span class="line">          &#123;<span class="symbol">:prev</span>, c, acc&#125;</span><br><span class="line"></span><br><span class="line">        c, &#123;<span class="symbol">:prev</span>, prev, acc&#125; -&gt;</span><br><span class="line">          if react?(c, prev) <span class="keyword">do</span></span><br><span class="line">            &#123;<span class="symbol">:none</span>, acc&#125;</span><br><span class="line">          else</span><br><span class="line">            &#123;<span class="symbol">:prev</span>, c, [prev | acc]&#125;</span><br><span class="line">          <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line">    reduced_polymer =</span><br><span class="line">      <span class="keyword">case</span> res <span class="keyword">do</span></span><br><span class="line">        &#123;<span class="number">_</span>, acc&#125; -&gt; acc</span><br><span class="line">        &#123;<span class="symbol">:prev</span>, c, acc&#125; -&gt; [c | acc]</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      |&gt; Enum.reverse()</span><br><span class="line">      |&gt; to_string</span><br><span class="line"></span><br><span class="line">    if reduced_polymer == polymer <span class="keyword">do</span></span><br><span class="line">      polymer</span><br><span class="line">    else</span><br><span class="line">      scan(reduced_polymer)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">react?</span></span>(c1, c2), <span class="symbol">do:</span> abs(c1 - c2) == <span class="number">32</span></span><br><span class="line"></span><br><span class="line">  <span class="variable">@all_units</span> Enum.zip(?a..?z, ?A..?Z) |&gt; Enum.map(<span class="keyword">fn</span> &#123;c1, c2&#125; -&gt; ~r[<span class="comment">#&#123;[c1]&#125;|#&#123;[c2]&#125;] end)</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">smallest</span></span>(polymer) <span class="keyword">do</span></span><br><span class="line">    <span class="variable">@all_units</span></span><br><span class="line">    |&gt; Enum.map(<span class="keyword">fn</span> unit_to_be_removed -&gt;</span><br><span class="line">      polymer</span><br><span class="line">      |&gt; String.replace(unit_to_be_removed, <span class="string">""</span>)</span><br><span class="line">      |&gt; scan</span><br><span class="line">      |&gt; String.length()</span><br><span class="line">    <span class="keyword">end</span>)</span><br><span class="line">    |&gt; Enum.min()</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Day5Test</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">use</span> ExUnit.Case</span><br><span class="line"></span><br><span class="line">  import Day5</span><br><span class="line"></span><br><span class="line">  test <span class="string">"reduces 2 reacting units"</span> <span class="keyword">do</span></span><br><span class="line">    assert scan(<span class="string">"aA"</span>) == <span class="string">""</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  test <span class="string">"reduces 2 non reacting units"</span> <span class="keyword">do</span></span><br><span class="line">    assert scan(<span class="string">"aB"</span>) == <span class="string">"aB"</span></span><br><span class="line">    assert scan(<span class="string">"Ba"</span>) == <span class="string">"Ba"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  test <span class="string">"reduces 3 non reacting units"</span> <span class="keyword">do</span></span><br><span class="line">    assert scan(<span class="string">"aBc"</span>) == <span class="string">"aBc"</span></span><br><span class="line">    assert scan(<span class="string">"aBA"</span>) == <span class="string">"aBA"</span></span><br><span class="line">    assert scan(<span class="string">"BaD"</span>) == <span class="string">"BaD"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  test <span class="string">"reduces 3 reacting units"</span> <span class="keyword">do</span></span><br><span class="line">    assert scan(<span class="string">"aAB"</span>) == <span class="string">"B"</span></span><br><span class="line">    assert scan(<span class="string">"abB"</span>) == <span class="string">"a"</span></span><br><span class="line">    assert scan(<span class="string">"aBb"</span>) == <span class="string">"a"</span></span><br><span class="line">    assert scan(<span class="string">"BaA"</span>) == <span class="string">"B"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  test <span class="string">"reduces recursively"</span> <span class="keyword">do</span></span><br><span class="line">    assert scan(<span class="string">"baAB"</span>) == <span class="string">""</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  test <span class="string">"large polymer"</span> <span class="keyword">do</span></span><br><span class="line">    assert scan(<span class="string">"dabAcCaCBAcCcaDA"</span>) == <span class="string">"dabCBAcaDA"</span></span><br><span class="line">    assert scan(<span class="string">"abcdDCBA"</span>) == <span class="string">""</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  test <span class="string">"input"</span> <span class="keyword">do</span></span><br><span class="line">    assert File.read!(<span class="string">"./input.txt"</span>) |&gt; String.trim() |&gt; scan |&gt; String.length() == <span class="number">0</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  test <span class="string">"smallest"</span> <span class="keyword">do</span></span><br><span class="line">    assert smallest(<span class="string">"dabAcCaCBAcCcaDA"</span>) == <span class="number">4</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  test <span class="string">"smallest for input"</span> <span class="keyword">do</span></span><br><span class="line">    assert File.read!(<span class="string">"./input.txt"</span>) |&gt; String.trim() |&gt; smallest == <span class="number">0</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="Advent of Code" scheme="http://minhajuddin.com/tags/advent-of-code/"/>
    
  </entry>
  
  <entry>
    <title>Solution to Advent of Code 2018 Day 4 in Elixir</title>
    <link href="http://minhajuddin.com/2018/12/14/solution-to-advent-of-code-2018-day-4-in-elixir/"/>
    <id>http://minhajuddin.com/2018/12/14/solution-to-advent-of-code-2018-day-4-in-elixir/</id>
    <published>2018-12-14T05:24:48.000Z</published>
    <updated>2019-11-30T05:36:43.322Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Day4</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="class"><span class="keyword">defmodule</span> <span class="title">State</span></span> <span class="keyword">do</span></span><br><span class="line">    defstruct [<span class="symbol">:guard_id</span>, <span class="symbol">:start</span>, <span class="symbol">:sleep</span>]</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">desc_minutes</span></span>(&#123;_k, ranges&#125;) <span class="keyword">do</span></span><br><span class="line">    ranges</span><br><span class="line">    |&gt; Enum.reduce(<span class="number">0</span>, <span class="keyword">fn</span> x, sum -&gt;</span><br><span class="line">      sum + Enum.count(x)</span><br><span class="line">    <span class="keyword">end</span>)</span><br><span class="line">    |&gt; Kernel.*(-<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">find_sleep_constant</span></span>(spec) <span class="keyword">do</span></span><br><span class="line">    &#123;guard, sleep_durations&#125; =</span><br><span class="line">      spec</span><br><span class="line">      |&gt; parse</span><br><span class="line">      |&gt; Enum.sort_by(&amp;desc_minutes/<span class="number">1</span>)</span><br><span class="line">      |&gt; hd</span><br><span class="line"></span><br><span class="line">    guard * most_sleepy_minute(sleep_durations)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sleepiest_guard_minute</span></span>(spec) <span class="keyword">do</span></span><br><span class="line">    &#123;guard_id, &#123;min, _count&#125;&#125; =</span><br><span class="line">      spec</span><br><span class="line">      |&gt; parse <span class="comment"># =&gt; %&#123; guard_id =&gt; [min_start1..min_end1] &#125;</span></span><br><span class="line">      |&gt; Enum.map(<span class="keyword">fn</span> &#123;guard_id, durations&#125; -&gt;</span><br><span class="line">        &#123;min, occurences&#125; =</span><br><span class="line">          durations</span><br><span class="line">          |&gt; Enum.flat_map(&amp;Enum.to_list/<span class="number">1</span>)</span><br><span class="line">          |&gt; Enum.group_by(&amp; &amp;<span class="number">1</span>)</span><br><span class="line">          |&gt; Enum.max_by(<span class="keyword">fn</span> &#123;_min, occurences&#125; -&gt; Enum.count(occurences) <span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line">        &#123;guard_id, &#123;min, length(occurences)&#125;&#125;</span><br><span class="line">      <span class="keyword">end</span>)</span><br><span class="line">      |&gt; Enum.max_by(<span class="keyword">fn</span> &#123;_guard_id, &#123;_min, count&#125;&#125; -&gt; count <span class="keyword">end</span>)</span><br><span class="line">    &#123;guard_id, min&#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">most_sleepy_minute</span></span>(sleep_durations) <span class="keyword">do</span></span><br><span class="line">    &#123;minute, <span class="number">_</span>&#125; =</span><br><span class="line">      sleep_durations</span><br><span class="line">      |&gt; Enum.flat_map(&amp;Enum.to_list/<span class="number">1</span>)</span><br><span class="line">      |&gt; Enum.group_by(&amp; &amp;<span class="number">1</span>)</span><br><span class="line">      |&gt; Enum.sort_by(<span class="keyword">fn</span> &#123;_k, v&#125; -&gt; -<span class="number">1</span> * Enum.count(v) <span class="keyword">end</span>)</span><br><span class="line">      |&gt; hd</span><br><span class="line"></span><br><span class="line">    minute</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">parse</span></span>(spec) <span class="keyword">do</span></span><br><span class="line">    &#123;_state, logs&#125; =</span><br><span class="line">      spec</span><br><span class="line">      |&gt; String.split(<span class="string">"\n"</span>, <span class="symbol">trim:</span> <span class="keyword">true</span>)</span><br><span class="line">      |&gt; Enum.sort()</span><br><span class="line">      |&gt; Enum.map(&amp;parse_line/<span class="number">1</span>)</span><br><span class="line">      |&gt; Enum.reduce(&#123;_state = %State&#123;&#125;, _out = %&#123;&#125;&#125;, <span class="keyword">fn</span> x, &#123;state, out&#125; -&gt;</span><br><span class="line">        <span class="keyword">case</span> x <span class="keyword">do</span></span><br><span class="line">          &#123;<span class="symbol">:start</span>, guard_id, _minutes&#125; -&gt;</span><br><span class="line">            &#123;%&#123;state | <span class="symbol">guard_id:</span> guard_id&#125;, out&#125;</span><br><span class="line"></span><br><span class="line">          &#123;<span class="symbol">:sleep</span>, minutes&#125; -&gt;</span><br><span class="line">            &#123;%&#123;state | <span class="symbol">start:</span> minutes&#125;, out&#125;</span><br><span class="line"></span><br><span class="line">          &#123;<span class="symbol">:wake</span>, minutes&#125; -&gt;</span><br><span class="line">            prev_sleep = out[state.guard_id] || []</span><br><span class="line">            &#123;state, Map.put(out, state.guard_id, [state.start..(minutes - <span class="number">1</span>) | prev_sleep])&#125;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line">    logs</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">parse_line</span></span>(line) <span class="keyword">do</span></span><br><span class="line">    &lt;&lt;<span class="string">"["</span>, <span class="symbol">_year:</span><span class="symbol">:</span><span class="number">32</span>, <span class="string">"-"</span>, <span class="symbol">_month:</span><span class="symbol">:</span><span class="number">16</span>, <span class="string">"-"</span>, <span class="symbol">_day:</span><span class="symbol">:</span><span class="number">16</span>, <span class="string">" "</span>, <span class="symbol">_hour:</span><span class="symbol">:</span><span class="number">16</span>, <span class="string">":"</span>,</span><br><span class="line">      <span class="symbol">minutes_bin:</span><span class="symbol">:binary-size</span>(<span class="number">2</span>), <span class="string">"] "</span>, <span class="symbol">note:</span><span class="symbol">:binary&gt;&gt;</span> = line</span><br><span class="line"></span><br><span class="line">    parse_note(note, String.to_integer(minutes_bin))</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">parse_note</span></span>(<span class="string">"wakes up"</span>, minutes) <span class="keyword">do</span></span><br><span class="line">    &#123;<span class="symbol">:wake</span>, minutes&#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">parse_note</span></span>(<span class="string">"falls asleep"</span>, minutes) <span class="keyword">do</span></span><br><span class="line">    &#123;<span class="symbol">:sleep</span>, minutes&#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">parse_note</span></span>(begin_note, minutes) <span class="keyword">do</span></span><br><span class="line">    guard_id =</span><br><span class="line">      Regex.named_captures(~r[Guard <span class="comment">#(?&lt;guard_id&gt;\d+) begins shift], begin_note)</span></span><br><span class="line">      |&gt; Map.get(<span class="string">"guard_id"</span>)</span><br><span class="line">      |&gt; String.to_integer()</span><br><span class="line"></span><br><span class="line">    &#123;<span class="symbol">:start</span>, guard_id, minutes&#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Day4Test</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">use</span> ExUnit.Case</span><br><span class="line"></span><br><span class="line">  import Day4</span><br><span class="line"></span><br><span class="line">  test <span class="string">"parses the times when each guard sleeps"</span> <span class="keyword">do</span></span><br><span class="line">    assert parse(<span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">           [1518-11-01 00:00] Guard #10 begins shift</span></span><br><span class="line"><span class="string">           [1518-11-01 00:05] falls asleep</span></span><br><span class="line"><span class="string">           [1518-11-01 00:25] wakes up</span></span><br><span class="line"><span class="string">           [1518-11-01 00:30] falls asleep</span></span><br><span class="line"><span class="string">           [1518-11-01 00:55] wakes up</span></span><br><span class="line"><span class="string">           [1518-11-01 23:58] Guard #99 begins shift</span></span><br><span class="line"><span class="string">           [1518-11-02 00:40] falls asleep</span></span><br><span class="line"><span class="string">           [1518-11-02 00:50] wakes up</span></span><br><span class="line"><span class="string">           [1518-11-03 00:05] Guard #10 begins shift</span></span><br><span class="line"><span class="string">           [1518-11-03 00:24] falls asleep</span></span><br><span class="line"><span class="string">           [1518-11-03 00:29] wakes up</span></span><br><span class="line"><span class="string">           [1518-11-04 00:02] Guard #99 begins shift</span></span><br><span class="line"><span class="string">           [1518-11-04 00:36] falls asleep</span></span><br><span class="line"><span class="string">           [1518-11-04 00:46] wakes up</span></span><br><span class="line"><span class="string">           [1518-11-05 00:03] Guard #99 begins shift</span></span><br><span class="line"><span class="string">           [1518-11-05 00:45] falls asleep</span></span><br><span class="line"><span class="string">           [1518-11-05 00:55] wakes up</span></span><br><span class="line"><span class="string">           [1518-11-08 00:03] Guard #99334 begins shift</span></span><br><span class="line"><span class="string">           [1518-11-08 00:45] falls asleep</span></span><br><span class="line"><span class="string">           [1518-11-08 00:55] wakes up</span></span><br><span class="line"><span class="string">           "</span><span class="string">""</span>) == %&#123;</span><br><span class="line">             <span class="number">10</span> =&gt; [<span class="number">5</span>..<span class="number">24</span>, <span class="number">30</span>..<span class="number">54</span>, <span class="number">24</span>..<span class="number">28</span>] |&gt; Enum.reverse(),</span><br><span class="line">             <span class="number">99</span> =&gt; [<span class="number">40</span>..<span class="number">49</span>, <span class="number">36</span>..<span class="number">45</span>, <span class="number">45</span>..<span class="number">54</span>] |&gt; Enum.reverse(),</span><br><span class="line">             <span class="number">99334</span> =&gt; [<span class="number">45</span>..<span class="number">54</span>]</span><br><span class="line">           &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  test <span class="string">"find_sleep_constant"</span> <span class="keyword">do</span></span><br><span class="line">    assert find_sleep_constant(<span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">           [1518-11-01 00:00] Guard #10 begins shift</span></span><br><span class="line"><span class="string">           [1518-11-01 00:05] falls asleep</span></span><br><span class="line"><span class="string">           [1518-11-01 00:25] wakes up</span></span><br><span class="line"><span class="string">           [1518-11-01 00:30] falls asleep</span></span><br><span class="line"><span class="string">           [1518-11-01 00:55] wakes up</span></span><br><span class="line"><span class="string">           [1518-11-01 23:58] Guard #99 begins shift</span></span><br><span class="line"><span class="string">           [1518-11-02 00:40] falls asleep</span></span><br><span class="line"><span class="string">           [1518-11-02 00:50] wakes up</span></span><br><span class="line"><span class="string">           [1518-11-03 00:05] Guard #10 begins shift</span></span><br><span class="line"><span class="string">           [1518-11-03 00:24] falls asleep</span></span><br><span class="line"><span class="string">           [1518-11-03 00:29] wakes up</span></span><br><span class="line"><span class="string">           [1518-11-04 00:02] Guard #99 begins shift</span></span><br><span class="line"><span class="string">           [1518-11-04 00:36] falls asleep</span></span><br><span class="line"><span class="string">           [1518-11-04 00:46] wakes up</span></span><br><span class="line"><span class="string">           [1518-11-05 00:03] Guard #99 begins shift</span></span><br><span class="line"><span class="string">           [1518-11-05 00:45] falls asleep</span></span><br><span class="line"><span class="string">           [1518-11-05 00:55] wakes up</span></span><br><span class="line"><span class="string">           "</span><span class="string">""</span>) == <span class="number">240</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  test <span class="string">"parses line"</span> <span class="keyword">do</span></span><br><span class="line">    assert parse_line(<span class="string">"[1518-11-01 00:08] wakes up"</span>) == &#123;<span class="symbol">:wake</span>, <span class="number">8</span>&#125;</span><br><span class="line">    assert parse_line(<span class="string">"[1518-11-01 00:30] falls asleep"</span>) == &#123;<span class="symbol">:sleep</span>, <span class="number">30</span>&#125;</span><br><span class="line">    assert parse_line(<span class="string">"[1518-11-01 00:23] Guard #10 begins shift"</span>) == &#123;<span class="symbol">:start</span>, <span class="number">10</span>, <span class="number">23</span>&#125;</span><br><span class="line">    assert parse_line(<span class="string">"[1518-11-01 00:23] Guard #99 begins shift"</span>) == &#123;<span class="symbol">:start</span>, <span class="number">99</span>, <span class="number">23</span>&#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  test <span class="string">"file"</span> <span class="keyword">do</span></span><br><span class="line">    assert <span class="number">240</span> ==</span><br><span class="line">             find_sleep_constant(<span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">             [1518-11-01 00:00] Guard #10 begins shift</span></span><br><span class="line"><span class="string">             [1518-11-01 00:05] falls asleep</span></span><br><span class="line"><span class="string">             [1518-11-01 00:25] wakes up</span></span><br><span class="line"><span class="string">             [1518-11-01 00:30] falls asleep</span></span><br><span class="line"><span class="string">             [1518-11-01 00:55] wakes up</span></span><br><span class="line"><span class="string">             [1518-11-01 23:58] Guard #99 begins shift</span></span><br><span class="line"><span class="string">             [1518-11-02 00:40] falls asleep</span></span><br><span class="line"><span class="string">             [1518-11-02 00:50] wakes up</span></span><br><span class="line"><span class="string">             [1518-11-03 00:05] Guard #10 begins shift</span></span><br><span class="line"><span class="string">             [1518-11-03 00:24] falls asleep</span></span><br><span class="line"><span class="string">             [1518-11-03 00:29] wakes up</span></span><br><span class="line"><span class="string">             [1518-11-04 00:02] Guard #99 begins shift</span></span><br><span class="line"><span class="string">             [1518-11-04 00:36] falls asleep</span></span><br><span class="line"><span class="string">             [1518-11-04 00:46] wakes up</span></span><br><span class="line"><span class="string">             [1518-11-05 00:03] Guard #99 begins shift</span></span><br><span class="line"><span class="string">             [1518-11-05 00:45] falls asleep</span></span><br><span class="line"><span class="string">             [1518-11-05 00:55] wakes up</span></span><br><span class="line"><span class="string">             "</span><span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">    assert File.read!(<span class="string">"./input.txt"</span>)</span><br><span class="line">           |&gt; find_sleep_constant == <span class="number">30630</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  test <span class="string">"sleepiest_guard_minute"</span> <span class="keyword">do</span></span><br><span class="line">    assert &#123;<span class="number">99</span>, <span class="number">45</span>&#125; ==</span><br><span class="line">             sleepiest_guard_minute(<span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">             [1518-11-01 00:00] Guard #10 begins shift</span></span><br><span class="line"><span class="string">             [1518-11-01 00:05] falls asleep</span></span><br><span class="line"><span class="string">             [1518-11-01 00:25] wakes up</span></span><br><span class="line"><span class="string">             [1518-11-01 00:30] falls asleep</span></span><br><span class="line"><span class="string">             [1518-11-01 00:55] wakes up</span></span><br><span class="line"><span class="string">             [1518-11-01 23:58] Guard #99 begins shift</span></span><br><span class="line"><span class="string">             [1518-11-02 00:40] falls asleep</span></span><br><span class="line"><span class="string">             [1518-11-02 00:50] wakes up</span></span><br><span class="line"><span class="string">             [1518-11-03 00:05] Guard #10 begins shift</span></span><br><span class="line"><span class="string">             [1518-11-03 00:24] falls asleep</span></span><br><span class="line"><span class="string">             [1518-11-03 00:29] wakes up</span></span><br><span class="line"><span class="string">             [1518-11-04 00:02] Guard #99 begins shift</span></span><br><span class="line"><span class="string">             [1518-11-04 00:36] falls asleep</span></span><br><span class="line"><span class="string">             [1518-11-04 00:46] wakes up</span></span><br><span class="line"><span class="string">             [1518-11-05 00:03] Guard #99 begins shift</span></span><br><span class="line"><span class="string">             [1518-11-05 00:45] falls asleep</span></span><br><span class="line"><span class="string">             [1518-11-05 00:55] wakes up</span></span><br><span class="line"><span class="string">             "</span><span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">    assert &#123;guard, min&#125; =</span><br><span class="line">             File.read!(<span class="string">"./input.txt"</span>)</span><br><span class="line">             |&gt; sleepiest_guard_minute</span><br><span class="line"></span><br><span class="line">    assert guard * min == <span class="number">99</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="Advent of Code" scheme="http://minhajuddin.com/tags/advent-of-code/"/>
    
  </entry>
  
  <entry>
    <title>Easy way to add frozen_string_literal magic string to your ruby files</title>
    <link href="http://minhajuddin.com/2018/12/05/easy-way-to-add-frozen-string-literal-magic-string-to-your-ruby-files/"/>
    <id>http://minhajuddin.com/2018/12/05/easy-way-to-add-frozen-string-literal-magic-string-to-your-ruby-files/</id>
    <published>2018-12-05T15:19:29.000Z</published>
    <updated>2019-11-30T05:36:43.314Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">comm -23 \</span><br><span class="line">  &lt;(git ls-files|sort) \</span><br><span class="line">  &lt;(git grep -l <span class="string">'frozen_string_literal'</span>|sort) \</span><br><span class="line">  | grep -E <span class="string">'\.rb$'</span> \</span><br><span class="line">  | xargs -n1 sed -i <span class="string">'1s/^/# frozen_string_literal: true\n\n/'</span></span><br></pre></td></tr></table></figure><p>The code is pretty self explanatory, we get a list of all the files in our repoand then remove the ones which already have the magic string and then filter itto just the ruby files and finally adding the magic string to all the files.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l
      
    
    </summary>
    
    
      <category term="ruby" scheme="http://minhajuddin.com/tags/ruby/"/>
    
      <category term="magic strings" scheme="http://minhajuddin.com/tags/magic-strings/"/>
    
  </entry>
  
  <entry>
    <title>Solution to Advent of Code 2018 Day 3 in Elixir</title>
    <link href="http://minhajuddin.com/2018/12/04/solution-to-advent-of-code-2018-day-3-in-elixir/"/>
    <id>http://minhajuddin.com/2018/12/04/solution-to-advent-of-code-2018-day-3-in-elixir/</id>
    <published>2018-12-04T11:23:15.000Z</published>
    <updated>2019-11-30T05:36:43.322Z</updated>
    
    <content type="html"><![CDATA[<p>Solving Day 3 turned out to be a bit more challenging for me as I don’t usuallydo these kind of exercises, Nevertheless it was fun!</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Rect</span></span> <span class="keyword">do</span></span><br><span class="line">  defstruct [<span class="symbol">:id</span>, <span class="symbol">:left</span>, <span class="symbol">:top</span>, <span class="symbol">:width</span>, <span class="symbol">:height</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">alias</span> __MODULE_<span class="number">_</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">parse</span></span>(spec) <span class="keyword">do</span></span><br><span class="line">    [id, dimensions] = String.split(spec, <span class="string">"@"</span>, <span class="symbol">trim:</span> <span class="keyword">true</span>)</span><br><span class="line">    [coords, size] = String.split(dimensions, <span class="string">":"</span>, <span class="symbol">trim:</span> <span class="keyword">true</span>)</span><br><span class="line"></span><br><span class="line">    [left, top] = String.split(coords, <span class="string">","</span>, <span class="symbol">trim:</span> <span class="keyword">true</span>) |&gt; Enum.map(&amp;parse_number/<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    [width, height] = String.split(size, <span class="string">"x"</span>, <span class="symbol">trim:</span> <span class="keyword">true</span>) |&gt; Enum.map(&amp;parse_number/<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    %Rect&#123;</span><br><span class="line">      <span class="symbol">id:</span> String.trim(id),</span><br><span class="line">      <span class="symbol">left:</span> left,</span><br><span class="line">      <span class="symbol">top:</span> top,</span><br><span class="line">      <span class="symbol">width:</span> width,</span><br><span class="line">      <span class="symbol">height:</span> height</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">parse_number</span></span>(str), <span class="symbol">do:</span> str |&gt; String.trim() |&gt; String.to_integer()</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">order_horizontal</span></span>(r1, r2) <span class="keyword">do</span></span><br><span class="line">    if r1.left &lt; r2.left <span class="keyword">do</span></span><br><span class="line">      &#123;r1, r2&#125;</span><br><span class="line">    else</span><br><span class="line">      &#123;r2, r1&#125;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">order_vertical</span></span>(r1, r2) <span class="keyword">do</span></span><br><span class="line">    if r1.top &lt; r2.top <span class="keyword">do</span></span><br><span class="line">      &#123;r1, r2&#125;</span><br><span class="line">    else</span><br><span class="line">      &#123;r2, r1&#125;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">squares</span></span>(%Rect&#123;<span class="symbol">width:</span> w, <span class="symbol">height:</span> h&#125;) <span class="keyword">when</span> w &lt;= <span class="number">0</span> <span class="keyword">or</span> h &lt;= <span class="number">0</span>, <span class="symbol">do:</span> []</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">squares</span></span>(%Rect&#123;&#125; = r) <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">for</span> x &lt;- r.left..(r.left + r.width - <span class="number">1</span>), y &lt;- r.top..(r.top + r.height - <span class="number">1</span>), <span class="symbol">do:</span> &#123;x, y&#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Overlap</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">area</span></span>(spec) <span class="keyword">when</span> is_binary(spec) <span class="keyword">do</span></span><br><span class="line">    spec</span><br><span class="line">    |&gt; String.split(<span class="string">"\n"</span>, <span class="symbol">trim:</span> <span class="keyword">true</span>)</span><br><span class="line">    |&gt; Enum.map(&amp;Rect.parse/<span class="number">1</span>)</span><br><span class="line">    |&gt; area</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">area</span></span>(rects, prev_squares \\ [])</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">area</span></span>([h | tl], prev_squares) <span class="keyword">do</span></span><br><span class="line">    squares =</span><br><span class="line">      tl</span><br><span class="line">      |&gt; Enum.map(<span class="keyword">fn</span> x -&gt; overlap(h, x) |&gt; Rect.squares() <span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line">    area(tl, [squares | prev_squares])</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">area</span></span>([], squares),</span><br><span class="line">    <span class="symbol">do:</span></span><br><span class="line">      squares</span><br><span class="line">      |&gt; List.flatten()</span><br><span class="line">      |&gt; Enum.uniq()</span><br><span class="line">      |&gt; Enum.count()</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">find_non_overlap</span></span>(spec) <span class="keyword">when</span> is_binary(spec) <span class="keyword">do</span></span><br><span class="line">    rects =</span><br><span class="line">      spec</span><br><span class="line">      |&gt; String.split(<span class="string">"\n"</span>, <span class="symbol">trim:</span> <span class="keyword">true</span>)</span><br><span class="line">      |&gt; Enum.map(&amp;Rect.parse/<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    find_non_overlap(rects, rects)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">find_non_overlap</span></span>([h | tl], all_rects) <span class="keyword">do</span></span><br><span class="line">    if all_rects</span><br><span class="line">       |&gt; Enum.filter(<span class="keyword">fn</span> x -&gt; x.id != h.id <span class="keyword">end</span>)</span><br><span class="line">       |&gt; Enum.all?(<span class="keyword">fn</span> x -&gt;</span><br><span class="line">         o = overlap(h, x)</span><br><span class="line">         o.width &lt;= <span class="number">0</span> || o.height &lt;= <span class="number">0</span></span><br><span class="line">       <span class="keyword">end</span>) <span class="keyword">do</span></span><br><span class="line">      h</span><br><span class="line">    else</span><br><span class="line">      find_non_overlap(tl, all_rects)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">find_non_overlap</span></span>([], <span class="number">_</span>), <span class="symbol">do:</span> raise(<span class="string">"Not found"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">overlap</span></span>(%Rect&#123;&#125; = r1, %Rect&#123;&#125; = r2) <span class="keyword">do</span></span><br><span class="line">    &#123;l, r&#125; = Rect.order_horizontal(r1, r2)</span><br><span class="line"></span><br><span class="line">    width = min(l.left + l.width - r.left, r.width)</span><br><span class="line"></span><br><span class="line">    &#123;t, b&#125; = Rect.order_vertical(r1, r2)</span><br><span class="line"></span><br><span class="line">    height = min(t.top + t.height - b.top, b.height)</span><br><span class="line"></span><br><span class="line">    %Rect&#123;</span><br><span class="line">      <span class="symbol">left:</span> r.left,</span><br><span class="line">      <span class="symbol">top:</span> b.top,</span><br><span class="line">      <span class="symbol">width:</span> width,</span><br><span class="line">      <span class="symbol">height:</span> height</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">OverlapTest</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">use</span> ExUnit.Case</span><br><span class="line"></span><br><span class="line">  import Overlap</span><br><span class="line"></span><br><span class="line">  test <span class="string">"greets the world"</span> <span class="keyword">do</span></span><br><span class="line">    assert area(<span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">           # 1 @ 1,3: 4x4</span></span><br><span class="line"><span class="string">           # 2 @ 3,1: 4x4</span></span><br><span class="line"><span class="string">           # 3 @ 5,5: 2x2</span></span><br><span class="line"><span class="string">           "</span><span class="string">""</span>) == <span class="number">4</span></span><br><span class="line"></span><br><span class="line">    assert area(<span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">           # 1 @ 1,3: 4x4</span></span><br><span class="line"><span class="string">           # 2 @ 3,1: 4x4</span></span><br><span class="line"><span class="string">           # 3 @ 1,3: 4x4</span></span><br><span class="line"><span class="string">           "</span><span class="string">""</span>) == <span class="number">16</span></span><br><span class="line"></span><br><span class="line">    assert File.read!(<span class="string">"input.txt"</span>) |&gt; area == <span class="number">0</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  test <span class="string">"overlap between 2 rects"</span> <span class="keyword">do</span></span><br><span class="line">    assert overlap(</span><br><span class="line">             %Rect&#123;<span class="symbol">id:</span> <span class="string">"# 1"</span>, <span class="symbol">left:</span> <span class="number">1</span>, <span class="symbol">top:</span> <span class="number">3</span>, <span class="symbol">width:</span> <span class="number">4</span>, <span class="symbol">height:</span> <span class="number">8</span>&#125;,</span><br><span class="line">             %Rect&#123;<span class="symbol">id:</span> <span class="string">"# 2"</span>, <span class="symbol">left:</span> <span class="number">3</span>, <span class="symbol">top:</span> <span class="number">1</span>, <span class="symbol">width:</span> <span class="number">4</span>, <span class="symbol">height:</span> <span class="number">4</span>&#125;</span><br><span class="line">           ) == %Rect&#123;<span class="symbol">id:</span> <span class="keyword">nil</span>, <span class="symbol">left:</span> <span class="number">3</span>, <span class="symbol">top:</span> <span class="number">3</span>, <span class="symbol">width:</span> <span class="number">2</span>, <span class="symbol">height:</span> <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">    assert overlap(</span><br><span class="line">             %Rect&#123;<span class="symbol">id:</span> <span class="string">"# 1"</span>, <span class="symbol">left:</span> <span class="number">1</span>, <span class="symbol">top:</span> <span class="number">3</span>, <span class="symbol">width:</span> <span class="number">4</span>, <span class="symbol">height:</span> <span class="number">4</span>&#125;,</span><br><span class="line">             %Rect&#123;<span class="symbol">id:</span> <span class="string">"# 3"</span>, <span class="symbol">left:</span> <span class="number">5</span>, <span class="symbol">top:</span> <span class="number">5</span>, <span class="symbol">width:</span> <span class="number">2</span>, <span class="symbol">height:</span> <span class="number">2</span>&#125;</span><br><span class="line">           ) == %Rect&#123;<span class="symbol">height:</span> <span class="number">2</span>, <span class="symbol">id:</span> <span class="keyword">nil</span>, <span class="symbol">left:</span> <span class="number">5</span>, <span class="symbol">top:</span> <span class="number">5</span>, <span class="symbol">width:</span> <span class="number">0</span>&#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  test <span class="string">"find_non_overlap"</span> <span class="keyword">do</span></span><br><span class="line">    assert find_non_overlap(<span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">           # 1 @ 1,3: 4x4</span></span><br><span class="line"><span class="string">           # 2 @ 3,1: 4x4</span></span><br><span class="line"><span class="string">           # 3 @ 5,5: 2x2</span></span><br><span class="line"><span class="string">           "</span><span class="string">""</span>).id == <span class="string">"# 3"</span></span><br><span class="line"></span><br><span class="line">    assert File.read!(<span class="string">"input.txt"</span>) |&gt; find_non_overlap == <span class="number">0</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">RectTest</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">use</span> ExUnit.Case</span><br><span class="line"></span><br><span class="line">  test <span class="string">"parse"</span> <span class="keyword">do</span></span><br><span class="line">    assert Rect.parse(<span class="string">"# 1 @ 1,3: 4x3"</span>) == %Rect&#123;<span class="symbol">id:</span> <span class="string">"# 1"</span>, <span class="symbol">left:</span> <span class="number">1</span>, <span class="symbol">top:</span> <span class="number">3</span>, <span class="symbol">width:</span> <span class="number">4</span>, <span class="symbol">height:</span> <span class="number">3</span>&#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  test <span class="string">"order_horizontal"</span> <span class="keyword">do</span></span><br><span class="line">    &#123;%&#123;<span class="symbol">id:</span> <span class="string">"# 1"</span>&#125;, %&#123;<span class="symbol">id:</span> <span class="string">"# 2"</span>&#125;&#125; =</span><br><span class="line">      Rect.order_horizontal(</span><br><span class="line">        %Rect&#123;<span class="symbol">id:</span> <span class="string">"# 1"</span>, <span class="symbol">left:</span> <span class="number">1</span>, <span class="symbol">top:</span> <span class="number">3</span>, <span class="symbol">width:</span> <span class="number">4</span>, <span class="symbol">height:</span> <span class="number">3</span>&#125;,</span><br><span class="line">        %Rect&#123;<span class="symbol">id:</span> <span class="string">"# 2"</span>, <span class="symbol">left:</span> <span class="number">3</span>, <span class="symbol">top:</span> <span class="number">3</span>, <span class="symbol">width:</span> <span class="number">4</span>, <span class="symbol">height:</span> <span class="number">3</span>&#125;</span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line">    &#123;%&#123;<span class="symbol">id:</span> <span class="string">"# 4"</span>&#125;, %&#123;<span class="symbol">id:</span> <span class="string">"# 3"</span>&#125;&#125; =</span><br><span class="line">      Rect.order_horizontal(</span><br><span class="line">        %Rect&#123;<span class="symbol">id:</span> <span class="string">"# 3"</span>, <span class="symbol">left:</span> <span class="number">10</span>, <span class="symbol">top:</span> <span class="number">3</span>, <span class="symbol">width:</span> <span class="number">4</span>, <span class="symbol">height:</span> <span class="number">3</span>&#125;,</span><br><span class="line">        %Rect&#123;<span class="symbol">id:</span> <span class="string">"# 4"</span>, <span class="symbol">left:</span> <span class="number">3</span>, <span class="symbol">top:</span> <span class="number">3</span>, <span class="symbol">width:</span> <span class="number">4</span>, <span class="symbol">height:</span> <span class="number">3</span>&#125;</span><br><span class="line">      )</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  test <span class="string">"order_vertical"</span> <span class="keyword">do</span></span><br><span class="line">    &#123;%&#123;<span class="symbol">id:</span> <span class="string">"# 1"</span>&#125;, %&#123;<span class="symbol">id:</span> <span class="string">"# 2"</span>&#125;&#125; =</span><br><span class="line">      Rect.order_vertical(</span><br><span class="line">        %Rect&#123;<span class="symbol">id:</span> <span class="string">"# 1"</span>, <span class="symbol">left:</span> <span class="number">1</span>, <span class="symbol">top:</span> <span class="number">1</span>, <span class="symbol">width:</span> <span class="number">4</span>, <span class="symbol">height:</span> <span class="number">1</span>&#125;,</span><br><span class="line">        %Rect&#123;<span class="symbol">id:</span> <span class="string">"# 2"</span>, <span class="symbol">left:</span> <span class="number">3</span>, <span class="symbol">top:</span> <span class="number">3</span>, <span class="symbol">width:</span> <span class="number">4</span>, <span class="symbol">height:</span> <span class="number">3</span>&#125;</span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line">    &#123;%&#123;<span class="symbol">id:</span> <span class="string">"# 4"</span>&#125;, %&#123;<span class="symbol">id:</span> <span class="string">"# 3"</span>&#125;&#125; =</span><br><span class="line">      Rect.order_vertical(</span><br><span class="line">        %Rect&#123;<span class="symbol">id:</span> <span class="string">"# 3"</span>, <span class="symbol">left:</span> <span class="number">10</span>, <span class="symbol">top:</span> <span class="number">10</span>, <span class="symbol">width:</span> <span class="number">4</span>, <span class="symbol">height:</span> <span class="number">10</span>&#125;,</span><br><span class="line">        %Rect&#123;<span class="symbol">id:</span> <span class="string">"# 4"</span>, <span class="symbol">left:</span> <span class="number">3</span>, <span class="symbol">top:</span> <span class="number">3</span>, <span class="symbol">width:</span> <span class="number">4</span>, <span class="symbol">height:</span> <span class="number">3</span>&#125;</span><br><span class="line">      )</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  test <span class="string">"squares"</span> <span class="keyword">do</span></span><br><span class="line">    assert Rect.squares(%Rect&#123;<span class="symbol">id:</span> <span class="string">"# 1"</span>, <span class="symbol">left:</span> <span class="number">1</span>, <span class="symbol">top:</span> <span class="number">3</span>, <span class="symbol">width:</span> <span class="number">2</span>, <span class="symbol">height:</span> <span class="number">2</span>&#125;) == [</span><br><span class="line">             &#123;<span class="number">1</span>, <span class="number">3</span>&#125;,</span><br><span class="line">             &#123;<span class="number">1</span>, <span class="number">4</span>&#125;,</span><br><span class="line">             &#123;<span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">             &#123;<span class="number">2</span>, <span class="number">4</span>&#125;</span><br><span class="line">           ]</span><br><span class="line"></span><br><span class="line">    assert Rect.squares(%Rect&#123;<span class="symbol">id:</span> <span class="string">"# 1"</span>, <span class="symbol">left:</span> <span class="number">1</span>, <span class="symbol">top:</span> <span class="number">3</span>, <span class="symbol">width:</span> <span class="number">0</span>, <span class="symbol">height:</span> <span class="number">0</span>&#125;) == []</span><br><span class="line">    assert Rect.squares(%Rect&#123;<span class="symbol">id:</span> <span class="string">"# 1"</span>, <span class="symbol">left:</span> <span class="number">1</span>, <span class="symbol">top:</span> <span class="number">3</span>, <span class="symbol">width:</span> <span class="number">0</span>, <span class="symbol">height:</span> <span class="number">4</span>&#125;) == []</span><br><span class="line">    assert Rect.squares(%Rect&#123;<span class="symbol">id:</span> <span class="string">"# 1"</span>, <span class="symbol">left:</span> <span class="number">1</span>, <span class="symbol">top:</span> <span class="number">3</span>, <span class="symbol">width:</span> <span class="number">4</span>, <span class="symbol">height:</span> <span class="number">0</span>&#125;) == []</span><br><span class="line">    assert Rect.squares(%Rect&#123;<span class="symbol">id:</span> <span class="string">"# 1"</span>, <span class="symbol">left:</span> <span class="number">1</span>, <span class="symbol">top:</span> <span class="number">3</span>, <span class="symbol">width:</span> <span class="number">4</span>, <span class="symbol">height:</span> -<span class="number">4</span>&#125;) == []</span><br><span class="line">    assert Rect.squares(%Rect&#123;<span class="symbol">id:</span> <span class="string">"# 1"</span>, <span class="symbol">left:</span> <span class="number">1</span>, <span class="symbol">top:</span> <span class="number">3</span>, <span class="symbol">width:</span> -<span class="number">4</span>, <span class="symbol">height:</span> <span class="number">4</span>&#125;) == []</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Solving Day 3 turned out to be a bit more challenging for me as I don’t usually
do these kind of exercises, Nevertheless it was fun!&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="Advent of Code" scheme="http://minhajuddin.com/tags/advent-of-code/"/>
    
  </entry>
  
  <entry>
    <title>Solutions to Advent of Code 2018 Day 2 in Elixir</title>
    <link href="http://minhajuddin.com/2018/12/02/solutions-to-advent-of-code-2018-day-2-in-elixir/"/>
    <id>http://minhajuddin.com/2018/12/02/solutions-to-advent-of-code-2018-day-2-in-elixir/</id>
    <published>2018-12-02T20:07:39.000Z</published>
    <updated>2019-11-30T05:36:43.322Z</updated>
    
    <content type="html"><![CDATA[<p>Day 2’s problem was a bit tricky for Elixir. Check out the commented code to seehow I tackled it:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env elixir</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Day2</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">checksum</span></span>(ids) <span class="keyword">do</span></span><br><span class="line">    &#123;two_count, three_count&#125; =</span><br><span class="line">      ids</span><br><span class="line">      |&gt; String.split(<span class="string">"\n"</span>, <span class="symbol">trim:</span> <span class="keyword">true</span>)</span><br><span class="line">      |&gt; Enum.reduce(&#123;<span class="number">0</span>, <span class="number">0</span>&#125;, <span class="keyword">fn</span> id, &#123;two_count, three_count&#125; -&gt;</span><br><span class="line">        char_counts =</span><br><span class="line">          id</span><br><span class="line">          |&gt; String.graphemes()</span><br><span class="line">          |&gt; Enum.group_by(&amp; &amp;<span class="number">1</span>)</span><br><span class="line">          |&gt; Enum.map(<span class="keyword">fn</span> &#123;_c, vals&#125; -&gt; Enum.count(vals) <span class="keyword">end</span>)</span><br><span class="line">          |&gt; Enum.uniq()</span><br><span class="line"></span><br><span class="line">        &#123;incr_if_count(char_counts, two_count, <span class="number">2</span>), incr_if_count(char_counts, three_count, <span class="number">3</span>)&#125;</span><br><span class="line">      <span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line">    two_count * three_count</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">incr_if_count</span></span>(counts, prev_count, matcher) <span class="keyword">do</span></span><br><span class="line">    if matcher <span class="keyword">in</span> counts <span class="keyword">do</span></span><br><span class="line">      prev_count + <span class="number">1</span></span><br><span class="line">    else</span><br><span class="line">      prev_count</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">find_common_boxes</span></span>(ids) <span class="keyword">do</span></span><br><span class="line">    ids =</span><br><span class="line">      ids</span><br><span class="line">      |&gt; String.split(<span class="string">"\n"</span>, <span class="symbol">trim:</span> <span class="keyword">true</span>)</span><br><span class="line">      |&gt; Enum.map(&amp;String.graphemes/<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    &#123;lhs, rhs&#125; = find_similar(ids)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    intersection(lhs, rhs)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">intersection</span></span>(lhs, rhs) <span class="keyword">do</span></span><br><span class="line">    Enum.zip(lhs, rhs)</span><br><span class="line">    |&gt; Enum.map(<span class="keyword">fn</span> &#123;l, l&#125; -&gt; l; <span class="number">_</span> -&gt; <span class="keyword">nil</span> <span class="keyword">end</span>)</span><br><span class="line">    |&gt; Enum.filter(&amp; &amp;<span class="number">1</span>)</span><br><span class="line">    |&gt; Enum.join</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">find_similar</span></span>([lhs_id | ids]) <span class="keyword">do</span></span><br><span class="line">    matching_id =</span><br><span class="line">      Enum.find(ids, <span class="keyword">fn</span> rhs_id -&gt;</span><br><span class="line">        diff_count(lhs_id, rhs_id) == <span class="number">1</span></span><br><span class="line">      <span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line">    if matching_id <span class="keyword">do</span></span><br><span class="line">      &#123;lhs_id, matching_id&#125;</span><br><span class="line">    else</span><br><span class="line">      find_similar(ids)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">diff_count</span></span>(lhs, rhs) <span class="keyword">do</span></span><br><span class="line">    Enum.zip(lhs, rhs)</span><br><span class="line">    |&gt; Enum.map(<span class="keyword">fn</span></span><br><span class="line">      &#123;x, x&#125; -&gt; <span class="number">0</span></span><br><span class="line">      <span class="number">_</span> -&gt; <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span>)</span><br><span class="line">    |&gt; Enum.sum()</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">ExUnit.start()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Day2Test</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">use</span> ExUnit.Case</span><br><span class="line"></span><br><span class="line">  import Day2</span><br><span class="line"></span><br><span class="line">  test <span class="string">"#checksum"</span> <span class="keyword">do</span></span><br><span class="line">    assert checksum(<span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">           abcdef</span></span><br><span class="line"><span class="string">           bababc</span></span><br><span class="line"><span class="string">           abbcde</span></span><br><span class="line"><span class="string">           abcccd</span></span><br><span class="line"><span class="string">           aabcdd</span></span><br><span class="line"><span class="string">           abcdee</span></span><br><span class="line"><span class="string">           ababab</span></span><br><span class="line"><span class="string">           "</span><span class="string">""</span>) == <span class="number">12</span></span><br><span class="line"></span><br><span class="line">    assert File.read!(<span class="string">"input.txt"</span>) |&gt; checksum == <span class="number">4693</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  test <span class="string">"#find_common_boxes"</span> <span class="keyword">do</span></span><br><span class="line">    assert find_common_boxes(<span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">           abcde</span></span><br><span class="line"><span class="string">           fghij</span></span><br><span class="line"><span class="string">           klmno</span></span><br><span class="line"><span class="string">           pqrst</span></span><br><span class="line"><span class="string">           fguij</span></span><br><span class="line"><span class="string">           axcye</span></span><br><span class="line"><span class="string">           wvxyz</span></span><br><span class="line"><span class="string">           "</span><span class="string">""</span>) == <span class="string">"fgij"</span></span><br><span class="line"></span><br><span class="line">    assert File.read!(<span class="string">"input.txt"</span>) |&gt; find_common_boxes == <span class="string">"pebjqsalrdnckzfihvtxysomg"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Day 2’s problem was a bit tricky for Elixir. Check out the commented code to see
how I tackled it:&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="Advent Of Code" scheme="http://minhajuddin.com/tags/advent-of-code/"/>
    
  </entry>
  
  <entry>
    <title>Solutions to Advent of Code 2018 Day 1 in Elixir and Ruby</title>
    <link href="http://minhajuddin.com/2018/12/01/solutions-to-advent-of-code-2018-day-1-in-elixir-ruby-rust-and-bash/"/>
    <id>http://minhajuddin.com/2018/12/01/solutions-to-advent-of-code-2018-day-1-in-elixir-ruby-rust-and-bash/</id>
    <published>2018-12-01T21:56:11.000Z</published>
    <updated>2019-11-30T05:36:43.322Z</updated>
    
    <content type="html"><![CDATA[<p>Day 1 had a simple challenge, compute the sum of a few numbers and find out whena prev frequency shows up again.</p><h2 id="Part-1"><a href="#Part-1" class="headerlink" title="Part 1"></a>Part 1</h2><h3 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h3><p>The elixir version is pretty straightforward, we create a stream using thestandard input which creates an entry per line, transform it into a number andcompute the sum:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env elixir</span></span><br><span class="line"><span class="comment"># run it as follows:</span></span><br><span class="line"><span class="comment"># $ ./elixir.exs &lt; input.txt</span></span><br><span class="line"><span class="comment"># 484</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># read each line</span></span><br><span class="line">IO.stream(<span class="symbol">:stdio</span>, <span class="symbol">:line</span>)</span><br><span class="line">|&gt; Stream.map(<span class="keyword">fn</span> str -&gt;</span><br><span class="line">  &#123;n, <span class="string">""</span>&#125; = str |&gt; String.trim() |&gt; Integer.parse()</span><br><span class="line">  n</span><br><span class="line"><span class="keyword">end</span>)</span><br><span class="line">|&gt; Enum.sum()</span><br><span class="line">|&gt; IO.puts()</span><br></pre></td></tr></table></figure><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><p>The ruby version is similar to the elixir version</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line"><span class="comment"># run it as follows:</span></span><br><span class="line"><span class="comment"># $ ./ruby.rb &lt; input.txt</span></span><br><span class="line"><span class="comment"># 484</span></span><br><span class="line"></span><br><span class="line">puts ARGF.each_line</span><br><span class="line">         .map(&amp;<span class="symbol">:to_i</span>)</span><br><span class="line">         .sum</span><br></pre></td></tr></table></figure><h2 id="Part-2"><a href="#Part-2" class="headerlink" title="Part 2"></a>Part 2</h2><h3 id="Elixir-1"><a href="#Elixir-1" class="headerlink" title="Elixir"></a>Elixir</h3><p>This was a bit tricky as you may have to repeat the input multiple times to getthe answer. To do this in elixir, we use simple recursion if we aren’t able tofind a repeating frequency in the current iteration. Also, note that we areusing a <code>map</code> to store previous frequencies, I have seen folks use a list whichcause a huge impact on performance as lists don’t perform well for lookupswhereas maps really shine in these scenarios.</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">ChronalCalibration</span></span> <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">part_2</span></span>(input, start_freq \\ <span class="number">0</span>, prev_freqs \\ %&#123;<span class="number">0</span> =&gt; <span class="keyword">true</span>&#125;) <span class="keyword">do</span></span><br><span class="line">    res =</span><br><span class="line">      input</span><br><span class="line">      |&gt; String.split(<span class="string">"\n"</span>)</span><br><span class="line">      |&gt; Enum.reduce_while(&#123;start_freq, prev_freqs&#125;, <span class="keyword">fn</span> x, &#123;freq, prev_freqs&#125; -&gt;</span><br><span class="line">        &#123;i, <span class="string">""</span>&#125; = Integer.parse(x)</span><br><span class="line">        freq = i + freq</span><br><span class="line"></span><br><span class="line">        if prev_freqs[freq] <span class="keyword">do</span></span><br><span class="line">          &#123;<span class="symbol">:halt</span>, &#123;<span class="symbol">:succ</span>, freq&#125;&#125;</span><br><span class="line">        else</span><br><span class="line">          &#123;<span class="symbol">:cont</span>, &#123;freq, Map.put(prev_freqs, freq, <span class="keyword">true</span>)&#125;&#125;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> res <span class="keyword">do</span></span><br><span class="line">      &#123;<span class="symbol">:succ</span>, freq&#125; -&gt; freq</span><br><span class="line">      &#123;freq, prev_freqs&#125; -&gt; part_2(input, freq, prev_freqs)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">IO.puts File.read!(<span class="string">"input.txt"</span>) |&gt; ChronalCalibration.part_2</span><br></pre></td></tr></table></figure><h3 id="Ruby-1"><a href="#Ruby-1" class="headerlink" title="Ruby"></a>Ruby</h3><p>The Ruby implementation is similar to the Elixir implementation.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">repeating_freq</span></span></span><br><span class="line">  input = File.read(<span class="string">"input.txt"</span>)</span><br><span class="line">  prev_freqs = &#123; <span class="number">0</span> =&gt; <span class="literal">true</span> &#125;</span><br><span class="line">  freq = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  loop <span class="keyword">do</span></span><br><span class="line">    input</span><br><span class="line">      .lines</span><br><span class="line">      .each <span class="keyword">do</span> <span class="params">|curr|</span></span><br><span class="line">        freq += curr.to_i</span><br><span class="line">        <span class="keyword">return</span> freq <span class="keyword">if</span> prev_freqs[freq]</span><br><span class="line">        prev_freqs[freq] = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">puts repeating_freq()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Day 1 had a simple challenge, compute the sum of a few numbers and find out when
a prev frequency shows up again.&lt;/p&gt;
&lt;h2 id=&quot;Part-1&quot;&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="Ruby" scheme="http://minhajuddin.com/tags/ruby/"/>
    
      <category term="Advent of Code" scheme="http://minhajuddin.com/tags/advent-of-code/"/>
    
  </entry>
  
  <entry>
    <title>How to get an MD5 hash of your request using a Plug and Phoenix</title>
    <link href="http://minhajuddin.com/2018/11/22/how-to-get-an-md5-hash-of-your-request-using-a-plug-and-phoenix/"/>
    <id>http://minhajuddin.com/2018/11/22/how-to-get-an-md5-hash-of-your-request-using-a-plug-and-phoenix/</id>
    <published>2018-11-22T14:42:06.000Z</published>
    <updated>2019-11-30T05:36:43.318Z</updated>
    
    <content type="html"><![CDATA[<p>In a recent project, I had to implement idempotent API endpoints in a Phoenixapplication. And as a part of this, I had to store the MD5 hash of each requestbody along with its idempotency key and other request data. And the latest Plugmakes this easier <a href="https://github.com/elixir-plug/plug/pull/698" target="_blank" rel="noopener">thanks to this PR</a>.</p><p>So, let us take a step back and see what is required. We want to plug into therequest pipeline, read the body, compute its md5 hash and store it in a privatevariable on the connection. Before <a href="https://github.com/elixir-plug/plug/blob/v1.6/CHANGELOG.md#v151-2018-05-17" target="_blank" rel="noopener">Plug1.5.1</a>,if you wanted to read the requested body you had to duplicate your request  parsers as they directly read from the connection using <code>Plug.Conn.read_body</code>  which read the content, parsed it and discarded it. If you ended up putting  your plug before the parsers and read the body, the JSON parser would fail to  see any request data as the request would already have been read.</p><p>To work around this limitation a new option called <code>body_reader</code> was added tothe <code>Plug.Parsers</code> plug. This allows you to get in the middle of the parser andthe connection and have custom code which can read the request body, cache itand hand over the request body to the parsers which ends up in a cleanimplementation. So, let us take a look at the code that is required to add MD5hashing to our requests.</p><p>The first thing we need is a custom request body reader which can be used by ourparsers. From the example in the Plug documentation, it can be as simple as thecode below:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">BodyReader</span></span> <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">read_body</span></span>(conn, opts) <span class="keyword">do</span></span><br><span class="line">    <span class="comment"># read the body from the connection</span></span><br><span class="line">    &#123;<span class="symbol">:ok</span>, body, conn&#125; = Plug.Conn.read_body(conn, opts)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># compute our md5 hash</span></span><br><span class="line">    md5sum = <span class="symbol">:crypto</span>.hash(<span class="symbol">:md5</span>, body) |&gt; Base.encode16()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># shove the md5sum into a private key on the connection</span></span><br><span class="line">    conn = Plug.Conn.put_private(conn, <span class="symbol">:md5sum</span>, md5sum)</span><br><span class="line"></span><br><span class="line">    &#123;<span class="symbol">:ok</span>, body, conn&#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>The above module has a <code>read_body</code> function which takes a connection, readsthe request body, computes its md5 hash and shoves it into a private key on theconnection and returns the body and connection to the parsers to pass themalong.</p><p>Once we have this custom reader, we just need to configure our parsers to usethis by changing our endpoint to have the following code:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plug Plug.Parsers,</span><br><span class="line">  <span class="symbol">parsers:</span> [<span class="symbol">:urlencoded</span>, <span class="symbol">:multipart</span>, <span class="symbol">:json</span>],</span><br><span class="line">  <span class="symbol">pass:</span> [<span class="string">"*/*"</span>],</span><br><span class="line">  <span class="symbol">body_reader:</span> &#123;BodyReader, <span class="symbol">:read_body</span>, []&#125;,</span><br><span class="line">  <span class="symbol">json_decoder:</span> Phoenix.json_library()</span><br></pre></td></tr></table></figure><p>Once you set this up your actions can access the md5sum of a request using<code>conn.private[:md5sum]</code>. And that is all you need to compute the MD5 sum of yourrequests.</p><p>The same technique can be used to authenticate webhook requests from <a href="https://developer.github.com/webhooks/securing/" target="_blank" rel="noopener">GitHub</a>,<a href="https://www.dropbox.com/developers/reference/webhooks" target="_blank" rel="noopener">Dropbox</a> and other services which sign their requests with an HMAC key.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In a recent project, I had to implement idempotent API endpoints in a Phoenix
application. And as a part of this, I had to store the MD5 
      
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="Phoenix" scheme="http://minhajuddin.com/tags/phoenix/"/>
    
      <category term="Plug" scheme="http://minhajuddin.com/tags/plug/"/>
    
      <category term="MD5" scheme="http://minhajuddin.com/tags/md5/"/>
    
      <category term="HMAC" scheme="http://minhajuddin.com/tags/hmac/"/>
    
      <category term="Sign Request" scheme="http://minhajuddin.com/tags/sign-request/"/>
    
  </entry>
  
  <entry>
    <title>7 ways of doing Fizz Buzz in Elixir and other clickbaity stuff</title>
    <link href="http://minhajuddin.com/2018/07/06/7-ways-of-doing-fizz-buzz-in-elixir-and-other-clickbaity-stuff/"/>
    <id>http://minhajuddin.com/2018/07/06/7-ways-of-doing-fizz-buzz-in-elixir-and-other-clickbaity-stuff/</id>
    <published>2018-07-06T10:58:36.000Z</published>
    <updated>2019-11-30T05:36:43.314Z</updated>
    
    <content type="html"><![CDATA[<p>Every developer “worth their salt” knows how to implement FizzBuzz, It is a program which prints the following:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">defmodule FizzBuzz do</span><br><span class="line">  def run(count) do</span><br><span class="line">    Enum.map(1..20, &amp;fizzbuzz/1)</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  def fizzbuzz(n) do</span><br><span class="line">    # ...</span><br><span class="line">  end</span><br><span class="line">end</span><br><span class="line">iex&gt; FizzBuzz.run(16)</span><br><span class="line"># =&gt; 1, 2, Fizz, 4, Buzz, Fizz, 7, 8, Fizz, Buzz, 11, Fizz, 13, 14, FizzBuzz, 16</span><br></pre></td></tr></table></figure><p>Let us see a few possible ways to do this in Elixir!</p><h2 id="1-Use-if"><a href="#1-Use-if" class="headerlink" title="1. Use if"></a>1. Use if</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fb_if</span></span>(n) <span class="keyword">do</span></span><br><span class="line">  if rem(n, <span class="number">3</span>) == <span class="number">0</span> <span class="keyword">and</span> rem(n, <span class="number">5</span>) == <span class="number">0</span> <span class="keyword">do</span></span><br><span class="line">    <span class="string">"FizzBuzz"</span></span><br><span class="line">  else</span><br><span class="line">    if rem(n, <span class="number">3</span>) == <span class="number">0</span> <span class="keyword">do</span></span><br><span class="line">      <span class="string">"Fizz"</span></span><br><span class="line">    else</span><br><span class="line">      if rem(n, <span class="number">5</span>) == <span class="number">0</span> <span class="keyword">do</span></span><br><span class="line">        <span class="string">"Buzz"</span></span><br><span class="line">      else</span><br><span class="line">        n</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>That is some real ugly code, it is exacerbated by the fact that Elixir doesn’t allow early returns.</p><h2 id="2-Use-cond"><a href="#2-Use-cond" class="headerlink" title="2. Use cond"></a>2. Use cond</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fb_cond1</span></span>(n) <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">cond</span> <span class="keyword">do</span></span><br><span class="line">    rem(n, <span class="number">3</span>) == <span class="number">0</span> <span class="keyword">and</span> rem(n, <span class="number">5</span>) == <span class="number">0</span> -&gt; <span class="string">"FizzBuzz"</span></span><br><span class="line">    rem(n, <span class="number">3</span>) == <span class="number">0</span> -&gt; <span class="string">"Fizz"</span></span><br><span class="line">    rem(n, <span class="number">5</span>) == <span class="number">0</span> -&gt; <span class="string">"Buzz"</span></span><br><span class="line">    <span class="keyword">true</span> -&gt; n</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>This is a huge improvement, I really think this captures the problem the solution in a very readable way.</p><h2 id="3-Use-cond-with-better-predicates"><a href="#3-Use-cond-with-better-predicates" class="headerlink" title="3. Use cond with better predicates"></a>3. Use cond with better predicates</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">divisible_by_3?</span></span>(n), <span class="symbol">do:</span> rem(n, <span class="number">3</span>) == <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">divisible_by_5?</span></span>(n), <span class="symbol">do:</span> rem(n, <span class="number">5</span>) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fb_cond2</span></span>(n) <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">cond</span> <span class="keyword">do</span></span><br><span class="line">    divisible_by_3?(n) <span class="keyword">and</span> divisible_by_5?(n) -&gt; <span class="string">"FizzBuzz"</span></span><br><span class="line">    divisible_by_3?(n) -&gt; <span class="string">"Fizz"</span></span><br><span class="line">    divisible_by_5?(n) -&gt; <span class="string">"Buzz"</span></span><br><span class="line">    <span class="keyword">true</span> -&gt; n</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>Using separate predicates improves the readability further.</p><h2 id="4-Use-case"><a href="#4-Use-case" class="headerlink" title="4. Use case"></a>4. Use case</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fb_case</span></span>(n) <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">case</span> &#123;rem(n, <span class="number">3</span>), rem(n,<span class="number">5</span>)&#125; <span class="keyword">do</span></span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">0</span>&#125; -&gt; <span class="string">"FizzBuzz"</span></span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">_</span>&#125; -&gt; <span class="string">"Fizz"</span></span><br><span class="line">    &#123;<span class="number">_</span>, <span class="number">0</span>&#125; -&gt; <span class="string">"Buzz"</span></span><br><span class="line">    <span class="number">_</span> -&gt; n</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>This is a concise chunk of code but isn’t as readable as the one that uses cond.</p><h2 id="5-Use-pattern-matching-in-functions"><a href="#5-Use-pattern-matching-in-functions" class="headerlink" title="5. Use pattern matching in functions"></a>5. Use pattern matching in functions</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fb_fun1</span></span>(n) <span class="keyword">do</span></span><br><span class="line">  fb_fun(n, rem(n, <span class="number">3</span>), rem(n, <span class="number">5</span>))</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fb_fun</span></span>(<span class="number">_</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="symbol">do:</span> <span class="string">"FizzBuzz"</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fb_fun</span></span>(<span class="number">_</span>, <span class="number">0</span>, <span class="number">_</span>), <span class="symbol">do:</span> <span class="string">"Fizz"</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fb_fun</span></span>(<span class="number">_</span>, <span class="number">_</span>, <span class="number">0</span>), <span class="symbol">do:</span> <span class="string">"Buzz"</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fb_fun</span></span>(n, <span class="number">_</span>, <span class="number">_</span>), <span class="symbol">do:</span> n</span><br></pre></td></tr></table></figure><p>I think this is actually less readable than the one that uses case as the logic.</p><h2 id="6-Use-guard-clauses-in-functions"><a href="#6-Use-guard-clauses-in-functions" class="headerlink" title="6. Use guard clauses in functions"></a>6. Use guard clauses in functions</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def fb_fun2(n) when rem(n, 3) == 0 and rem(n, 5) == 0, do: &quot;FizzBuzz&quot;</span><br><span class="line">def fb_fun2(n) when rem(n, 3) == 0, do: &quot;Fizz&quot;</span><br><span class="line">def fb_fun2(n) when rem(n, 5) == 0, do: &quot;Buzz&quot;</span><br><span class="line">def fb_fun2(n), do: n</span><br></pre></td></tr></table></figure><p>This feels like an improvement to the previous implementation readability wise.</p><h2 id="7-Use-custom-made-guard-clauses-in-functions"><a href="#7-Use-custom-made-guard-clauses-in-functions" class="headerlink" title="7. Use custom made guard clauses in functions"></a>7. Use custom made guard clauses in functions</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">defguard is_divisible_by_3(n) <span class="keyword">when</span> rem(n, <span class="number">3</span>) == <span class="number">0</span></span><br><span class="line">defguard is_divisible_by_5(n) <span class="keyword">when</span> rem(n, <span class="number">5</span>) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fb_fun3</span></span>(n) <span class="keyword">when</span> is_divisible_by_3(n) <span class="keyword">and</span> is_divisible_by_5(n), <span class="symbol">do:</span> <span class="string">"FizzBuzz"</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fb_fun3</span></span>(n) <span class="keyword">when</span> is_divisible_by_3(n), <span class="symbol">do:</span> <span class="string">"Fizz"</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fb_fun3</span></span>(n) <span class="keyword">when</span> is_divisible_by_5(n), <span class="symbol">do:</span> <span class="string">"Buzz"</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fb_fun3</span></span>(n), <span class="symbol">do:</span> n</span><br></pre></td></tr></table></figure><p>I like this one a lot, it feels very terse and reads like a mathematical equation.</p><p>Which version do you personally find more readable? I feel like the last oneand the implementation using cond are the more readable versions.</p><p>Here is the piece of code containing all implementations:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">defmodule Fizzbuzz do</span><br><span class="line">  def fb_if(n) do</span><br><span class="line">    if rem(n, 3) == 0 and rem(n, 5) == 0 do</span><br><span class="line">      &quot;FizzBuzz&quot;</span><br><span class="line">    else</span><br><span class="line">      if rem(n, 3) == 0 do</span><br><span class="line">        &quot;Fizz&quot;</span><br><span class="line">      else</span><br><span class="line">        if rem(n, 5) == 0 do</span><br><span class="line">          &quot;Buzz&quot;</span><br><span class="line">        else</span><br><span class="line">          n</span><br><span class="line">        end</span><br><span class="line">      end</span><br><span class="line">    end</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  def fb_cond1(n) do</span><br><span class="line">    cond do</span><br><span class="line">      rem(n, 3) == 0 and rem(n, 5) == 0 -&gt; &quot;FizzBuzz&quot;</span><br><span class="line">      rem(n, 3) == 0 -&gt; &quot;Fizz&quot;</span><br><span class="line">      rem(n, 5) == 0 -&gt; &quot;Buzz&quot;</span><br><span class="line">      true -&gt; n</span><br><span class="line">    end</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  def divisible_by_3?(n), do: rem(n, 3) == 0</span><br><span class="line">  def divisible_by_5?(n), do: rem(n, 5) == 0</span><br><span class="line"></span><br><span class="line">  def fb_cond2(n) do</span><br><span class="line">    cond do</span><br><span class="line">      divisible_by_3?(n) and divisible_by_5?(n) -&gt; &quot;FizzBuzz&quot;</span><br><span class="line">      divisible_by_3?(n) -&gt; &quot;Fizz&quot;</span><br><span class="line">      divisible_by_5?(n) -&gt; &quot;Buzz&quot;</span><br><span class="line">      true -&gt; n</span><br><span class="line">    end</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  def fb_case(n) do</span><br><span class="line">    case &#123;rem(n, 3), rem(n, 5)&#125; do</span><br><span class="line">      &#123;0, 0&#125; -&gt; &quot;FizzBuzz&quot;</span><br><span class="line">      &#123;0, _&#125; -&gt; &quot;Fizz&quot;</span><br><span class="line">      &#123;_, 0&#125; -&gt; &quot;Buzz&quot;</span><br><span class="line">      _ -&gt; n</span><br><span class="line">    end</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  def fb_fun1(n) do</span><br><span class="line">    fb_fun1(n, rem(n, 3), rem(n, 5))</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  def fb_fun1(_, 0, 0), do: &quot;FizzBuzz&quot;</span><br><span class="line">  def fb_fun1(_, 0, _), do: &quot;Fizz&quot;</span><br><span class="line">  def fb_fun1(_, _, 0), do: &quot;Buzz&quot;</span><br><span class="line">  def fb_fun1(n, _, _), do: n</span><br><span class="line"></span><br><span class="line">  def fb_fun2(n) when rem(n, 3) == 0 and rem(n, 5) == 0, do: &quot;FizzBuzz&quot;</span><br><span class="line">  def fb_fun2(n) when rem(n, 3) == 0, do: &quot;Fizz&quot;</span><br><span class="line">  def fb_fun2(n) when rem(n, 5) == 0, do: &quot;Buzz&quot;</span><br><span class="line">  def fb_fun2(n), do: n</span><br><span class="line"></span><br><span class="line">  defguard is_divisible_by_3(n) when rem(n, 3) == 0</span><br><span class="line">  defguard is_divisible_by_5(n) when rem(n, 5) == 0</span><br><span class="line"></span><br><span class="line">  def fb_fun3(n) when is_divisible_by_3(n) and is_divisible_by_5(n), do: &quot;FizzBuzz&quot;</span><br><span class="line">  def fb_fun3(n) when is_divisible_by_3(n), do: &quot;Fizz&quot;</span><br><span class="line">  def fb_fun3(n) when is_divisible_by_5(n), do: &quot;Buzz&quot;</span><br><span class="line">  def fb_fun3(n), do: n</span><br><span class="line"></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ExUnit.start()</span><br><span class="line"></span><br><span class="line">defmodule FizzbuzzTest do</span><br><span class="line">  use ExUnit.Case</span><br><span class="line"></span><br><span class="line">  @run_20_out [</span><br><span class="line">    1,</span><br><span class="line">    2,</span><br><span class="line">    &quot;Fizz&quot;,</span><br><span class="line">    4,</span><br><span class="line">    &quot;Buzz&quot;,</span><br><span class="line">    &quot;Fizz&quot;,</span><br><span class="line">    7,</span><br><span class="line">    8,</span><br><span class="line">    &quot;Fizz&quot;,</span><br><span class="line">    &quot;Buzz&quot;,</span><br><span class="line">    11,</span><br><span class="line">    &quot;Fizz&quot;,</span><br><span class="line">    13,</span><br><span class="line">    14,</span><br><span class="line">    &quot;FizzBuzz&quot;,</span><br><span class="line">    16,</span><br><span class="line">    17,</span><br><span class="line">    &quot;Fizz&quot;,</span><br><span class="line">    19,</span><br><span class="line">    &quot;Buzz&quot;</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  def assert_fizzbuzz(fun) do</span><br><span class="line">    assert 1..20 |&gt; Enum.map(fn x -&gt; apply(Fizzbuzz, fun, [x]) end) == @run_20_out</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  test &quot;run&quot; do</span><br><span class="line">    assert_fizzbuzz(:fb_if)</span><br><span class="line">    assert_fizzbuzz(:fb_cond1)</span><br><span class="line">    assert_fizzbuzz(:fb_cond2)</span><br><span class="line">    assert_fizzbuzz(:fb_case)</span><br><span class="line">    assert_fizzbuzz(:fb_fun1)</span><br><span class="line">    assert_fizzbuzz(:fb_fun2)</span><br><span class="line">    assert_fizzbuzz(:fb_fun3)</span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Every developer “worth their salt” knows how to implement FizzBuzz, It is a program which prints the following:&lt;/p&gt;
&lt;figure class=&quot;highli
      
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="FizzBuzz" scheme="http://minhajuddin.com/tags/fizzbuzz/"/>
    
  </entry>
  
  <entry>
    <title>How to manage ginormous ExVCR cassettes</title>
    <link href="http://minhajuddin.com/2018/06/18/how-to-manage-ginormous-exvcr-cassettes/"/>
    <id>http://minhajuddin.com/2018/06/18/how-to-manage-ginormous-exvcr-cassettes/</id>
    <published>2018-06-18T08:39:08.000Z</published>
    <updated>2019-11-30T05:36:43.318Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/parroty/exvcr" target="_blank" rel="noopener">ExVCR</a> is an awesome elixir package whichhelps you create repeatable integration tests. It works by saving the requestsand responses you make to external services, in json files called cassettes. Thesecassettes are created the first time you run the tests. Here is an example fromone of my projects:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">X</span></span>.AuthControllerTest <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">use</span> X.ConnCase</span><br><span class="line">  <span class="keyword">use</span> ExVCR.Mock, <span class="symbol">adapter:</span> ExVCR.Adapter.Hackney</span><br><span class="line"></span><br><span class="line">  test <span class="string">"google redirect creates the user"</span>, %&#123;<span class="symbol">conn:</span> conn&#125; <span class="keyword">do</span></span><br><span class="line">    conn =</span><br><span class="line">      use_cassette <span class="string">"google_oauth_challenge"</span> <span class="keyword">do</span></span><br><span class="line">        conn</span><br><span class="line">        |&gt; get(</span><br><span class="line">          <span class="string">"/auth/google/callback?code=....................."</span></span><br><span class="line">        )</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    assert ...</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>The first time I run this test it creates a file at <code>fixture/vcr_cassettes/google_oauth_challenge.json</code>.This contains the request and response data from this test. Now, whenever you rerunthis test it just loads this request and response data and replays the response if the requestmatches the saved request. So, your tests will pass even when you don’t have network connectivity!</p><p>This is all nice as long as you have small responses. However, when you need to do thisfor responses whose size is in MBs you run into a few issues:</p><ol><li>Your tests become slower.</li><li>You don’t want to haul around MBs of fixtures in your source control (you must check in the cassettes i.e. the <code>fixture/</code> directory).</li></ol><p>I recently ran into this situation with one of my projects where I was downloadinga gzipped csv file which was ~50MB. The way I fixed it is:</p><ol><li>Let ExVCR record the cassettes with all the large data.</li><li>Download the same response from outside using curl.</li><li>Take a tiny sample of the response data</li><li>Replace the <code>response.body</code> in the cassette with my sample response data</li></ol><p>This fixes the slow tests and also reduces the size of cassettes.</p><p>Another thing to remember is if your response is binary and not a valid string, ExVCR stores it differently.Its <a href="https://github.com/parroty/exvcr/blob/master/lib/exvcr/json.ex#L22" target="_blank" rel="noopener">json serializer</a> runs binarydata through the following functions</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">response.body</span><br><span class="line">|&gt; <span class="symbol">:erlang</span>.term_to_binary()</span><br><span class="line">|&gt; Base.encode64()</span><br></pre></td></tr></table></figure><p>So, if you have gzipped (or any other binary) data, load it into IEx from step <em>2</em> above and run it throughthe same functions as above and use this data to replace the <code>response.body</code>. You can also skip <em>2</em>and use the data from your large cassette before trimming it down by running it through:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cassette = File.read!(&quot;fixture/vcr_cassettes/cassette.json&quot;) |&gt; Poison.decode! |&gt; hd</span><br><span class="line">cassette[&quot;response&quot;][&quot;body&quot;]</span><br><span class="line">|&gt; Base.decode64!</span><br><span class="line">|&gt; :erlang.binary_to_term # you&apos;ll have the raw response binary data at this point</span><br><span class="line">|&gt; :zlib.gunzip # if your response is gzipped you&apos;ll need this to extract the actual data</span><br></pre></td></tr></table></figure><p>P.SMy editor froze while trying to edit such a large cassette, so I used jq to removethe large body keys from the response using the following command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jq &apos;walk(if type == &quot;object&quot; and has(&quot;body&quot;) then del(.body) else . end)&apos; mycassette.json  &gt; cassette_without_body.json</span><br></pre></td></tr></table></figure><p>To get the above working you need jq &gt; 1.5 and the following in your <code>~/.jq</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Apply f to composite entities recursively, and to atoms</span><br><span class="line">def walk(f):</span><br><span class="line">  . as $in</span><br><span class="line">  | if type == &quot;object&quot; then</span><br><span class="line">      reduce keys_unsorted[] as $key</span><br><span class="line">        ( &#123;&#125;; . + &#123; ($key):  ($in[$key] | walk(f)) &#125; ) | f</span><br><span class="line">  elif type == &quot;array&quot; then map( walk(f) ) | f</span><br><span class="line">  else f</span><br><span class="line">  end;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/parroty/exvcr&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ExVCR&lt;/a&gt; is an awesome elixir package which
helps you create r
      
    
    </summary>
    
    
      <category term="ExVCR" scheme="http://minhajuddin.com/tags/exvcr/"/>
    
      <category term="Large" scheme="http://minhajuddin.com/tags/large/"/>
    
      <category term="Cassette" scheme="http://minhajuddin.com/tags/cassette/"/>
    
  </entry>
  
  <entry>
    <title>Your Elixir bucket for debugging</title>
    <link href="http://minhajuddin.com/2018/05/17/your-elixir-bucket-for-debugging/"/>
    <id>http://minhajuddin.com/2018/05/17/your-elixir-bucket-for-debugging/</id>
    <published>2018-05-17T12:52:02.000Z</published>
    <updated>2019-11-30T05:36:43.326Z</updated>
    
    <content type="html"><![CDATA[<p>While debugging and experimenting with apis in javascript, I usually set a variableon <code>window</code> and then play with it in the console.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// ....</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> channel = socket.channel( <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.channel = channel;</span><br></pre></td></tr></table></figure><p>Once the above code is set, I can just jump into the console and start pushingmessages to the channel and discover how it all works by poking it around.</p><p>This led me to think about how this can be done in Elixir. And, in one of myrecent projects, I was spawning a few processes and wanted to get their pidsto play around by sending messages to them. And I just thought why not use <code>ets</code>as global bucket to shove stuff into. Here is my solution:</p><p>Just create an <code>ets</code> table in your <code>.iex.exs</code></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .iex.exs</span></span><br><span class="line"><span class="comment"># A tmp bucket which you can push stuff into and analyze from iex</span></span><br><span class="line"><span class="symbol">:ets</span>.new(<span class="symbol">:tmp</span>, [<span class="symbol">:named_table</span>, <span class="symbol">:public</span>])</span><br></pre></td></tr></table></figure><p>And, wherever you want, just push things into this table:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in my app</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">websocket_info</span></span>(_msg, _conn, state) <span class="keyword">do</span></span><br><span class="line">  <span class="symbol">:ets</span>.insert(<span class="symbol">:tmp</span>, &#123;<span class="keyword">self</span>(), <span class="symbol">:ok</span>&#125;)</span><br><span class="line">  <span class="comment"># ...</span></span><br></pre></td></tr></table></figure><p>Once you have that, you can start poking and prodding your processes/variables</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># iex&gt;</span></span><br><span class="line"><span class="symbol">:ets</span>.tab2list(<span class="symbol">:tmp</span>)</span><br></pre></td></tr></table></figure><p>Hope this helps you while debugging your Elixir apps :D</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;While debugging and experimenting with apis in javascript, I usually set a variable
on &lt;code&gt;window&lt;/code&gt; and then play with it in the c
      
    
    </summary>
    
    
      <category term="ets" scheme="http://minhajuddin.com/tags/ets/"/>
    
      <category term="debug" scheme="http://minhajuddin.com/tags/debug/"/>
    
      <category term="iex" scheme="http://minhajuddin.com/tags/iex/"/>
    
  </entry>
  
  <entry>
    <title>How to implement your own :timer.sleep in Elixir</title>
    <link href="http://minhajuddin.com/2018/05/11/how-to-implement-your-own-timer-sleep-in-elixir/"/>
    <id>http://minhajuddin.com/2018/05/11/how-to-implement-your-own-timer-sleep-in-elixir/</id>
    <published>2018-05-11T16:41:17.000Z</published>
    <updated>2019-11-30T05:36:43.318Z</updated>
    
    <content type="html"><![CDATA[<p>Elixir has <code>:timer.sleep(ms)</code>, a function which allows you to pause a process’s execution for anarbitrary number of milliseconds.</p><p>We can implement the same using messages and a timeout in the following ways.</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">SleepTimeout</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sleep</span></span>(milliseconds) <span class="keyword">do</span></span><br><span class="line">    <span class="comment"># use a receive block with no matching blocks and an after block</span></span><br><span class="line">    <span class="comment"># which times out after the input number of milliseconds</span></span><br><span class="line">    receive <span class="keyword">do</span></span><br><span class="line">    after</span><br><span class="line">      milliseconds -&gt;</span><br><span class="line">        <span class="symbol">:ok</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">SleepMsg</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sleep</span></span>(milliseconds) <span class="keyword">do</span></span><br><span class="line">    <span class="comment"># create a unique ref, so that we don't stop on any random `:timeout` message.</span></span><br><span class="line">    ref = make_ref()</span><br><span class="line">    <span class="comment"># schedule a message to be sent to ourselves in the input number of milliseconds</span></span><br><span class="line">    Process.send_after(<span class="keyword">self</span>(), &#123;<span class="symbol">:timeout</span>, ref&#125;, milliseconds)</span><br><span class="line"></span><br><span class="line">    receive <span class="keyword">do</span></span><br><span class="line">      <span class="comment"># wait for our message to arrive</span></span><br><span class="line">      &#123;<span class="symbol">:timeout</span>, ^ref&#125; -&gt;</span><br><span class="line">        <span class="symbol">:ok</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">&#123;microseconds, <span class="number">_</span>&#125; = <span class="symbol">:timer</span>.tc(<span class="keyword">fn</span> -&gt; SleepTimeout.sleep(<span class="number">1000</span>) <span class="keyword">end</span>)</span><br><span class="line">IO.puts(<span class="string">"slept for <span class="subst">#&#123;round(microseconds / <span class="number">1000</span>)&#125;</span> microseconds"</span>)</span><br><span class="line"><span class="comment"># =&gt; slept for 1000 microseconds</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;microseconds, <span class="number">_</span>&#125; = <span class="symbol">:timer</span>.tc(<span class="keyword">fn</span> -&gt; SleepMsg.sleep(<span class="number">1000</span>) <span class="keyword">end</span>)</span><br><span class="line">IO.puts(<span class="string">"slept for <span class="subst">#&#123;round(microseconds / <span class="number">1000</span>)&#125;</span> microseconds"</span>)</span><br><span class="line"><span class="comment"># =&gt; slept for 1001 microseconds</span></span><br></pre></td></tr></table></figure><p>You may ask, what is the frigging point of all of this when we have <code>:timer.sleep</code>?Well, there is no point. This was just a fun little exercise :D</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Elixir has &lt;code&gt;:timer.sleep(ms)&lt;/code&gt;, a function which allows you to pause a process’s execution for an
arbitrary number of milliseco
      
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="Sleep" scheme="http://minhajuddin.com/tags/sleep/"/>
    
  </entry>
  
  <entry>
    <title>How to setup your hexo blog to be automatically published using Travis CI</title>
    <link href="http://minhajuddin.com/2018/05/09/how-to-setup-your-hexo-blog-to-be-automatically-published-using-travis-ci/"/>
    <id>http://minhajuddin.com/2018/05/09/how-to-setup-your-hexo-blog-to-be-automatically-published-using-travis-ci/</id>
    <published>2018-05-09T15:31:27.000Z</published>
    <updated>2019-11-30T05:36:43.318Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.github.com/2018-05-01-github-pages-custom-domains-https/" target="_blank" rel="noopener">GitHub Pages has recently finished one of the long standing feature requests ofallowing SSL on custom domains!</a>.I have it enabled on my blog (<a href="https://minhajuddin.com)">https://minhajuddin.com)</a>. Yay! However, I have notbeen able to publish any new blog posts because the effort required to publisha new post is a bit too much! The previous service that I had used to auto publishwas shut down. And looking at the alternatives, <a href="https://travis-ci.org/minhajuddin/blog.minhajuddin.com" target="_blank" rel="noopener">Travis CI</a> looked great.I use it for a few of my other projects.</p><p>Here is the <code>.travis.yml</code> with a few slight modifications from: <a href="https://github.com/jkeylu/deploy-hexo-site-by-travis-ci/blob/master/_travis.yml" target="_blank" rel="noopener">https://github.com/jkeylu/deploy-hexo-site-by-travis-ci/blob/master/_travis.yml</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># Deploy hexo site by travis-ci</span><br><span class="line"># https://github.com/jkeylu/deploy-hexo-site-by-travis-ci</span><br><span class="line"># 1. Copy this file to the root of your repository, then rename it to &apos;.travis.yml&apos;</span><br><span class="line"># 2. Replace &apos;YOUR NAME&apos; and &apos;YOUR EMAIL&apos; at line 29</span><br><span class="line"># 3. Add an Environment Variable &apos;DEPLOY_REPO&apos;</span><br><span class="line">#     1. Generate github access token on https://github.com/settings/applications#personal-access-tokens</span><br><span class="line">#     2. Add an Environment Variable on https://travis-ci.org/&#123;github username&#125;/&#123;repository name&#125;/settings/env_vars</span><br><span class="line">#         Variable Name: DEPLOY_REPO</span><br><span class="line">#         Variable Value: https://&#123;githb access token&#125;@github.com/&#123;github username&#125;/&#123;repository name&#125;.git</span><br><span class="line">#         Example: DEPLOY_REPO=https://6b75cfe9836f56e6d21187622730889874476c23@github.com/jkeylu/test-hexo-on-travis-ci.git</span><br><span class="line"># 4. Make sure Travis is configured to hide your Variable, else others will see your access token and can mess with all your repos.</span><br><span class="line"></span><br><span class="line">language: node_js</span><br><span class="line">node_js:</span><br><span class="line">- &quot;9&quot;</span><br><span class="line"></span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">  - master</span><br><span class="line"></span><br><span class="line">install:</span><br><span class="line">- npm install</span><br><span class="line"></span><br><span class="line">before_script:</span><br><span class="line">- git config --global user.name &apos;Khaja Minhajuddin&apos;</span><br><span class="line">- git config --global user.email &apos;minhajuddin.k@gmail.com&apos;</span><br><span class="line"></span><br><span class="line">script:</span><br><span class="line">- ./node_modules/.bin/hexo generate</span><br><span class="line"></span><br><span class="line">after_success:</span><br><span class="line">- mkdir .deploy</span><br><span class="line">- cd .deploy</span><br><span class="line">- git clone --depth 1 --branch gh-pages --single-branch $DEPLOY_REPO . || (git init &amp;&amp; git remote add -t gh-pages origin $DEPLOY_REPO)</span><br><span class="line">- rm -rf ./*                      # Clear old verion</span><br><span class="line">- cp -r ../public/* .             # Copy over files for new version</span><br><span class="line">- git add -A .</span><br><span class="line">- git commit -m &apos;Site updated&apos;    # Make a new commit for new version</span><br><span class="line">- git branch -m gh-pages</span><br><span class="line">- git push -q -u origin gh-pages  # Push silently so we don&apos;t leak information</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.github.com/2018-05-01-github-pages-custom-domains-https/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub Pages has recently 
      
    
    </summary>
    
    
      <category term="travis" scheme="http://minhajuddin.com/tags/travis/"/>
    
      <category term="hexo" scheme="http://minhajuddin.com/tags/hexo/"/>
    
      <category term="GitHub Pages" scheme="http://minhajuddin.com/tags/github-pages/"/>
    
  </entry>
  
  <entry>
    <title>ets versus redis benchmarks for a simple key value store</title>
    <link href="http://minhajuddin.com/2017/10/04/ets-versus-redis-benchmarks-for-a-simple-key-value-store/"/>
    <id>http://minhajuddin.com/2017/10/04/ets-versus-redis-benchmarks-for-a-simple-key-value-store/</id>
    <published>2017-10-04T16:41:29.000Z</published>
    <updated>2019-11-30T05:36:43.314Z</updated>
    
    <content type="html"><![CDATA[<p>The project that I am currently working on has a huge data set of static lookup data.And, we have been using Redis to store this data since the beginning of the project.We figured, redis would be the fastest as the whole data is in memory.However, in our production use we have found redis to be the bottleneck.</p><p>This is not really redis’ fault as the data access pattern that we have involves a huge number of lookups more than 10K lookups per request.Also, since redis runs on a single core, it isn’t able to use all the cores on our server. Add the network costs and the serialization costs to it and things add up very quickly.</p><p>This led me to do some benchmarking of redis against ets with our actual production data and (un)surprisingly we found that ets beats Redis for simple key value data.So, if you are using redis as a key value store. Please do yourself a favor and use ets (If you are using Elixir or erlang).</p><p>I created a simple <a href="https://github.com/minhajuddin/redis_vs_ets_showdown" target="_blank" rel="noopener">mix project which benchmarks ets and redis (https://github.com/minhajuddin/redis_vs_ets_showdown)</a></p><p>Go ahead and try it out by tweaking the count of records or the parallelism.</p><p>We found that the ets to redis performance gap actually grows as the parallelism increases.</p><p>Checkout the repository for the benchmark data: <a href="https://github.com/minhajuddin/redis_vs_ets_showdown" target="_blank" rel="noopener">https://github.com/minhajuddin/redis_vs_ets_showdown</a></p><p>You can also check the reports at:</p><ol><li><a href="https://minhajuddin.github.io/redis_vs_ets_showdown/reports/benchmark-1000.html" target="_blank" rel="noopener">https://minhajuddin.github.io/redis_vs_ets_showdown/reports/benchmark-1000.html</a></li><li><a href="https://minhajuddin.github.io/redis_vs_ets_showdown/reports/benchmark-1000000.html" target="_blank" rel="noopener">https://minhajuddin.github.io/redis_vs_ets_showdown/reports/benchmark-1000000.html</a></li></ol><p>Here is the gist of the benchmark:</p><h3 id="Quick-explanation-of-names"><a href="#Quick-explanation-of-names" class="headerlink" title="Quick explanation of names"></a>Quick explanation of names</h3><p><em>ets_get_1000</em>: does an ets lookup 1000 times</p><p><em>redis_get_1000</em>: does a redis lookup 1000 times using <code>HGET</code></p><p><em>ets_get_multi</em>: does an ets lookup 1000 times</p><p><em>redis_get_multi</em>: does a single <code>HMGET</code> Redis lookup</p><h3 id="Benchmark-for-1000-000-records"><a href="#Benchmark-for-1000-000-records" class="headerlink" title="Benchmark for 1000_000 records"></a>Benchmark for 1000_000 records</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Operating System: Linux</span><br><span class="line">CPU Information: Intel(R) Core(TM) i7-4700MQ CPU @ 2.40GHz</span><br><span class="line">Number of Available Cores: 8</span><br><span class="line">Available memory: 12.019272 GB</span><br><span class="line">Elixir 1.5.1</span><br><span class="line">Erlang 20.1</span><br><span class="line">Benchmark suite executing with the following configuration:</span><br><span class="line">warmup: 2.00 s</span><br><span class="line">time: 30.00 s</span><br><span class="line">parallel: 4</span><br><span class="line">inputs: none specified</span><br><span class="line">Estimated total run time: 2.13 min</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Name                      ips        average  deviation         median</span><br><span class="line">ets_get_multi          3.31 K        0.30 ms    ±20.60%        0.28 ms</span><br><span class="line">ets_get_1000           2.87 K        0.35 ms    ±75.38%        0.31 ms</span><br><span class="line">redis_get_multi        0.34 K        2.95 ms    ±17.46%        3.01 ms</span><br><span class="line">redis_get_1000       0.0122 K       82.15 ms    ±15.77%       77.68 ms</span><br><span class="line"></span><br><span class="line">Comparison:</span><br><span class="line">ets_get_multi          3.31 K</span><br><span class="line">ets_get_1000           2.87 K - 1.15x slower</span><br><span class="line">redis_get_multi        0.34 K - 9.76x slower</span><br><span class="line">redis_get_1000       0.0122 K - 271.91x slower</span><br></pre></td></tr></table></figure><h3 id="Benchmark-for-1000-records"><a href="#Benchmark-for-1000-records" class="headerlink" title="Benchmark for 1000 records"></a>Benchmark for 1000 records</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Name                      ips        average  deviation         median</span><br><span class="line">ets_get_multi          4.06 K        0.25 ms    ±12.31%        0.24 ms</span><br><span class="line">ets_get_1000           3.96 K        0.25 ms    ±18.72%        0.23 ms</span><br><span class="line">redis_get_multi        0.34 K        2.90 ms    ±12.34%        2.99 ms</span><br><span class="line">redis_get_1000       0.0115 K       87.27 ms    ±17.31%       81.36 ms</span><br><span class="line"></span><br><span class="line">Comparison:</span><br><span class="line">ets_get_multi          4.06 K</span><br><span class="line">ets_get_1000           3.96 K - 1.02x slower</span><br><span class="line">redis_get_multi        0.34 K - 11.78x slower</span><br><span class="line">redis_get_1000       0.0115 K - 354.04x slower</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The project that I am currently working on has a huge data set of static lookup data.
And, we have been using Redis to store this data si
      
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="ets" scheme="http://minhajuddin.com/tags/ets/"/>
    
      <category term="Redis" scheme="http://minhajuddin.com/tags/redis/"/>
    
      <category term="Benchmark" scheme="http://minhajuddin.com/tags/benchmark/"/>
    
      <category term="Key-Value" scheme="http://minhajuddin.com/tags/key-value/"/>
    
  </entry>
  
  <entry>
    <title>Performance variations of string substitution in Elixir</title>
    <link href="http://minhajuddin.com/2017/06/19/performance-variations-of-string-substitution-in-elixir/"/>
    <id>http://minhajuddin.com/2017/06/19/performance-variations-of-string-substitution-in-elixir/</id>
    <published>2017-06-19T17:16:19.000Z</published>
    <updated>2019-11-30T05:36:43.322Z</updated>
    
    <content type="html"><![CDATA[<p>I had to do some string stripping in one of my apps which was a bit performance sensitive.I ended up benching multiple approaches to see the speed differences. The results are <em>not that suprising</em>.</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">path = <span class="string">"/haha/index.html"</span></span><br><span class="line">subdomain_rx = ~r(^\/[^\/]+)</span><br><span class="line"></span><br><span class="line">Benchee.run(%&#123;</span><br><span class="line">  <span class="string">"pattern_match_bytes"</span> =&gt; <span class="keyword">fn</span> -&gt;</span><br><span class="line">    len = byte_size(<span class="string">"/haha"</span>)</span><br><span class="line">    &lt;&lt;<span class="symbol">_:</span><span class="symbol">:bytes-size</span>(len), rest <span class="symbol">:</span>: binary &gt;&gt; = path</span><br><span class="line">    rest</span><br><span class="line">  <span class="keyword">end</span>,</span><br><span class="line">  <span class="string">"pattern_match"</span> =&gt; <span class="keyword">fn</span> -&gt; <span class="string">"/haha"</span> &lt;&gt; rest = path; rest <span class="keyword">end</span>,</span><br><span class="line">  <span class="string">"slice"</span> =&gt; <span class="keyword">fn</span> -&gt; String.slice(path, String.length(<span class="string">"/haha"</span>)..-<span class="number">1</span>) <span class="keyword">end</span>,</span><br><span class="line">  <span class="string">"replace_prefix"</span> =&gt; <span class="keyword">fn</span> -&gt; String.replace_prefix(path, <span class="string">"/haha"</span>, <span class="string">""</span>) <span class="keyword">end</span>,</span><br><span class="line">  <span class="string">"split"</span> =&gt; <span class="keyword">fn</span> -&gt; String.splitter(path, <span class="string">"/"</span>) |&gt; Enum.drop(<span class="number">1</span>) |&gt; Enum.join(<span class="string">"/"</span>) <span class="keyword">end</span>,</span><br><span class="line">  <span class="string">"regex"</span> =&gt; <span class="keyword">fn</span> -&gt; String.replace(path, subdomain_rx, <span class="string">""</span>) <span class="keyword">end</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="output-of-benchee"><a href="#output-of-benchee" class="headerlink" title="output of benchee"></a>output of benchee</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">bench [master] $ mix run lib/bench.exs</span><br><span class="line">Operating System: Linux</span><br><span class="line">CPU Information: Intel(R) Core(TM) i7-4700MQ CPU @ 2.40GHz</span><br><span class="line">Number of Available Cores: 8</span><br><span class="line">Available memory: 12.019316 GB</span><br><span class="line">Elixir 1.4.4</span><br><span class="line">Erlang 20.0-rc2</span><br><span class="line">Benchmark suite executing with the following configuration:</span><br><span class="line">warmup: 2.00 s</span><br><span class="line">time: 5.00 s</span><br><span class="line">parallel: 1</span><br><span class="line">inputs: none specified</span><br><span class="line">Estimated total run time: 42.00 s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Benchmarking pattern_match...</span><br><span class="line">Warning: The function you are trying to benchmark is super fast, making measures more unreliable! See: https://github.com/PragTob/benchee/wiki/Benchee-Warnings#fast-execution-warning</span><br><span class="line"></span><br><span class="line">You may disable this warning by passing print: [fast_warning: false] as configuration options.</span><br><span class="line"></span><br><span class="line">Benchmarking pattern_match_bytes...</span><br><span class="line">Warning: The function you are trying to benchmark is super fast, making measures more unreliable! See: https://github.com/PragTob/benchee/wiki/Benchee-Warnings#fast-execution-warning</span><br><span class="line"></span><br><span class="line">You may disable this warning by passing print: [fast_warning: false] as configuration options.</span><br><span class="line"></span><br><span class="line">Benchmarking regex...</span><br><span class="line">Benchmarking replace_prefix...</span><br><span class="line">Warning: The function you are trying to benchmark is super fast, making measures more unreliable! See: https://github.com/PragTob/benchee/wiki/Benchee-Warnings#fast-execution-warning</span><br><span class="line"></span><br><span class="line">You may disable this warning by passing print: [fast_warning: false] as configuration options.</span><br><span class="line"></span><br><span class="line">Benchmarking slice...</span><br><span class="line">Benchmarking split...</span><br><span class="line"></span><br><span class="line">Name                          ips        average  deviation         median</span><br><span class="line">pattern_match_bytes       24.05 M      0.0416 μs  ±1797.73%      0.0300 μs</span><br><span class="line">pattern_match             22.37 M      0.0447 μs  ±1546.59%      0.0400 μs</span><br><span class="line">replace_prefix             3.11 M        0.32 μs   ±204.05%        0.22 μs</span><br><span class="line">slice                      1.25 M        0.80 μs  ±6484.21%        1.00 μs</span><br><span class="line">split                      0.75 M        1.34 μs  ±3267.35%        1.00 μs</span><br><span class="line">regex                      0.42 M        2.37 μs  ±1512.77%        2.00 μs</span><br><span class="line"></span><br><span class="line">Comparison:</span><br><span class="line">pattern_match_bytes       24.05 M</span><br><span class="line">pattern_match             22.37 M - 1.08x slower</span><br><span class="line">replace_prefix             3.11 M - 7.73x slower</span><br><span class="line">slice                      1.25 M - 19.30x slower</span><br><span class="line">split                      0.75 M - 32.18x slower</span><br><span class="line">regex                      0.42 M - 57.00x slower</span><br></pre></td></tr></table></figure><p><strong>So, the next time you want to strip prefixing stuff, use pattern matching :)</strong></p><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><p>Based on the comments by @Matt Widmann and @Peter I did a quick test of replacing the tail of the string using the following code:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">path = <span class="string">"/haha/index.html"</span></span><br><span class="line"></span><br><span class="line">ext_rx = ~r/\.[^\.]+<span class="variable">$/</span></span><br><span class="line"></span><br><span class="line">Benchee.run(%&#123;</span><br><span class="line">  <span class="string">"reverse_pattern_match_bytes"</span> =&gt; <span class="keyword">fn</span> -&gt;</span><br><span class="line">    len = byte_size(<span class="string">".html"</span>)</span><br><span class="line">    &lt;&lt;<span class="symbol">_:</span><span class="symbol">:bytes-size</span>(len), rest <span class="symbol">:</span>: binary &gt;&gt; = String.reverse(path)</span><br><span class="line">    rest |&gt; String.reverse</span><br><span class="line">  <span class="keyword">end</span>,</span><br><span class="line">  <span class="string">"reverse_pattern_match"</span> =&gt; <span class="keyword">fn</span> -&gt; <span class="string">"lmth."</span> &lt;&gt; rest = String.reverse(path); String.reverse(rest) <span class="keyword">end</span>,</span><br><span class="line">  <span class="string">"slice"</span> =&gt; <span class="keyword">fn</span> -&gt; String.slice(path, <span class="number">0</span>..(String.length(<span class="string">".html"</span>) * (-<span class="number">1</span>))) <span class="keyword">end</span>,</span><br><span class="line">  <span class="string">"replace_suffix"</span> =&gt; <span class="keyword">fn</span> -&gt; String.replace_suffix(path, <span class="string">".html"</span>, <span class="string">""</span>) <span class="keyword">end</span>,</span><br><span class="line">  <span class="string">"split"</span> =&gt; <span class="keyword">fn</span> -&gt; String.splitter(path, <span class="string">"."</span>) |&gt; Enum.slice(<span class="number">0</span>..-<span class="number">2</span>) |&gt; Enum.join(<span class="string">"."</span>) <span class="keyword">end</span>,</span><br><span class="line">  <span class="string">"regex"</span> =&gt; <span class="keyword">fn</span> -&gt; String.replace(path, ext_rx, <span class="string">""</span>) <span class="keyword">end</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The results for this are:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>This led be to look at the actual Elixir code for <code>replace_prefix</code> and <code>replace_suffix</code> which is:</p><p><a href="https://github.com/elixir-lang/elixir/blob/master/lib/elixir/lib/string.ex#L752" target="_blank" rel="noopener">https://github.com/elixir-lang/elixir/blob/master/lib/elixir/lib/string.ex#L752</a></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replace_prefix</span></span>(string, match, replacement)</span><br><span class="line">    <span class="keyword">when</span> is_binary(string) <span class="keyword">and</span> is_binary(match) <span class="keyword">and</span> is_binary(replacement) <span class="keyword">do</span></span><br><span class="line">  prefix_size = byte_size(match)</span><br><span class="line">  suffix_size = byte_size(string) - prefix_size</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> string <span class="keyword">do</span></span><br><span class="line">    &lt;&lt;<span class="symbol">prefix:</span><span class="symbol">:size</span>(prefix_size)-binary, <span class="symbol">suffix:</span><span class="symbol">:size</span>(suffix_size)-binary&gt;&gt; <span class="keyword">when</span> prefix == match -&gt;</span><br><span class="line">      replacement &lt;&gt; suffix</span><br><span class="line">    <span class="number">_</span> -&gt;</span><br><span class="line">      string</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replace_suffix</span></span>(string, match, replacement)</span><br><span class="line">    <span class="keyword">when</span> is_binary(string) <span class="keyword">and</span> is_binary(match) <span class="keyword">and</span> is_binary(replacement) <span class="keyword">do</span></span><br><span class="line">  suffix_size = byte_size(match)</span><br><span class="line">  prefix_size = byte_size(string) - suffix_size</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> string <span class="keyword">do</span></span><br><span class="line">    &lt;&lt;<span class="symbol">prefix:</span><span class="symbol">:size</span>(prefix_size)-binary, <span class="symbol">suffix:</span><span class="symbol">:size</span>(suffix_size)-binary&gt;&gt; <span class="keyword">when</span> suffix == match -&gt;</span><br><span class="line">      prefix &lt;&gt; replacement</span><br><span class="line">    <span class="number">_</span> -&gt;</span><br><span class="line">      string</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>I tweaked the benchmark code a little to run each replace a 1000 times to remove the “too fast” warning.</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Bench</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>(fun), <span class="symbol">do:</span> fun.()</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">no_run</span></span>(_fun), <span class="symbol">do:</span> <span class="symbol">:ok</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">times</span></span>(n \\ <span class="number">1000</span>, fun), <span class="symbol">do:</span> <span class="keyword">fn</span> -&gt; Enum.each(<span class="number">1</span>..n, <span class="keyword">fn</span> <span class="number">_</span> -&gt; fun.() <span class="keyword">end</span>) <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># match beginning of string</span></span><br><span class="line">Bench.run(<span class="keyword">fn</span> -&gt;</span><br><span class="line">  path = <span class="string">"/haha/index.html"</span></span><br><span class="line"></span><br><span class="line">  subdomain_rx = ~r(^\/[^\/]+)</span><br><span class="line"></span><br><span class="line">  Benchee.run(%&#123;</span><br><span class="line">    <span class="string">"pattern_match_bytes"</span> =&gt; Bench.times(<span class="keyword">fn</span> -&gt;</span><br><span class="line">      len = byte_size(<span class="string">"/haha"</span>)</span><br><span class="line">      &lt;&lt;<span class="symbol">_:</span><span class="symbol">:bytes-size</span>(len), rest <span class="symbol">:</span>: binary &gt;&gt; = path</span><br><span class="line">      rest</span><br><span class="line">    <span class="keyword">end</span>),</span><br><span class="line">    <span class="string">"pattern_match"</span> =&gt; Bench.times(<span class="keyword">fn</span> -&gt; <span class="string">"/haha"</span> &lt;&gt; rest = path; rest <span class="keyword">end</span>),</span><br><span class="line">    <span class="string">"slice"</span> =&gt; Bench.times(<span class="keyword">fn</span> -&gt; String.slice(path, String.length(<span class="string">"/haha"</span>)..-<span class="number">1</span>) <span class="keyword">end</span>),</span><br><span class="line">    <span class="string">"replace_prefix"</span> =&gt; Bench.times(<span class="keyword">fn</span> -&gt; String.replace_prefix(path, <span class="string">"/haha"</span>, <span class="string">""</span>) <span class="keyword">end</span>),</span><br><span class="line">    <span class="string">"split"</span> =&gt; Bench.times(<span class="keyword">fn</span> -&gt; String.splitter(path, <span class="string">"/"</span>) |&gt; Enum.drop(<span class="number">1</span>) |&gt; Enum.join(<span class="string">"/"</span>) <span class="keyword">end</span>),</span><br><span class="line">    <span class="string">"regex"</span> =&gt; Bench.times(<span class="keyword">fn</span> -&gt; String.replace(path, subdomain_rx, <span class="string">""</span>) <span class="keyword">end</span>),</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># match end of string string</span></span><br><span class="line">Bench.run(<span class="keyword">fn</span> -&gt;</span><br><span class="line">  path = <span class="string">"/haha/index.html"</span></span><br><span class="line"></span><br><span class="line">  ext_rx = ~r/\.[^\.]+<span class="variable">$/</span></span><br><span class="line"></span><br><span class="line">  Benchee.run(%&#123;</span><br><span class="line">    <span class="string">"reverse_pattern_match_bytes"</span> =&gt; Bench.times(<span class="keyword">fn</span> -&gt;</span><br><span class="line">      len = byte_size(<span class="string">".html"</span>)</span><br><span class="line">      &lt;&lt;<span class="symbol">_:</span><span class="symbol">:bytes-size</span>(len), rest <span class="symbol">:</span>: binary &gt;&gt; = String.reverse(path)</span><br><span class="line">      rest |&gt; String.reverse</span><br><span class="line">    <span class="keyword">end</span>),</span><br><span class="line">    <span class="string">"reverse_pattern_match"</span> =&gt; Bench.times(<span class="keyword">fn</span> -&gt; <span class="string">"lmth."</span> &lt;&gt; rest = String.reverse(path); String.reverse(rest) <span class="keyword">end</span>),</span><br><span class="line">    <span class="string">"slice"</span> =&gt; Bench.times(<span class="keyword">fn</span> -&gt; String.slice(path, <span class="number">0</span>..(String.length(<span class="string">".html"</span>) * (-<span class="number">1</span>))) <span class="keyword">end</span>),</span><br><span class="line">    <span class="string">"replace_suffix"</span> =&gt; Bench.times(<span class="keyword">fn</span> -&gt; String.replace_suffix(path, <span class="string">".html"</span>, <span class="string">""</span>) <span class="keyword">end</span>),</span><br><span class="line">    <span class="string">"split"</span> =&gt; Bench.times(<span class="keyword">fn</span> -&gt; String.splitter(path, <span class="string">"."</span>) |&gt; Enum.slice(<span class="number">0</span>..-<span class="number">2</span>) |&gt; Enum.join(<span class="string">"."</span>) <span class="keyword">end</span>),</span><br><span class="line">    <span class="string">"regex"</span> =&gt; Bench.times(<span class="keyword">fn</span> -&gt; String.replace(path, ext_rx, <span class="string">""</span>) <span class="keyword">end</span>),</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="keyword">end</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">elixir_benchmarks [master *] $ mix run lib/bench.exs</span><br><span class="line"></span><br><span class="line">  Operating System: Linux</span><br><span class="line">  CPU Information: Intel(R) Core(TM) i7-4700MQ CPU @ 2.40GHz</span><br><span class="line">  Number of Available Cores: 8</span><br><span class="line">  Available memory: 12.019316 GB</span><br><span class="line">  Elixir 1.4.4</span><br><span class="line">  Erlang 20.0-rc2</span><br><span class="line">  Benchmark suite executing with the following configuration:</span><br><span class="line">  warmup: 2.00 s</span><br><span class="line">  time: 5.00 s</span><br><span class="line">  parallel: 1</span><br><span class="line">  inputs: none specified</span><br><span class="line">  Estimated total run time: 42.00 s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Benchmarking pattern_match...</span><br><span class="line">  Benchmarking pattern_match_bytes...</span><br><span class="line">  Benchmarking regex...</span><br><span class="line">  Benchmarking replace_prefix...</span><br><span class="line">  Benchmarking slice...</span><br><span class="line">  Benchmarking split...</span><br><span class="line"></span><br><span class="line">  Name                          ips        average  deviation         median</span><br><span class="line">  pattern_match_bytes       15.17 K      0.0659 ms    ±18.05%      0.0610 ms</span><br><span class="line">  pattern_match             14.60 K      0.0685 ms    ±17.41%      0.0640 ms</span><br><span class="line">  replace_prefix             2.52 K        0.40 ms    ±21.46%        0.38 ms</span><br><span class="line">  slice                      0.83 K        1.20 ms    ±21.95%        1.11 ms</span><br><span class="line">  split                      0.58 K        1.72 ms    ±16.76%        1.63 ms</span><br><span class="line">  regex                      0.45 K        2.24 ms     ±7.42%        2.22 ms</span><br><span class="line"></span><br><span class="line">  Comparison:</span><br><span class="line">  pattern_match_bytes       15.17 K</span><br><span class="line">  pattern_match             14.60 K - 1.04x slower</span><br><span class="line">  replace_prefix             2.52 K - 6.01x slower</span><br><span class="line">  slice                      0.83 K - 18.24x slower</span><br><span class="line">  split                      0.58 K - 26.10x slower</span><br><span class="line">  regex                      0.45 K - 33.98x slower</span><br><span class="line">  Operating System: Linux</span><br><span class="line">  CPU Information: Intel(R) Core(TM) i7-4700MQ CPU @ 2.40GHz</span><br><span class="line">  Number of Available Cores: 8</span><br><span class="line">  Available memory: 12.019316 GB</span><br><span class="line">  Elixir 1.4.4</span><br><span class="line">  Erlang 20.0-rc2</span><br><span class="line">  Benchmark suite executing with the following configuration:</span><br><span class="line">  warmup: 2.00 s</span><br><span class="line">  time: 5.00 s</span><br><span class="line">  parallel: 1</span><br><span class="line">  inputs: none specified</span><br><span class="line">  Estimated total run time: 42.00 s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Benchmarking regex...</span><br><span class="line">  Benchmarking replace_suffix...</span><br><span class="line">  Benchmarking reverse_pattern_match...</span><br><span class="line">  Benchmarking reverse_pattern_match_bytes...</span><br><span class="line">  Benchmarking slice...</span><br><span class="line">  Benchmarking split...</span><br><span class="line"></span><br><span class="line">  Name                                  ips        average  deviation         median</span><br><span class="line">  replace_suffix                    2633.75        0.38 ms    ±21.15%        0.36 ms</span><br><span class="line">  split                              618.06        1.62 ms    ±13.56%        1.57 ms</span><br><span class="line">  regex                              389.25        2.57 ms     ±6.54%        2.54 ms</span><br><span class="line">  slice                              324.19        3.08 ms    ±19.06%        2.88 ms</span><br><span class="line">  reverse_pattern_match_bytes        275.45        3.63 ms    ±12.08%        3.48 ms</span><br><span class="line">  reverse_pattern_match              272.06        3.68 ms    ±11.99%        3.54 ms</span><br><span class="line"></span><br><span class="line">  Comparison:</span><br><span class="line">  replace_suffix                    2633.75</span><br><span class="line">  split                              618.06 - 4.26x slower</span><br><span class="line">  regex                              389.25 - 6.77x slower</span><br><span class="line">  slice                              324.19 - 8.12x slower</span><br><span class="line">  reverse_pattern_match_bytes        275.45 - 9.56x slower</span><br><span class="line">  reverse_pattern_match              272.06 - 9.68x slower</span><br><span class="line">  elixir_benchmarks [master *] $</span><br></pre></td></tr></table></figure><p>For reverse string removal from the end, <code>replace_suffix</code> is the fastest which makes sense.However, for removing the prefix, <code>pattern_match_bytes</code> seems to be the fastest. But, it isn’t really truly correct. Because in my instance, I know for sure that the prefix is present.So, the second best performance for which is <code>pattern_match</code> is 6x better than the current <code>String.replace_prefix</code> implementation.</p><p>It may be because I am using OTP 20? I’ll run this on other versions of OTP to compare results. And, if the results are cosistent, will create PR on elixir to change the default implementation.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I had to do some string stripping in one of my apps which was a bit performance sensitive.
I ended up benching multiple approaches to see
      
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="Bench" scheme="http://minhajuddin.com/tags/bench/"/>
    
      <category term="Perf" scheme="http://minhajuddin.com/tags/perf/"/>
    
      <category term="String" scheme="http://minhajuddin.com/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>Optimal order for adding lists in Elixir</title>
    <link href="http://minhajuddin.com/2017/06/08/optimal-order-for-adding-lists-in-elixir/"/>
    <id>http://minhajuddin.com/2017/06/08/optimal-order-for-adding-lists-in-elixir/</id>
    <published>2017-06-08T00:41:50.000Z</published>
    <updated>2019-11-30T05:36:43.318Z</updated>
    
    <content type="html"><![CDATA[<p>Lists are the bread and butter of a functional language and Elixir is no different.</p><p>Elixir uses linked lists to represent lists. Which means, if a list is <code>n</code> elements long it willtake <code>n</code> dereferences to get to the last element of the list. This understanding is very importantfor writing efficient code in Elixir. Because of this adding to the head of a list is nearly instantaneous.</p><h2 id="Adding-to-the-beginning-of-a-list"><a href="#Adding-to-the-beginning-of-a-list" class="headerlink" title="Adding to the beginning of a list"></a>Adding to the beginning of a list</h2><p>Let us take the following list as an example:</p><pre><code>el1 -&gt; el2 -&gt; el3 -&gt; el4</code></pre><p>It has 4 elements and <code>el1</code> is the head of the list. To add a new element <code>el0</code>to the beginning of the list, All you need to do is create a node to store <code>el0</code>and set its <code>next</code> pointer to <code>el1</code>. This changes the representation to:</p><pre><code>el0 -&gt; el1 -&gt; el2 -&gt; el3 -&gt; el4</code></pre><p>Now, one thing to note is: if a previous variable has a reference to <code>el1</code> it willstill have a reference to the earlier 4 element list. So, we are not <em>mutating/chaning</em> the existing list/references.</p><h2 id="Adding-to-the-end-of-a-list"><a href="#Adding-to-the-end-of-a-list" class="headerlink" title="Adding to the end of a list"></a>Adding to the end of a list</h2><p>However, adding something to the end is not the same. Let us take the previous example:</p><pre><code>el1 -&gt; el2 -&gt; el3 -&gt; el4</code></pre><p>Now, if this list is referenced by a binding <code>foo</code>. And if we want to create a new list <code>bar</code> with a new element <code>el5</code> at the end.We can’t just traverse the list, create a new node with value <code>el5</code> and set a reference from <code>el4</code> to <code>el5</code>.If we did that, the reference <code>foo</code> would also get a new element at the end. And this is not how Elixir/Erlang work. The BEAMdoes not allow mutation to existing data. So, to work within this framework, we have to create a <em>brand new</em> list containinga copy of all elements <code>el1..el4</code> and a new node <code>el5</code>. That is why adding elements to the tail of a linked list is slow in Elixir.Because we end up copying the list and appending a new element.</p><p>Now, with this understanding. Let us think of the most efficient way of combining two lists when the order of elements doesn’t matter.For instance, when you send http requests using <code>httpoison</code> the order of the headers doesn’t matter.So, when you have the following implementations available:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A: First list is small most of the time</span></span><br><span class="line"><span class="variable">@default_headers</span> [&#123;<span class="string">"content-type"</span>, <span class="string">"application/json"</span>&#125;, &#123;<span class="string">"authorization"</span>, <span class="string">"Bearer Foo"</span>&#125;, &#123;<span class="string">"accept"</span>, <span class="string">"application/json"</span>&#125;]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span></span>(url, headers \\ []) <span class="keyword">do</span></span><br><span class="line">  headers ++ <span class="variable">@default_headers</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># B: Second list is small most of the time</span></span><br><span class="line"><span class="variable">@default_headers</span> [&#123;<span class="string">"content-type"</span>, <span class="string">"application/json"</span>&#125;, &#123;<span class="string">"authorization"</span>, <span class="string">"Bearer Foo"</span>&#125;, &#123;<span class="string">"accept"</span>, <span class="string">"application/json"</span>&#125;]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span></span>(url, headers \\ []) <span class="keyword">do</span></span><br><span class="line">  <span class="variable">@default_headers</span> ++ headers</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure><p>Pick the one where the first list has lesser elements. In this example that would be the <strong>A</strong> implementation.</p><p>I did a quick benchmark just for kicks (Full code available at <a href="https://github.com/minhajuddin/bench_list_cat)" target="_blank" rel="noopener">https://github.com/minhajuddin/bench_list_cat)</a>:</p><h2 id="Benchmark"><a href="#Benchmark" class="headerlink" title="Benchmark"></a>Benchmark</h2><pre><code>Elixir 1.4.4Erlang 20.0-rc2Benchmark suite executing with the following configuration:warmup: 2.00 stime: 5.00 sparallel: 1inputs: none specifiedEstimated total run time: 14.00 sBenchmarking big_list_first...Benchmarking small_list_first...Name                       ips        average  deviation         mediansmall_list_first        6.49 K       0.154 ms   ±371.63%      0.0560 msbig_list_first       0.00313 K      319.87 ms    ±37.78%      326.10 msComparison:small_list_first        6.49 Kbig_list_first       0.00313 K - 2077.49x slower</code></pre><h2 id="Code-used-for-benchmarking"><a href="#Code-used-for-benchmarking" class="headerlink" title="Code used for benchmarking"></a>Code used for benchmarking</h2><pre><code>small_list = Enum.to_list(1..10_000)big_list = Enum.to_list(1..10_000_000)Benchee.run(%{  &quot;small_list_first&quot; =&gt; fn -&gt; small_list ++ big_list end,  &quot;big_list_first&quot; =&gt; fn -&gt; big_list ++ small_list end})</code></pre><h2 id="Note-that-this-is-an-outrageous-benchmark-no-one-is-adding-lists-containing-10-million-elements-this-way-But-it-demonstrates-my-point"><a href="#Note-that-this-is-an-outrageous-benchmark-no-one-is-adding-lists-containing-10-million-elements-this-way-But-it-demonstrates-my-point" class="headerlink" title="Note that this is an outrageous benchmark, no one is adding lists containing 10 million elements this way ;). But it demonstrates my point."></a>Note that this is an outrageous benchmark, no one is adding lists containing 10 million elements this way ;). But it demonstrates my point.</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Lists are the bread and butter of a functional language and Elixir is no different.&lt;/p&gt;
&lt;p&gt;Elixir uses linked lists to represent lists. W
      
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="Lists" scheme="http://minhajuddin.com/tags/lists/"/>
    
      <category term="Order" scheme="http://minhajuddin.com/tags/order/"/>
    
      <category term="Concatenate" scheme="http://minhajuddin.com/tags/concatenate/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Simplicity</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://minhajuddin.com/"/>
  <updated>2018-05-09T10:16:51.925Z</updated>
  <id>http://minhajuddin.com/</id>
  
  <author>
    <name>Khaja Minhajuddin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How to setup your hexo blog to be automatically published using Travis CI</title>
    <link href="http://minhajuddin.com/2018/05/09/how-to-setup-your-hexo-blog-to-be-automatically-published-using-travis-ci/"/>
    <id>http://minhajuddin.com/2018/05/09/how-to-setup-your-hexo-blog-to-be-automatically-published-using-travis-ci/</id>
    <published>2018-05-09T15:31:27.000Z</published>
    <updated>2018-05-09T10:16:51.925Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.github.com/2018-05-01-github-pages-custom-domains-https/" target="_blank" rel="noopener">GitHub Pages has recently finished one of the long standing feature requests ofallowing SSL on custom domains!</a>.I have it enabled on my blog (<a href="https://minhajuddin.com)">https://minhajuddin.com)</a>. Yay! However, I have notbeen able to publish any new blog posts because the effort required to publisha new post is a bit too much! The previous service that I had used to auto publishwas shut down. And looking at the alternatives, <a href="https://travis-ci.org/minhajuddin/blog.minhajuddin.com" target="_blank" rel="noopener">Travis CI</a> looked great.I use it for a few of my other projects.</p><p>Here is the <code>.travis.yml</code> with a few slight modifications from: <a href="https://github.com/jkeylu/deploy-hexo-site-by-travis-ci/blob/master/_travis.yml" target="_blank" rel="noopener">https://github.com/jkeylu/deploy-hexo-site-by-travis-ci/blob/master/_travis.yml</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># Deploy hexo site by travis-ci</span><br><span class="line"># https://github.com/jkeylu/deploy-hexo-site-by-travis-ci</span><br><span class="line"># 1. Copy this file to the root of your repository, then rename it to &apos;.travis.yml&apos;</span><br><span class="line"># 2. Replace &apos;YOUR NAME&apos; and &apos;YOUR EMAIL&apos; at line 29</span><br><span class="line"># 3. Add an Environment Variable &apos;DEPLOY_REPO&apos;</span><br><span class="line">#     1. Generate github access token on https://github.com/settings/applications#personal-access-tokens</span><br><span class="line">#     2. Add an Environment Variable on https://travis-ci.org/&#123;github username&#125;/&#123;repository name&#125;/settings/env_vars</span><br><span class="line">#         Variable Name: DEPLOY_REPO</span><br><span class="line">#         Variable Value: https://&#123;githb access token&#125;@github.com/&#123;github username&#125;/&#123;repository name&#125;.git</span><br><span class="line">#         Example: DEPLOY_REPO=https://6b75cfe9836f56e6d21187622730889874476c23@github.com/jkeylu/test-hexo-on-travis-ci.git</span><br><span class="line"># 4. Make sure Travis is configured to hide your Variable, else others will see your access token and can mess with all your repos.</span><br><span class="line"></span><br><span class="line">language: node_js</span><br><span class="line">node_js:</span><br><span class="line">- &quot;9&quot;</span><br><span class="line"></span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">  - master</span><br><span class="line"></span><br><span class="line">install:</span><br><span class="line">- npm install</span><br><span class="line"></span><br><span class="line">before_script:</span><br><span class="line">- git config --global user.name &apos;Khaja Minhajuddin&apos;</span><br><span class="line">- git config --global user.email &apos;minhajuddin.k@gmail.com&apos;</span><br><span class="line"></span><br><span class="line">script:</span><br><span class="line">- ./node_modules/.bin/hexo generate</span><br><span class="line"></span><br><span class="line">after_success:</span><br><span class="line">- mkdir .deploy</span><br><span class="line">- cd .deploy</span><br><span class="line">- git clone --depth 1 --branch gh-pages --single-branch $DEPLOY_REPO . || (git init &amp;&amp; git remote add -t gh-pages origin $DEPLOY_REPO)</span><br><span class="line">- rm -rf ./*                      # Clear old verion</span><br><span class="line">- cp -r ../public/* .             # Copy over files for new version</span><br><span class="line">- git add -A .</span><br><span class="line">- git commit -m &apos;Site updated&apos;    # Make a new commit for new version</span><br><span class="line">- git branch -m gh-pages</span><br><span class="line">- git push -q -u origin gh-pages  # Push silently so we don&apos;t leak information</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.github.com/2018-05-01-github-pages-custom-domains-https/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub Pages has recently 
      
    
    </summary>
    
    
      <category term="travis" scheme="http://minhajuddin.com/tags/travis/"/>
    
      <category term="hexo" scheme="http://minhajuddin.com/tags/hexo/"/>
    
      <category term="GitHub Pages" scheme="http://minhajuddin.com/tags/github-pages/"/>
    
  </entry>
  
  <entry>
    <title>ets versus redis benchmarks for a simple key value store</title>
    <link href="http://minhajuddin.com/2017/10/04/ets-versus-redis-benchmarks-for-a-simple-key-value-store/"/>
    <id>http://minhajuddin.com/2017/10/04/ets-versus-redis-benchmarks-for-a-simple-key-value-store/</id>
    <published>2017-10-04T16:41:29.000Z</published>
    <updated>2018-05-09T10:16:51.921Z</updated>
    
    <content type="html"><![CDATA[<p>The project that I am currently working on has a huge data set of static lookup data.And, we have been using Redis to store this data since the beginning of the project.We figured, redis would be the fastest as the whole data is in memory.However, in our production use we have found redis to be the bottleneck.</p><p>This is not really redis’ fault as the data access pattern that we have involves a huge number of lookups more than 10K lookups per request.Also, since redis runs on a single core, it isn’t able to use all the cores on our server. Add the network costs and the serialization costs to it and things add up very quickly.</p><p>This led me to do some benchmarking of redis against ets with our actual production data and (un)surprisingly we found that ets beats Redis for simple key value data.So, if you are using redis as a key value store. Please do yourself a favor and use ets (If you are using Elixir or erlang).</p><p>I created a simple <a href="https://github.com/minhajuddin/redis_vs_ets_showdown" target="_blank" rel="noopener">mix project which benchmarks ets and redis (https://github.com/minhajuddin/redis_vs_ets_showdown)</a></p><p>Go ahead and try it out by tweaking the count of records or the parallelism.</p><p>We found that the ets to redis performance gap actually grows as the parallelism increases.</p><p>Checkout the repository for the benchmark data: <a href="https://github.com/minhajuddin/redis_vs_ets_showdown" target="_blank" rel="noopener">https://github.com/minhajuddin/redis_vs_ets_showdown</a></p><p>You can also check the reports at:</p><ol><li><a href="https://minhajuddin.github.io/redis_vs_ets_showdown/reports/benchmark-1000.html" target="_blank" rel="noopener">https://minhajuddin.github.io/redis_vs_ets_showdown/reports/benchmark-1000.html</a></li><li><a href="https://minhajuddin.github.io/redis_vs_ets_showdown/reports/benchmark-1000000.html" target="_blank" rel="noopener">https://minhajuddin.github.io/redis_vs_ets_showdown/reports/benchmark-1000000.html</a></li></ol><p>Here is the gist of the benchmark:</p><h3 id="Quick-explanation-of-names"><a href="#Quick-explanation-of-names" class="headerlink" title="Quick explanation of names"></a>Quick explanation of names</h3><p><em>ets_get_1000</em>: does an ets lookup 1000 times</p><p><em>redis_get_1000</em>: does a redis lookup 1000 times using <code>HGET</code></p><p><em>ets_get_multi</em>: does an ets lookup 1000 times</p><p><em>redis_get_multi</em>: does a single <code>HMGET</code> Redis lookup</p><h3 id="Benchmark-for-1000-000-records"><a href="#Benchmark-for-1000-000-records" class="headerlink" title="Benchmark for 1000_000 records"></a>Benchmark for 1000_000 records</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Operating System: Linux</span><br><span class="line">CPU Information: Intel(R) Core(TM) i7-4700MQ CPU @ 2.40GHz</span><br><span class="line">Number of Available Cores: 8</span><br><span class="line">Available memory: 12.019272 GB</span><br><span class="line">Elixir 1.5.1</span><br><span class="line">Erlang 20.1</span><br><span class="line">Benchmark suite executing with the following configuration:</span><br><span class="line">warmup: 2.00 s</span><br><span class="line">time: 30.00 s</span><br><span class="line">parallel: 4</span><br><span class="line">inputs: none specified</span><br><span class="line">Estimated total run time: 2.13 min</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Name                      ips        average  deviation         median</span><br><span class="line">ets_get_multi          3.31 K        0.30 ms    ±20.60%        0.28 ms</span><br><span class="line">ets_get_1000           2.87 K        0.35 ms    ±75.38%        0.31 ms</span><br><span class="line">redis_get_multi        0.34 K        2.95 ms    ±17.46%        3.01 ms</span><br><span class="line">redis_get_1000       0.0122 K       82.15 ms    ±15.77%       77.68 ms</span><br><span class="line"></span><br><span class="line">Comparison:</span><br><span class="line">ets_get_multi          3.31 K</span><br><span class="line">ets_get_1000           2.87 K - 1.15x slower</span><br><span class="line">redis_get_multi        0.34 K - 9.76x slower</span><br><span class="line">redis_get_1000       0.0122 K - 271.91x slower</span><br></pre></td></tr></table></figure><h3 id="Benchmark-for-1000-records"><a href="#Benchmark-for-1000-records" class="headerlink" title="Benchmark for 1000 records"></a>Benchmark for 1000 records</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Name                      ips        average  deviation         median</span><br><span class="line">ets_get_multi          4.06 K        0.25 ms    ±12.31%        0.24 ms</span><br><span class="line">ets_get_1000           3.96 K        0.25 ms    ±18.72%        0.23 ms</span><br><span class="line">redis_get_multi        0.34 K        2.90 ms    ±12.34%        2.99 ms</span><br><span class="line">redis_get_1000       0.0115 K       87.27 ms    ±17.31%       81.36 ms</span><br><span class="line"></span><br><span class="line">Comparison:</span><br><span class="line">ets_get_multi          4.06 K</span><br><span class="line">ets_get_1000           3.96 K - 1.02x slower</span><br><span class="line">redis_get_multi        0.34 K - 11.78x slower</span><br><span class="line">redis_get_1000       0.0115 K - 354.04x slower</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The project that I am currently working on has a huge data set of static lookup data.
And, we have been using Redis to store this data si
      
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="ets" scheme="http://minhajuddin.com/tags/ets/"/>
    
      <category term="Redis" scheme="http://minhajuddin.com/tags/redis/"/>
    
      <category term="Benchmark" scheme="http://minhajuddin.com/tags/benchmark/"/>
    
      <category term="Key-Value" scheme="http://minhajuddin.com/tags/key-value/"/>
    
  </entry>
  
  <entry>
    <title>Performance variations of string substitution in Elixir</title>
    <link href="http://minhajuddin.com/2017/06/19/performance-variations-of-string-substitution-in-elixir/"/>
    <id>http://minhajuddin.com/2017/06/19/performance-variations-of-string-substitution-in-elixir/</id>
    <published>2017-06-19T17:16:19.000Z</published>
    <updated>2018-05-09T10:16:51.933Z</updated>
    
    <content type="html"><![CDATA[<p>I had to do some string stripping in one of my apps which was a bit performance sensitive.I ended up benching multiple approaches to see the speed differences. The results are <em>not that suprising</em>.</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">path = <span class="string">"/haha/index.html"</span></span><br><span class="line">subdomain_rx = ~r(^\/[^\/]+)</span><br><span class="line"></span><br><span class="line">Benchee.run(%&#123;</span><br><span class="line">  <span class="string">"pattern_match_bytes"</span> =&gt; <span class="keyword">fn</span> -&gt;</span><br><span class="line">    len = byte_size(<span class="string">"/haha"</span>)</span><br><span class="line">    &lt;&lt;<span class="symbol">_:</span><span class="symbol">:bytes-size</span>(len), rest <span class="symbol">:</span>: binary &gt;&gt; = path</span><br><span class="line">    rest</span><br><span class="line">  <span class="keyword">end</span>,</span><br><span class="line">  <span class="string">"pattern_match"</span> =&gt; <span class="keyword">fn</span> -&gt; <span class="string">"/haha"</span> &lt;&gt; rest = path; rest <span class="keyword">end</span>,</span><br><span class="line">  <span class="string">"slice"</span> =&gt; <span class="keyword">fn</span> -&gt; String.slice(path, String.length(<span class="string">"/haha"</span>)..-<span class="number">1</span>) <span class="keyword">end</span>,</span><br><span class="line">  <span class="string">"replace_prefix"</span> =&gt; <span class="keyword">fn</span> -&gt; String.replace_prefix(path, <span class="string">"/haha"</span>, <span class="string">""</span>) <span class="keyword">end</span>,</span><br><span class="line">  <span class="string">"split"</span> =&gt; <span class="keyword">fn</span> -&gt; String.splitter(path, <span class="string">"/"</span>) |&gt; Enum.drop(<span class="number">1</span>) |&gt; Enum.join(<span class="string">"/"</span>) <span class="keyword">end</span>,</span><br><span class="line">  <span class="string">"regex"</span> =&gt; <span class="keyword">fn</span> -&gt; String.replace(path, subdomain_rx, <span class="string">""</span>) <span class="keyword">end</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="output-of-benchee"><a href="#output-of-benchee" class="headerlink" title="output of benchee"></a>output of benchee</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">bench [master] $ mix run lib/bench.exs</span><br><span class="line">Operating System: Linux</span><br><span class="line">CPU Information: Intel(R) Core(TM) i7-4700MQ CPU @ 2.40GHz</span><br><span class="line">Number of Available Cores: 8</span><br><span class="line">Available memory: 12.019316 GB</span><br><span class="line">Elixir 1.4.4</span><br><span class="line">Erlang 20.0-rc2</span><br><span class="line">Benchmark suite executing with the following configuration:</span><br><span class="line">warmup: 2.00 s</span><br><span class="line">time: 5.00 s</span><br><span class="line">parallel: 1</span><br><span class="line">inputs: none specified</span><br><span class="line">Estimated total run time: 42.00 s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Benchmarking pattern_match...</span><br><span class="line">Warning: The function you are trying to benchmark is super fast, making measures more unreliable! See: https://github.com/PragTob/benchee/wiki/Benchee-Warnings#fast-execution-warning</span><br><span class="line"></span><br><span class="line">You may disable this warning by passing print: [fast_warning: false] as configuration options.</span><br><span class="line"></span><br><span class="line">Benchmarking pattern_match_bytes...</span><br><span class="line">Warning: The function you are trying to benchmark is super fast, making measures more unreliable! See: https://github.com/PragTob/benchee/wiki/Benchee-Warnings#fast-execution-warning</span><br><span class="line"></span><br><span class="line">You may disable this warning by passing print: [fast_warning: false] as configuration options.</span><br><span class="line"></span><br><span class="line">Benchmarking regex...</span><br><span class="line">Benchmarking replace_prefix...</span><br><span class="line">Warning: The function you are trying to benchmark is super fast, making measures more unreliable! See: https://github.com/PragTob/benchee/wiki/Benchee-Warnings#fast-execution-warning</span><br><span class="line"></span><br><span class="line">You may disable this warning by passing print: [fast_warning: false] as configuration options.</span><br><span class="line"></span><br><span class="line">Benchmarking slice...</span><br><span class="line">Benchmarking split...</span><br><span class="line"></span><br><span class="line">Name                          ips        average  deviation         median</span><br><span class="line">pattern_match_bytes       24.05 M      0.0416 μs  ±1797.73%      0.0300 μs</span><br><span class="line">pattern_match             22.37 M      0.0447 μs  ±1546.59%      0.0400 μs</span><br><span class="line">replace_prefix             3.11 M        0.32 μs   ±204.05%        0.22 μs</span><br><span class="line">slice                      1.25 M        0.80 μs  ±6484.21%        1.00 μs</span><br><span class="line">split                      0.75 M        1.34 μs  ±3267.35%        1.00 μs</span><br><span class="line">regex                      0.42 M        2.37 μs  ±1512.77%        2.00 μs</span><br><span class="line"></span><br><span class="line">Comparison:</span><br><span class="line">pattern_match_bytes       24.05 M</span><br><span class="line">pattern_match             22.37 M - 1.08x slower</span><br><span class="line">replace_prefix             3.11 M - 7.73x slower</span><br><span class="line">slice                      1.25 M - 19.30x slower</span><br><span class="line">split                      0.75 M - 32.18x slower</span><br><span class="line">regex                      0.42 M - 57.00x slower</span><br></pre></td></tr></table></figure><p><strong>So, the next time you want to strip prefixing stuff, use pattern matching :)</strong></p><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><p>Based on the comments by @Matt Widmann and @Peter I did a quick test of replacing the tail of the string using the following code:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">path = <span class="string">"/haha/index.html"</span></span><br><span class="line"></span><br><span class="line">ext_rx = ~r/\.[^\.]+<span class="variable">$/</span></span><br><span class="line"></span><br><span class="line">Benchee.run(%&#123;</span><br><span class="line">  <span class="string">"reverse_pattern_match_bytes"</span> =&gt; <span class="keyword">fn</span> -&gt;</span><br><span class="line">    len = byte_size(<span class="string">".html"</span>)</span><br><span class="line">    &lt;&lt;<span class="symbol">_:</span><span class="symbol">:bytes-size</span>(len), rest <span class="symbol">:</span>: binary &gt;&gt; = String.reverse(path)</span><br><span class="line">    rest |&gt; String.reverse</span><br><span class="line">  <span class="keyword">end</span>,</span><br><span class="line">  <span class="string">"reverse_pattern_match"</span> =&gt; <span class="keyword">fn</span> -&gt; <span class="string">"lmth."</span> &lt;&gt; rest = String.reverse(path); String.reverse(rest) <span class="keyword">end</span>,</span><br><span class="line">  <span class="string">"slice"</span> =&gt; <span class="keyword">fn</span> -&gt; String.slice(path, <span class="number">0</span>..(String.length(<span class="string">".html"</span>) * (-<span class="number">1</span>))) <span class="keyword">end</span>,</span><br><span class="line">  <span class="string">"replace_suffix"</span> =&gt; <span class="keyword">fn</span> -&gt; String.replace_suffix(path, <span class="string">".html"</span>, <span class="string">""</span>) <span class="keyword">end</span>,</span><br><span class="line">  <span class="string">"split"</span> =&gt; <span class="keyword">fn</span> -&gt; String.splitter(path, <span class="string">"."</span>) |&gt; Enum.slice(<span class="number">0</span>..-<span class="number">2</span>) |&gt; Enum.join(<span class="string">"."</span>) <span class="keyword">end</span>,</span><br><span class="line">  <span class="string">"regex"</span> =&gt; <span class="keyword">fn</span> -&gt; String.replace(path, ext_rx, <span class="string">""</span>) <span class="keyword">end</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The results for this are:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>This led be to look at the actual Elixir code for <code>replace_prefix</code> and <code>replace_suffix</code> which is:</p><p><a href="https://github.com/elixir-lang/elixir/blob/master/lib/elixir/lib/string.ex#L752" target="_blank" rel="noopener">https://github.com/elixir-lang/elixir/blob/master/lib/elixir/lib/string.ex#L752</a></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replace_prefix</span></span>(string, match, replacement)</span><br><span class="line">    <span class="keyword">when</span> is_binary(string) <span class="keyword">and</span> is_binary(match) <span class="keyword">and</span> is_binary(replacement) <span class="keyword">do</span></span><br><span class="line">  prefix_size = byte_size(match)</span><br><span class="line">  suffix_size = byte_size(string) - prefix_size</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> string <span class="keyword">do</span></span><br><span class="line">    &lt;&lt;<span class="symbol">prefix:</span><span class="symbol">:size</span>(prefix_size)-binary, <span class="symbol">suffix:</span><span class="symbol">:size</span>(suffix_size)-binary&gt;&gt; <span class="keyword">when</span> prefix == match -&gt;</span><br><span class="line">      replacement &lt;&gt; suffix</span><br><span class="line">    <span class="number">_</span> -&gt;</span><br><span class="line">      string</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replace_suffix</span></span>(string, match, replacement)</span><br><span class="line">    <span class="keyword">when</span> is_binary(string) <span class="keyword">and</span> is_binary(match) <span class="keyword">and</span> is_binary(replacement) <span class="keyword">do</span></span><br><span class="line">  suffix_size = byte_size(match)</span><br><span class="line">  prefix_size = byte_size(string) - suffix_size</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> string <span class="keyword">do</span></span><br><span class="line">    &lt;&lt;<span class="symbol">prefix:</span><span class="symbol">:size</span>(prefix_size)-binary, <span class="symbol">suffix:</span><span class="symbol">:size</span>(suffix_size)-binary&gt;&gt; <span class="keyword">when</span> suffix == match -&gt;</span><br><span class="line">      prefix &lt;&gt; replacement</span><br><span class="line">    <span class="number">_</span> -&gt;</span><br><span class="line">      string</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>I tweaked the benchmark code a little to run each replace a 1000 times to remove the “too fast” warning.</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Bench</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>(fun), <span class="symbol">do:</span> fun.()</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">no_run</span></span>(_fun), <span class="symbol">do:</span> <span class="symbol">:ok</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">times</span></span>(n \\ <span class="number">1000</span>, fun), <span class="symbol">do:</span> <span class="keyword">fn</span> -&gt; Enum.each(<span class="number">1</span>..n, <span class="keyword">fn</span> <span class="number">_</span> -&gt; fun.() <span class="keyword">end</span>) <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># match beginning of string</span></span><br><span class="line">Bench.run(<span class="keyword">fn</span> -&gt;</span><br><span class="line">  path = <span class="string">"/haha/index.html"</span></span><br><span class="line"></span><br><span class="line">  subdomain_rx = ~r(^\/[^\/]+)</span><br><span class="line"></span><br><span class="line">  Benchee.run(%&#123;</span><br><span class="line">    <span class="string">"pattern_match_bytes"</span> =&gt; Bench.times(<span class="keyword">fn</span> -&gt;</span><br><span class="line">      len = byte_size(<span class="string">"/haha"</span>)</span><br><span class="line">      &lt;&lt;<span class="symbol">_:</span><span class="symbol">:bytes-size</span>(len), rest <span class="symbol">:</span>: binary &gt;&gt; = path</span><br><span class="line">      rest</span><br><span class="line">    <span class="keyword">end</span>),</span><br><span class="line">    <span class="string">"pattern_match"</span> =&gt; Bench.times(<span class="keyword">fn</span> -&gt; <span class="string">"/haha"</span> &lt;&gt; rest = path; rest <span class="keyword">end</span>),</span><br><span class="line">    <span class="string">"slice"</span> =&gt; Bench.times(<span class="keyword">fn</span> -&gt; String.slice(path, String.length(<span class="string">"/haha"</span>)..-<span class="number">1</span>) <span class="keyword">end</span>),</span><br><span class="line">    <span class="string">"replace_prefix"</span> =&gt; Bench.times(<span class="keyword">fn</span> -&gt; String.replace_prefix(path, <span class="string">"/haha"</span>, <span class="string">""</span>) <span class="keyword">end</span>),</span><br><span class="line">    <span class="string">"split"</span> =&gt; Bench.times(<span class="keyword">fn</span> -&gt; String.splitter(path, <span class="string">"/"</span>) |&gt; Enum.drop(<span class="number">1</span>) |&gt; Enum.join(<span class="string">"/"</span>) <span class="keyword">end</span>),</span><br><span class="line">    <span class="string">"regex"</span> =&gt; Bench.times(<span class="keyword">fn</span> -&gt; String.replace(path, subdomain_rx, <span class="string">""</span>) <span class="keyword">end</span>),</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># match end of string string</span></span><br><span class="line">Bench.run(<span class="keyword">fn</span> -&gt;</span><br><span class="line">  path = <span class="string">"/haha/index.html"</span></span><br><span class="line"></span><br><span class="line">  ext_rx = ~r/\.[^\.]+<span class="variable">$/</span></span><br><span class="line"></span><br><span class="line">  Benchee.run(%&#123;</span><br><span class="line">    <span class="string">"reverse_pattern_match_bytes"</span> =&gt; Bench.times(<span class="keyword">fn</span> -&gt;</span><br><span class="line">      len = byte_size(<span class="string">".html"</span>)</span><br><span class="line">      &lt;&lt;<span class="symbol">_:</span><span class="symbol">:bytes-size</span>(len), rest <span class="symbol">:</span>: binary &gt;&gt; = String.reverse(path)</span><br><span class="line">      rest |&gt; String.reverse</span><br><span class="line">    <span class="keyword">end</span>),</span><br><span class="line">    <span class="string">"reverse_pattern_match"</span> =&gt; Bench.times(<span class="keyword">fn</span> -&gt; <span class="string">"lmth."</span> &lt;&gt; rest = String.reverse(path); String.reverse(rest) <span class="keyword">end</span>),</span><br><span class="line">    <span class="string">"slice"</span> =&gt; Bench.times(<span class="keyword">fn</span> -&gt; String.slice(path, <span class="number">0</span>..(String.length(<span class="string">".html"</span>) * (-<span class="number">1</span>))) <span class="keyword">end</span>),</span><br><span class="line">    <span class="string">"replace_suffix"</span> =&gt; Bench.times(<span class="keyword">fn</span> -&gt; String.replace_suffix(path, <span class="string">".html"</span>, <span class="string">""</span>) <span class="keyword">end</span>),</span><br><span class="line">    <span class="string">"split"</span> =&gt; Bench.times(<span class="keyword">fn</span> -&gt; String.splitter(path, <span class="string">"."</span>) |&gt; Enum.slice(<span class="number">0</span>..-<span class="number">2</span>) |&gt; Enum.join(<span class="string">"."</span>) <span class="keyword">end</span>),</span><br><span class="line">    <span class="string">"regex"</span> =&gt; Bench.times(<span class="keyword">fn</span> -&gt; String.replace(path, ext_rx, <span class="string">""</span>) <span class="keyword">end</span>),</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="keyword">end</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">elixir_benchmarks [master *] $ mix run lib/bench.exs</span><br><span class="line"></span><br><span class="line">  Operating System: Linux</span><br><span class="line">  CPU Information: Intel(R) Core(TM) i7-4700MQ CPU @ 2.40GHz</span><br><span class="line">  Number of Available Cores: 8</span><br><span class="line">  Available memory: 12.019316 GB</span><br><span class="line">  Elixir 1.4.4</span><br><span class="line">  Erlang 20.0-rc2</span><br><span class="line">  Benchmark suite executing with the following configuration:</span><br><span class="line">  warmup: 2.00 s</span><br><span class="line">  time: 5.00 s</span><br><span class="line">  parallel: 1</span><br><span class="line">  inputs: none specified</span><br><span class="line">  Estimated total run time: 42.00 s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Benchmarking pattern_match...</span><br><span class="line">  Benchmarking pattern_match_bytes...</span><br><span class="line">  Benchmarking regex...</span><br><span class="line">  Benchmarking replace_prefix...</span><br><span class="line">  Benchmarking slice...</span><br><span class="line">  Benchmarking split...</span><br><span class="line"></span><br><span class="line">  Name                          ips        average  deviation         median</span><br><span class="line">  pattern_match_bytes       15.17 K      0.0659 ms    ±18.05%      0.0610 ms</span><br><span class="line">  pattern_match             14.60 K      0.0685 ms    ±17.41%      0.0640 ms</span><br><span class="line">  replace_prefix             2.52 K        0.40 ms    ±21.46%        0.38 ms</span><br><span class="line">  slice                      0.83 K        1.20 ms    ±21.95%        1.11 ms</span><br><span class="line">  split                      0.58 K        1.72 ms    ±16.76%        1.63 ms</span><br><span class="line">  regex                      0.45 K        2.24 ms     ±7.42%        2.22 ms</span><br><span class="line"></span><br><span class="line">  Comparison:</span><br><span class="line">  pattern_match_bytes       15.17 K</span><br><span class="line">  pattern_match             14.60 K - 1.04x slower</span><br><span class="line">  replace_prefix             2.52 K - 6.01x slower</span><br><span class="line">  slice                      0.83 K - 18.24x slower</span><br><span class="line">  split                      0.58 K - 26.10x slower</span><br><span class="line">  regex                      0.45 K - 33.98x slower</span><br><span class="line">  Operating System: Linux</span><br><span class="line">  CPU Information: Intel(R) Core(TM) i7-4700MQ CPU @ 2.40GHz</span><br><span class="line">  Number of Available Cores: 8</span><br><span class="line">  Available memory: 12.019316 GB</span><br><span class="line">  Elixir 1.4.4</span><br><span class="line">  Erlang 20.0-rc2</span><br><span class="line">  Benchmark suite executing with the following configuration:</span><br><span class="line">  warmup: 2.00 s</span><br><span class="line">  time: 5.00 s</span><br><span class="line">  parallel: 1</span><br><span class="line">  inputs: none specified</span><br><span class="line">  Estimated total run time: 42.00 s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Benchmarking regex...</span><br><span class="line">  Benchmarking replace_suffix...</span><br><span class="line">  Benchmarking reverse_pattern_match...</span><br><span class="line">  Benchmarking reverse_pattern_match_bytes...</span><br><span class="line">  Benchmarking slice...</span><br><span class="line">  Benchmarking split...</span><br><span class="line"></span><br><span class="line">  Name                                  ips        average  deviation         median</span><br><span class="line">  replace_suffix                    2633.75        0.38 ms    ±21.15%        0.36 ms</span><br><span class="line">  split                              618.06        1.62 ms    ±13.56%        1.57 ms</span><br><span class="line">  regex                              389.25        2.57 ms     ±6.54%        2.54 ms</span><br><span class="line">  slice                              324.19        3.08 ms    ±19.06%        2.88 ms</span><br><span class="line">  reverse_pattern_match_bytes        275.45        3.63 ms    ±12.08%        3.48 ms</span><br><span class="line">  reverse_pattern_match              272.06        3.68 ms    ±11.99%        3.54 ms</span><br><span class="line"></span><br><span class="line">  Comparison:</span><br><span class="line">  replace_suffix                    2633.75</span><br><span class="line">  split                              618.06 - 4.26x slower</span><br><span class="line">  regex                              389.25 - 6.77x slower</span><br><span class="line">  slice                              324.19 - 8.12x slower</span><br><span class="line">  reverse_pattern_match_bytes        275.45 - 9.56x slower</span><br><span class="line">  reverse_pattern_match              272.06 - 9.68x slower</span><br><span class="line">  elixir_benchmarks [master *] $</span><br></pre></td></tr></table></figure><p>For reverse string removal from the end, <code>replace_suffix</code> is the fastest which makes sense.However, for removing the prefix, <code>pattern_match_bytes</code> seems to be the fastest. But, it isn’t really truly correct. Because in my instance, I know for sure that the prefix is present.So, the second best performance for which is <code>pattern_match</code> is 6x better than the current <code>String.replace_prefix</code> implementation.</p><p>It may be because I am using OTP 20? I’ll run this on other versions of OTP to compare results. And, if the results are cosistent, will create PR on elixir to change the default implementation.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I had to do some string stripping in one of my apps which was a bit performance sensitive.
I ended up benching multiple approaches to see
      
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="Bench" scheme="http://minhajuddin.com/tags/bench/"/>
    
      <category term="Perf" scheme="http://minhajuddin.com/tags/perf/"/>
    
      <category term="String" scheme="http://minhajuddin.com/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>Optimal order for adding lists in Elixir</title>
    <link href="http://minhajuddin.com/2017/06/08/optimal-order-for-adding-lists-in-elixir/"/>
    <id>http://minhajuddin.com/2017/06/08/optimal-order-for-adding-lists-in-elixir/</id>
    <published>2017-06-08T00:41:50.000Z</published>
    <updated>2018-05-09T10:16:51.929Z</updated>
    
    <content type="html"><![CDATA[<p>Lists are the bread and butter of a functional language and Elixir is no different.</p><p>Elixir uses linked lists to represent lists. Which means, if a list is <code>n</code> elements long it willtake <code>n</code> dereferences to get to the last element of the list. This understanding is very importantfor writing efficient code in Elixir. Because of this adding to the head of a list is nearly instantaneous.</p><h2 id="Adding-to-the-beginning-of-a-list"><a href="#Adding-to-the-beginning-of-a-list" class="headerlink" title="Adding to the beginning of a list"></a>Adding to the beginning of a list</h2><p>Let us take the following list as an example:</p><pre><code>el1 -&gt; el2 -&gt; el3 -&gt; el4</code></pre><p>It has 4 elements and <code>el1</code> is the head of the list. To add a new element <code>el0</code>to the beginning of the list, All you need to do is create a node to store <code>el0</code>and set its <code>next</code> pointer to <code>el1</code>. This changes the representation to:</p><pre><code>el0 -&gt; el1 -&gt; el2 -&gt; el3 -&gt; el4</code></pre><p>Now, one thing to note is: if a previous variable has a reference to <code>el1</code> it willstill have a reference to the earlier 4 element list. So, we are not <em>mutating/chaning</em> the existing list/references.</p><h2 id="Adding-to-the-end-of-a-list"><a href="#Adding-to-the-end-of-a-list" class="headerlink" title="Adding to the end of a list"></a>Adding to the end of a list</h2><p>However, adding something to the end is not the same. Let us take the previous example:</p><pre><code>el1 -&gt; el2 -&gt; el3 -&gt; el4</code></pre><p>Now, if this list is referenced by a binding <code>foo</code>. And if we want to create a new list <code>bar</code> with a new element <code>el5</code> at the end.We can’t just traverse the list, create a new node with value <code>el5</code> and set a reference from <code>el4</code> to <code>el5</code>.If we did that, the reference <code>foo</code> would also get a new element at the end. And this is not how Elixir/Erlang work. The BEAMdoes not allow mutation to existing data. So, to work within this framework, we have to create a <em>brand new</em> list containinga copy of all elements <code>el1..el4</code> and a new node <code>el5</code>. That is why adding elements to the tail of a linked list is slow in Elixir.Because we end up copying the list and appending a new element.</p><p>Now, with this understanding. Let us think of the most efficient way of combining two lists when the order of elements doesn’t matter.For instance, when you send http requests using <code>httpoison</code> the order of the headers doesn’t matter.So, when you have the following implementations available:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A: First list is small most of the time</span></span><br><span class="line"><span class="variable">@default_headers</span> [&#123;<span class="string">"content-type"</span>, <span class="string">"application/json"</span>&#125;, &#123;<span class="string">"authorization"</span>, <span class="string">"Bearer Foo"</span>&#125;, &#123;<span class="string">"accept"</span>, <span class="string">"application/json"</span>&#125;]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span></span>(url, headers \\ []) <span class="keyword">do</span></span><br><span class="line">  headers ++ <span class="variable">@default_headers</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># B: Second list is small most of the time</span></span><br><span class="line"><span class="variable">@default_headers</span> [&#123;<span class="string">"content-type"</span>, <span class="string">"application/json"</span>&#125;, &#123;<span class="string">"authorization"</span>, <span class="string">"Bearer Foo"</span>&#125;, &#123;<span class="string">"accept"</span>, <span class="string">"application/json"</span>&#125;]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span></span>(url, headers \\ []) <span class="keyword">do</span></span><br><span class="line">  <span class="variable">@default_headers</span> ++ headers</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure><p>Pick the one where the first list has lesser elements. In this example that would be the <strong>A</strong> implementation.</p><p>I did a quick benchmark just for kicks (Full code available at <a href="https://github.com/minhajuddin/bench_list_cat)" target="_blank" rel="noopener">https://github.com/minhajuddin/bench_list_cat)</a>:</p><h2 id="Benchmark"><a href="#Benchmark" class="headerlink" title="Benchmark"></a>Benchmark</h2><pre><code>Elixir 1.4.4Erlang 20.0-rc2Benchmark suite executing with the following configuration:warmup: 2.00 stime: 5.00 sparallel: 1inputs: none specifiedEstimated total run time: 14.00 sBenchmarking big_list_first...Benchmarking small_list_first...Name                       ips        average  deviation         mediansmall_list_first        6.49 K       0.154 ms   ±371.63%      0.0560 msbig_list_first       0.00313 K      319.87 ms    ±37.78%      326.10 msComparison:small_list_first        6.49 Kbig_list_first       0.00313 K - 2077.49x slower</code></pre><h2 id="Code-used-for-benchmarking"><a href="#Code-used-for-benchmarking" class="headerlink" title="Code used for benchmarking"></a>Code used for benchmarking</h2><pre><code>small_list = Enum.to_list(1..10_000)big_list = Enum.to_list(1..10_000_000)Benchee.run(%{  &quot;small_list_first&quot; =&gt; fn -&gt; small_list ++ big_list end,  &quot;big_list_first&quot; =&gt; fn -&gt; big_list ++ small_list end})</code></pre><h2 id="Note-that-this-is-an-outrageous-benchmark-no-one-is-adding-lists-containing-10-million-elements-this-way-But-it-demonstrates-my-point"><a href="#Note-that-this-is-an-outrageous-benchmark-no-one-is-adding-lists-containing-10-million-elements-this-way-But-it-demonstrates-my-point" class="headerlink" title="Note that this is an outrageous benchmark, no one is adding lists containing 10 million elements this way ;). But it demonstrates my point."></a>Note that this is an outrageous benchmark, no one is adding lists containing 10 million elements this way ;). But it demonstrates my point.</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Lists are the bread and butter of a functional language and Elixir is no different.&lt;/p&gt;
&lt;p&gt;Elixir uses linked lists to represent lists. W
      
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="Lists" scheme="http://minhajuddin.com/tags/lists/"/>
    
      <category term="Order" scheme="http://minhajuddin.com/tags/order/"/>
    
      <category term="Concatenate" scheme="http://minhajuddin.com/tags/concatenate/"/>
    
  </entry>
  
  <entry>
    <title>How to pass a multi line copy sql to psql</title>
    <link href="http://minhajuddin.com/2017/05/18/how-to-pass-a-multi-line-copy-sql-to-psql/"/>
    <id>http://minhajuddin.com/2017/05/18/how-to-pass-a-multi-line-copy-sql-to-psql/</id>
    <published>2017-05-18T14:56:01.000Z</published>
    <updated>2018-05-09T10:16:51.925Z</updated>
    
    <content type="html"><![CDATA[<p>I have been working with a lot of ETL stuff lately and have to import/export datafrom our postgresql database frequently.</p><p>While writing a script recently, I found that psql doesn’t allow using the <code>\COPY</code>directive with a multi line SQL when it is passed to the <code>psql</code> command.The only workaround seemed to be squishing the sql into a single line.However, this makes it very difficult to read and modify the SQL. This is when bash came to my rescue :)</p><p>Here is a hacky way to do use multiline SQL with <code>\COPY</code>.</p><p>This just strips the newlines before sending it to psql. Have your cake and eat it too :)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Using a file</span></span><br><span class="line">psql -f &lt;(tr -d <span class="string">'\n'</span> &lt; ~/s/test.sql )</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">psql &lt; &lt;(tr -d <span class="string">'\n'</span> &lt; ~/s/test.sql )</span><br><span class="line"></span><br><span class="line"><span class="comment"># Putting the SQL using a HEREDOC</span></span><br><span class="line">cat &lt;&lt;SQL | tr -d <span class="string">'\n'</span>  | \psql mydatabase</span><br><span class="line">\COPY (</span><br><span class="line">  SELECT</span><br><span class="line">    provider_id,</span><br><span class="line">    provider_name,</span><br><span class="line">    ...</span><br><span class="line">) TO <span class="string">'./out.tsv'</span> WITH( DELIMITER E<span class="string">'\t'</span>, NULL <span class="string">''</span>, )</span><br><span class="line">SQL</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I have been working with a lot of ETL stuff lately and have to import/export data
from our postgresql database frequently.&lt;/p&gt;
&lt;p&gt;While w
      
    
    </summary>
    
    
      <category term="psql" scheme="http://minhajuddin.com/tags/psql/"/>
    
      <category term="Postgresql" scheme="http://minhajuddin.com/tags/postgresql/"/>
    
      <category term="Copy" scheme="http://minhajuddin.com/tags/copy/"/>
    
  </entry>
  
  <entry>
    <title>How to debug/view phoenix channel network traffic in Google Chrome</title>
    <link href="http://minhajuddin.com/2017/03/12/how-to-debug-view-phoenix-channel-network-traffic-in-google-chrome/"/>
    <id>http://minhajuddin.com/2017/03/12/how-to-debug-view-phoenix-channel-network-traffic-in-google-chrome/</id>
    <published>2017-03-12T21:46:40.000Z</published>
    <updated>2018-05-09T10:16:51.925Z</updated>
    
    <content type="html"><![CDATA[<p>When you open Google Chrome’s Network tab, you don’t see the traffic for websockets.I spent quite some time trying to see the messages between my browser and the phoenix server.I was expecting to see a lot of rows in the network tab one for every message.</p><p>However, since websockets don’t follow a request-response pattern. They are shown in a different tab.To see the messages sent on the websocket. Click on your Network tab and then click on the websocket request.This should show you a pane with a <strong>Frames</strong> tab. This <strong>Frames</strong> tab should show you all the messages that are being sent back and forth on the websocket.</p><p>Here is a screenshot:<img src="/2017/03/12/how-to-debug-view-phoenix-channel-network-traffic-in-google-chrome/websockets-frames.png" title="Network Websocket Frames tab"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;When you open Google Chrome’s Network tab, you don’t see the traffic for websockets.
I spent quite some time trying to see the messages b
      
    
    </summary>
    
    
      <category term="Debug" scheme="http://minhajuddin.com/tags/debug/"/>
    
      <category term="Phoenix" scheme="http://minhajuddin.com/tags/phoenix/"/>
    
      <category term="Network" scheme="http://minhajuddin.com/tags/network/"/>
    
      <category term="Google Chrome" scheme="http://minhajuddin.com/tags/google-chrome/"/>
    
  </entry>
  
  <entry>
    <title>3 things that are needed to make a successful product</title>
    <link href="http://minhajuddin.com/2017/03/11/3-things-that-are-needed-to-make-a-successful-product/"/>
    <id>http://minhajuddin.com/2017/03/11/3-things-that-are-needed-to-make-a-successful-product/</id>
    <published>2017-03-11T21:00:11.000Z</published>
    <updated>2018-05-09T10:16:51.917Z</updated>
    
    <content type="html"><![CDATA[<p>In my 10 years in the software industry. I have create a number of products and have workedon a lot of projects. Looking back at the products/projects that have been successful, one thisstands out. There are 3 critical pieces for a software product / startup.</p><h3 id="0-A-value-proposition"><a href="#0-A-value-proposition" class="headerlink" title="0. A value proposition"></a>0. A value proposition</h3><p>This is a dead giveaway. So, I haven’t even counted this. Without a value proposition you don’t have anything. Your productmust provide value to your customers.</p><h3 id="1-Domain-knowledge"><a href="#1-Domain-knowledge" class="headerlink" title="1. Domain knowledge"></a>1. Domain knowledge</h3><p>You need to have someone on your team with the knowledge of the domain. Ideally you would havecome up with a product idea because of a good understanding of the pain points. And of the thingsthat can provide value. This is also fairly easy to understand.</p><h3 id="2-Marketing-Strength"><a href="#2-Marketing-Strength" class="headerlink" title="2. Marketing Strength"></a>2. Marketing Strength</h3><p>You also need to have someone who can market your product. An awesome product without marketing is a dead product.You need to either build your marketing expertise or get someone who is good at it.</p><p>Marketing is one of the things that is often overlooked. People think that if the product is good people will buy it.This is completely false. You need a lot of hustle to market your product.</p><h3 id="3-Technical-expertise"><a href="#3-Technical-expertise" class="headerlink" title="3. Technical expertise"></a>3. Technical expertise</h3><p>You obviously need someone who can build a usable product which provides value.But this is the last on the list.</p><p>Many people come to me with ideas for startups. I always tell them about these 3 things.The next time you want to build a startup, think about these skills. Without one of these you are dead in the water.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In my 10 years in the software industry. I have create a number of products and have worked
on a lot of projects. Looking back at the pro
      
    
    </summary>
    
    
      <category term="Startup" scheme="http://minhajuddin.com/tags/startup/"/>
    
      <category term="Product" scheme="http://minhajuddin.com/tags/product/"/>
    
  </entry>
  
  <entry>
    <title>Getting started with Elm</title>
    <link href="http://minhajuddin.com/2017/02/13/getting-started-with-elm/"/>
    <id>http://minhajuddin.com/2017/02/13/getting-started-with-elm/</id>
    <published>2017-02-13T14:00:17.000Z</published>
    <updated>2018-05-09T10:16:51.921Z</updated>
    
    <content type="html"><![CDATA[<p>I had a good time presenting a talk about “Getting Started with Elm” at the awesome <a href="https://www.meetup.com/nghyderabad/events/237337105/" target="_blank" rel="noopener">nghyderabad</a>The audience was very interactive and the food was great. Shout out to <a href="http://www.fissionlabs.com/" target="_blank" rel="noopener">Fission Labs</a> for the awesome venue!</p><p>Here are a few useful links which should help you learn Elm</p><ol><li>elm-lang home page: <a href="http://elm-lang.org/" target="_blank" rel="noopener">http://elm-lang.org/</a></li><li>docs: <a href="http://elm-lang.org/docs" target="_blank" rel="noopener">http://elm-lang.org/docs</a></li><li>examples: <a href="http://elm-lang.org/examples" target="_blank" rel="noopener">http://elm-lang.org/examples</a></li><li>A handy online book: <a href="https://guide.elm-lang.org/" target="_blank" rel="noopener">https://guide.elm-lang.org/</a></li><li>Online editor: <a href="http://elm-lang.org/try" target="_blank" rel="noopener">http://elm-lang.org/try</a></li><li>Elm packages website: <a href="http://package.elm-lang.org/" target="_blank" rel="noopener">http://package.elm-lang.org/</a></li></ol><p>Code for the app that we built: <a href="https://github.com/minhajuddin/getting-started-with-elm/blob/master/Counter.elm" target="_blank" rel="noopener">https://github.com/minhajuddin/getting-started-with-elm/blob/master/Counter.elm</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I had a good time presenting a talk about “Getting Started with Elm” at the awesome &lt;a href=&quot;https://www.meetup.com/nghyderabad/events/23
      
    
    </summary>
    
    
      <category term="Elm" scheme="http://minhajuddin.com/tags/elm/"/>
    
      <category term="Meetup" scheme="http://minhajuddin.com/tags/meetup/"/>
    
      <category term="Presentation" scheme="http://minhajuddin.com/tags/presentation/"/>
    
  </entry>
  
  <entry>
    <title>How to fix Ecto duplicate name migrations error</title>
    <link href="http://minhajuddin.com/2017/02/09/how-to-fix-ecto-duplicate-name-migrations-error/"/>
    <id>http://minhajuddin.com/2017/02/09/how-to-fix-ecto-duplicate-name-migrations-error/</id>
    <published>2017-02-09T18:36:37.000Z</published>
    <updated>2018-05-09T10:16:51.925Z</updated>
    
    <content type="html"><![CDATA[<p>If you run into the following error while running your Ecto migrations</p><pre><code>ReleaseTasks.migrate** (Ecto.MigrationError) migrations can&apos;t be executed, migration name foo_bar is duplicated   (ecto) lib/ecto/migrator.ex:259: Ecto.Migrator.ensure_no_duplication/1   (ecto) lib/ecto/migrator.ex:235: Ecto.Migrator.migrate/4</code></pre><p>You can fix it by running 1 migration at a time</p><pre><code>mix ecto.migrate --step 1</code></pre><p>This happens when you are trying to run two migrations with the same name (regardless of the timestamps).By restricting it to run 1 migration at a time you won’t run into this issue.</p><p>Ideally you should not have 2 migrations with the same name :)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;If you run into the following error while running your Ecto migrations&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ReleaseTasks.migrate
** (Ecto.MigrationError) migra
      
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="Ecto" scheme="http://minhajuddin.com/tags/ecto/"/>
    
      <category term="Migration" scheme="http://minhajuddin.com/tags/migration/"/>
    
      <category term="Error" scheme="http://minhajuddin.com/tags/error/"/>
    
  </entry>
  
  <entry>
    <title>Lightweight xml utility to pluck elements</title>
    <link href="http://minhajuddin.com/2017/02/02/lightweight-xml-utility-to-pluck-elements/"/>
    <id>http://minhajuddin.com/2017/02/02/lightweight-xml-utility-to-pluck-elements/</id>
    <published>2017-02-02T16:14:42.000Z</published>
    <updated>2018-05-09T10:16:51.929Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://stedolan.github.io/jq/" target="_blank" rel="noopener">jq</a> is an awesome utility for parsing and transforming json via the command line. I wanted something similar for xml.The following is a short ruby script which does a tiny tiny (did I say tiny?) bit of what jq does for xml. Hope you find it useful.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line"><span class="comment"># Author: Khaja Minhajuddin</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'nokogiri'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'parallel'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'etc'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ARGV.count &lt; <span class="number">2</span></span><br><span class="line">  puts <span class="string">&lt;&lt;-EOS</span></span><br><span class="line"><span class="string">  Usage:</span></span><br><span class="line"><span class="string">    xml_pluck xpath file1.xml file2.xml</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  e.g.</span></span><br><span class="line"><span class="string">    xml_pluck "//children/name/text()" &lt;(echo '&lt;?xml version="1.0"?&gt;&lt;children&gt;&lt;name&gt;Zainab&lt;/name&gt;&lt;name&gt;Mujju&lt;/name&gt;&lt;/children&gt;')</span></span><br><span class="line"><span class="string">    # prints</span></span><br><span class="line"><span class="string">    Zainab</span></span><br><span class="line">    Mujju</span><br><span class="line">  EOS</span><br><span class="line">  exit -<span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">xpath = ARGV.shift</span><br><span class="line">Parallel.each(ARGV, <span class="symbol">in_processes:</span> Etc.nprocessors) <span class="keyword">do</span> <span class="params">|file|</span></span><br><span class="line">  doc = Nokogiri::XML(File.read(file))</span><br><span class="line">  puts doc.xpath(xpath)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://stedolan.github.io/jq/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;jq&lt;/a&gt; is an awesome utility for parsing and transforming json vi
      
    
    </summary>
    
    
      <category term="Ruby" scheme="http://minhajuddin.com/tags/ruby/"/>
    
      <category term="Xml Pluck" scheme="http://minhajuddin.com/tags/xml-pluck/"/>
    
  </entry>
  
  <entry>
    <title>Key transformation after decoding json in Elixir</title>
    <link href="http://minhajuddin.com/2017/01/24/key-transformation-after-decoding-json-in-elixir/"/>
    <id>http://minhajuddin.com/2017/01/24/key-transformation-after-decoding-json-in-elixir/</id>
    <published>2017-01-24T13:36:26.000Z</published>
    <updated>2018-05-09T10:16:51.929Z</updated>
    
    <content type="html"><![CDATA[<p>In a previous blog post we saw how to do <a href="http://minhajuddin.com/2017/01/11/case-insensitive-key-retrieval-from-maps-in-elixir/">case insensitive retrieval from maps</a>.A better solution for this if there are many key lookups is to transform the input by lower casing all the keys just after decoding. The solution from the blog post would iterate over each <code>{key, value}</code> pair till it found the desired key.However a proper map lookup doesn’t iterate over the keys but uses a hashing algorithm to get to the key’s location in constant time regardless of the size of the map.</p><p>Anyway, Here is the solution to transform each key for input JSON. Hope you find it useful :)</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">KeyTransformer</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">lower_case_keys</span></span>(input) <span class="keyword">do</span></span><br><span class="line">    transform_keys(input, &amp;String.downcase/<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">transform_keys</span></span>(input, tx_key_fun) <span class="keyword">when</span> is_list(input) <span class="keyword">do</span></span><br><span class="line">    Enum.map(input, <span class="keyword">fn</span> el -&gt; transform_keys(el, tx_key_fun) <span class="keyword">end</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">transform_keys</span></span>(input, tx_key_fun) <span class="keyword">when</span> is_map(input) <span class="keyword">do</span></span><br><span class="line">    Enum.reduce(input, %&#123;&#125;, <span class="keyword">fn</span> &#123;k, v&#125;, acc -&gt;</span><br><span class="line">      Map.put(acc, tx_key_fun.(k), transform_keys(v, tx_key_fun))</span><br><span class="line">    <span class="keyword">end</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">transform_keys</span></span>(value, _tx_key_fun), <span class="symbol">do:</span> value</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">ExUnit.start</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">KeyTransformerTest</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">use</span> ExUnit.Case</span><br><span class="line">  import KeyTransformer</span><br><span class="line"></span><br><span class="line">  test <span class="string">"simple map"</span> <span class="keyword">do</span></span><br><span class="line">    assert lower_case_keys(%&#123;<span class="string">"NAME"</span> =&gt; <span class="string">"Khaja"</span>&#125;) == %&#123;<span class="string">"name"</span> =&gt; <span class="string">"Khaja"</span>&#125;</span><br><span class="line">    assert lower_case_keys(%&#123;<span class="string">"NAME"</span> =&gt; <span class="string">"Khaja"</span>, <span class="string">"Age"</span> =&gt; <span class="number">3</span>&#125;) == %&#123;<span class="string">"name"</span> =&gt; <span class="string">"Khaja"</span>, <span class="string">"age"</span> =&gt; <span class="number">3</span>&#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  test <span class="string">"nested map"</span> <span class="keyword">do</span></span><br><span class="line">    assert lower_case_keys(%&#123;<span class="string">"Mujju"</span> =&gt; %&#123;<span class="string">"NAME"</span> =&gt; <span class="string">"Khaja"</span>&#125;&#125;) == %&#123;<span class="string">"mujju"</span> =&gt; %&#123;<span class="string">"name"</span> =&gt; <span class="string">"Khaja"</span>&#125;&#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  test <span class="string">"deeply nested map"</span> <span class="keyword">do</span></span><br><span class="line">    assert lower_case_keys(%&#123;<span class="string">"Children"</span> =&gt; %&#123;<span class="string">"Mujju"</span> =&gt; %&#123;<span class="string">"NAME"</span> =&gt; <span class="string">"Khaja"</span>&#125;&#125;&#125;) == %&#123;<span class="string">"children"</span> =&gt; %&#123;<span class="string">"mujju"</span> =&gt; %&#123;<span class="string">"name"</span> =&gt; <span class="string">"Khaja"</span>&#125;&#125;&#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  test <span class="string">"list of maps"</span> <span class="keyword">do</span></span><br><span class="line">    assert lower_case_keys([%&#123;<span class="string">"NAME"</span> =&gt; <span class="string">"Zainu"</span>&#125;]) == [%&#123;<span class="string">"name"</span> =&gt; <span class="string">"Zainu"</span>&#125;]</span><br><span class="line"></span><br><span class="line">    assert lower_case_keys([%&#123;</span><br><span class="line">            <span class="string">"NAME"</span> =&gt; <span class="string">"Khaja Muzaffaruddin"</span>,</span><br><span class="line">            <span class="string">"agE"</span> =&gt; <span class="number">2</span>,</span><br><span class="line">          &#125;, %&#123;&#125;]) == [%&#123;<span class="string">"age"</span> =&gt; <span class="number">2</span>, <span class="string">"name"</span> =&gt; <span class="string">"Khaja Muzaffaruddin"</span>&#125;, %&#123;&#125;]</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  test <span class="string">"nested list of maps"</span> <span class="keyword">do</span></span><br><span class="line">    assert lower_case_keys(%&#123;</span><br><span class="line">                             <span class="string">"JUlian"</span> =&gt; [%&#123;<span class="string">"Movie"</span> =&gt; <span class="string">"Madagascar"</span>&#125;]</span><br><span class="line">                           &#125;) == %&#123;<span class="string">"julian"</span> =&gt; [%&#123;<span class="string">"movie"</span> =&gt; <span class="string">"Madagascar"</span>&#125;]&#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  test <span class="string">"deeply nested list of maps"</span> <span class="keyword">do</span></span><br><span class="line">    assert lower_case_keys(%&#123;<span class="string">"MovieGenres"</span> =&gt; [%&#123;</span><br><span class="line">                             <span class="string">"JUlian"</span> =&gt; [%&#123;<span class="string">"Movie"</span> =&gt; <span class="string">"Madagascar"</span>&#125;]</span><br><span class="line">                           &#125;, %&#123;<span class="string">"Ho"</span> =&gt; <span class="number">33</span>&#125;], <span class="string">"OK then"</span> =&gt; <span class="string">"little story"</span>&#125;) == %&#123;</span><br><span class="line">    <span class="string">"moviegenres"</span> =&gt; [%&#123;<span class="string">"julian"</span> =&gt; [%&#123;<span class="string">"movie"</span> =&gt; <span class="string">"Madagascar"</span>&#125;]&#125;, %&#123;<span class="string">"ho"</span> =&gt; <span class="number">33</span>&#125;], <span class="string">"ok then"</span> =&gt; <span class="string">"little story"</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In a previous blog post we saw how to do &lt;a href=&quot;http://minhajuddin.com/2017/01/11/case-insensitive-key-retrieval-from-maps-in-elixir/&quot;&gt;
      
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="Map" scheme="http://minhajuddin.com/tags/map/"/>
    
      <category term="JSON" scheme="http://minhajuddin.com/tags/json/"/>
    
      <category term="Key Transform" scheme="http://minhajuddin.com/tags/key-transform/"/>
    
  </entry>
  
  <entry>
    <title>How to learn vim properly</title>
    <link href="http://minhajuddin.com/2017/01/19/how-to-learn-vim-properly/"/>
    <id>http://minhajuddin.com/2017/01/19/how-to-learn-vim-properly/</id>
    <published>2017-01-19T00:16:17.000Z</published>
    <updated>2018-05-09T10:16:51.925Z</updated>
    
    <content type="html"><![CDATA[<p>Vim is the editor of my choice, I love it a lot. I try to find vim bindings everywhere I can,A few apps which have good vim bindings</p><ol><li>Chrome with vimium</li><li><p>The terminal with a proper <code>~/.inputrc</code>. My <code>~/.inputrc</code> below</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ~/.inputrc</span></span><br><span class="line"><span class="comment">#vim key bindings</span></span><br><span class="line"><span class="built_in">set</span> editing-mode vi</span><br><span class="line"><span class="built_in">set</span> keymap vi</span><br><span class="line"><span class="comment"># do not bell on tab-completion</span></span><br><span class="line"><span class="built_in">set</span> bell-style bell</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> expand-tilde off</span><br><span class="line"><span class="built_in">set</span> input-meta off</span><br><span class="line"><span class="built_in">set</span> convert-meta on</span><br><span class="line"><span class="built_in">set</span> output-meta off</span><br><span class="line"><span class="built_in">set</span> horizontal-scroll-mode off</span><br><span class="line"><span class="built_in">set</span> <span class="built_in">history</span>-preserve-point on</span><br><span class="line"><span class="built_in">set</span> mark-directories on</span><br><span class="line"><span class="built_in">set</span> mark-symlinked-directories on</span><br><span class="line"><span class="built_in">set</span> match-hidden-files off</span><br><span class="line"></span><br><span class="line"><span class="comment"># completion settings</span></span><br><span class="line"><span class="built_in">set</span> page-completions off</span><br><span class="line"><span class="built_in">set</span> completion-query-items 2000</span><br><span class="line"><span class="built_in">set</span> completion-ignore-case off</span><br><span class="line"><span class="built_in">set</span> show-all-if-ambiguous on</span><br><span class="line"><span class="built_in">set</span> show-all-if-unmodified on</span><br><span class="line"><span class="built_in">set</span> completion-prefix-display-length 10</span><br><span class="line"><span class="built_in">set</span> <span class="built_in">print</span>-completions-horizontally off</span><br><span class="line"></span><br><span class="line">C-n: <span class="built_in">history</span>-search-forward</span><br><span class="line">C-p: <span class="built_in">history</span>-search-backward</span><br><span class="line"></span><br><span class="line"><span class="comment">#new stuff</span></span><br><span class="line"><span class="string">"\C-a"</span>: <span class="built_in">history</span>-search-forward</span><br></pre></td></tr></table></figure></li><li><p>Once you set this up, many repls will respect these bindings. For instance irb, pry respect these. As a matter of fact any good terminal app which use the <code>readline</code> library will respect this.</p></li><li>Tmux is another software that has vim bindings</li></ol><p>So, whenever I work with someone people always seem to be impressed that vim can do so much so simply.This is really the power of vim, vim was built for text editing and it is the best for this job. However, learning it can be quite painful and many people will abandon learning it in a few days.</p><p>There is a very popular learning curve graph about vim</p><img src="/2017/01/19/how-to-learn-vim-properly/editor-learning-curve.png" title="Editor learning curves"><p><a href="https://blogs.msdn.microsoft.com/steverowe/2004/11/17/code-editor-learning-curves/" target="_blank" rel="noopener">Source</a></p><p>The part about vim is partially true, in that once it <em>clicks</em> everything falls into place.</p><p>Notepad is an editor which is very easy to use, but if you compare it to programming languages it has the capability of a calculator. You put your cursor in a place type stuff and that is all.<strong>Vim lets you speak to it, in an intelligent way</strong> Anyway, I am rambling at this point.</p><p>The reason I am writing this blog post in the middle of the night is because many people ask me “How should I setup vim?”, I’d love to have it look/work like yours.And many times I <a href="https://github.com/minhajuddin/vimrc/blob/master/vimrc" target="_blank" rel="noopener">point them to my vimrc</a>.However, if you are planning on learning vim, don’t go there. Start with the following <code>~/.vimrc</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">set nocompatible</span><br><span class="line"></span><br><span class="line">&quot; plugins</span><br><span class="line">call plug#begin(&apos;~/.vim/plugged&apos;)</span><br><span class="line">Plug &apos;tpope/vim-sensible&apos;</span><br><span class="line">Plug &apos;kien/ctrlp.vim&apos;</span><br><span class="line">Plug &apos;matchit.zip&apos;</span><br><span class="line">runtime macros/matchit.vim</span><br><span class="line">call plug#end()</span><br><span class="line"></span><br><span class="line">&quot; Ctrlp.vim</span><br><span class="line">let g:ctrlp_map = &apos;&lt;c-p&gt;&apos;</span><br><span class="line">let g:ctrlp_cmd = &apos;CtrlP&apos;</span><br><span class="line">let g:ctrlp_working_path_mode = &apos;ra&apos;</span><br><span class="line">let g:ctrlp_custom_ignore = &#123;</span><br><span class="line">  \ &apos;dir&apos;:  &apos;\v[\/]\.(git|hg|svn)$&apos;,</span><br><span class="line">  \ &apos;file&apos;: &apos;\v\.(exe|so|dll)$&apos;,</span><br><span class="line">  \ &apos;link&apos;: &apos;some_bad_symbolic_links&apos;,</span><br><span class="line">  \ &#125;</span><br></pre></td></tr></table></figure><p>That is all, no more no less.</p><p>To finish the installation, you need to do 2 things:</p><ol><li>Run <code>curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</code></li><li>Run <code>vim +PlugInstall</code> from your terminal</li></ol><p>A few simple tips on how to learn vim properly:</p><ol><li>Finish <code>vimtutor</code> on your terminal 3 to 4 times. Read everything 3 to 4 times and actually practice it.</li><li>Learn about vim movements, commands and modes</li><li><strong>Open your vim editor at the root of the project and have just one instance open, don’t open more than one instance per project. This is very very important. I can’t stress this enough</strong>. To open another file from your project, hit Ctrl+P</li><li>Start with a simple vimrc, The one I pasted above is a good start.</li><li>Learn about buffers / windows and tabs in vim and how to navigate them.</li><li>Add 1 extension that you think might help every month. And put a few sticky notes with its shortcuts/mappings on your monitor.</li><li>Use <a href="http://vimawesome.com/" target="_blank" rel="noopener">http://vimawesome.com/</a> to find useful plugins.</li></ol><p><strong> Most important of all: Don’t use any plugin other than sensible and CtrlP for the first month</strong></p><p>Once you learn to speak the language of vim, using other editors will make you feel dumb.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Vim is the editor of my choice, I love it a lot. I try to find vim bindings everywhere I can,
A few apps which have good vim bindings&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="Vim" scheme="http://minhajuddin.com/tags/vim/"/>
    
      <category term="Learn" scheme="http://minhajuddin.com/tags/learn/"/>
    
  </entry>
  
  <entry>
    <title>A simpler way to generate an incrementing version for elixir apps</title>
    <link href="http://minhajuddin.com/2017/01/18/a-simpler-way-to-generate-an-incrementing-version-for-elixir-apps/"/>
    <id>http://minhajuddin.com/2017/01/18/a-simpler-way-to-generate-an-incrementing-version-for-elixir-apps/</id>
    <published>2017-01-18T12:44:32.000Z</published>
    <updated>2018-05-09T10:16:51.921Z</updated>
    
    <content type="html"><![CDATA[<p>Mix has the notion of versions built into it. If you open up a mix file you’ll see a line like below:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mix.exs</span></span><br><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Webmonitor</span></span>.Mixfile <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">use</span> Mix.Project</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">project</span></span> <span class="keyword">do</span></span><br><span class="line">    [<span class="symbol">app:</span> <span class="symbol">:webmonitor</span>,</span><br><span class="line">     <span class="symbol">version:</span> <span class="string">"0.1.0"</span>,</span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure><p>If you are using Git, there is a simple way to automatically generate a meaningful semantic version.All you need to do is:</p><ol><li>Tag a commit with a version tag, like below:</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag --annotate v1.0 --message <span class="string">'First production version, Yay!'</span></span><br></pre></td></tr></table></figure><ol start="2"><li>Put a helper function which can use this info with <code>git describe</code> to generate a version</li></ol><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">defp</span> <span class="title">app_version</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="comment"># get git version</span></span><br><span class="line">  &#123;description, <span class="number">0</span>&#125; = System.cmd(<span class="string">"git"</span>, ~w[describe]) <span class="comment"># =&gt; returns something like: v1.0-231-g1c7ef8b</span></span><br><span class="line">  _git_version = String.strip(description)</span><br><span class="line">                  |&gt; String.split(<span class="string">"-"</span>)</span><br><span class="line">                  |&gt; Enum.take(<span class="number">2</span>)</span><br><span class="line">                  |&gt; Enum.join(<span class="string">"."</span>)</span><br><span class="line">                  |&gt; String.replace_leading(<span class="string">"v"</span>, <span class="string">""</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ol start="3"><li>Use the return value from this function as the version</li></ol><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mix.exs</span></span><br><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Webmonitor</span></span>.Mixfile <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">use</span> Mix.Project</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">project</span></span> <span class="keyword">do</span></span><br><span class="line">    [<span class="symbol">app:</span> <span class="symbol">:webmonitor</span>,</span><br><span class="line">     <span class="symbol">version:</span> app_version(),</span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure><p>The way this works is simple. <a href="https://git-scm.com/docs/git-describe" target="_blank" rel="noopener">From the man pages of git-describe</a></p><blockquote><p>NAME      git-describe - Describe a commit using the most recent tag reachable from it</p><p>DESCRIPTION      The command finds the most recent tag that is reachable from a commit. If the tag points to the commit, then only the tag is shown. Otherwise, it suffixes the tag name with the      number of additional commits on top of the tagged object and the abbreviated object name of the most recent commit.</p></blockquote><p>So, if you have a tag <code>v1.0</code> like above, and if you have 10 commits on top of it, <code>git-describe</code> will print <code>v1.0-100-g1c7ef8b</code> where <code>v1.0</code> is the latest git tag reachable from thecurrent commit, <code>100</code> is the number of commits since then and <code>g1c7ef8b</code> is the short commit hash of the current commit. We can easily transform this to <code>1.0.100</code> using the above helper function.Now, you have a nice way of automatically managing versions. The patch version is bumped whenever a commit is made, the major and minor version can be changed by creating a new tag, e.g. <code>v1.2</code></p><p>This is very useful when you are using <a href="https://github.com/bitwalker/distillery" target="_blank" rel="noopener">distillery</a> for building your releases</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Mix has the notion of versions built into it. If you open up a mix file you’ll see a line like below:&lt;/p&gt;
&lt;figure class=&quot;highlight elixir
      
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="Version" scheme="http://minhajuddin.com/tags/version/"/>
    
      <category term="SemVer" scheme="http://minhajuddin.com/tags/semver/"/>
    
      <category term="Automatic Generation" scheme="http://minhajuddin.com/tags/automatic-generation/"/>
    
      <category term="Hex" scheme="http://minhajuddin.com/tags/hex/"/>
    
  </entry>
  
  <entry>
    <title>Case insensitive key retrieval from maps in Elixir</title>
    <link href="http://minhajuddin.com/2017/01/11/case-insensitive-key-retrieval-from-maps-in-elixir/"/>
    <id>http://minhajuddin.com/2017/01/11/case-insensitive-key-retrieval-from-maps-in-elixir/</id>
    <published>2017-01-11T16:27:40.000Z</published>
    <updated>2018-05-09T10:16:51.921Z</updated>
    
    <content type="html"><![CDATA[<p>I ran into an issue with inconsistent naming of keys in one of my provider’s json.This is really bad data quality, the data that is being sent should have consistent key names.Either uppper, lower, or capitalized, but consistent. Anyway, this provider was sending data will all kinds of mixed case keys.</p><p>Here is some elixir code that I wrote to get keys using a case insensitive match.There is an issue on the <a href="https://github.com/devinus/poison/issues/44" target="_blank" rel="noopener">Poison decoder project</a> which should render this useless, however till that is fixed you can use the code below:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">CaseInsensitiveGetIn</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">ci_get_in</span></span>(<span class="keyword">nil</span>, <span class="number">_</span>), <span class="symbol">do:</span> <span class="keyword">nil</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">ci_get_in</span></span>(&#123;_k, val&#125;, []), <span class="symbol">do:</span> val</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">ci_get_in</span></span>(&#123;_k, val&#125;, key), <span class="symbol">do:</span> ci_get_in val, key</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">ci_get_in</span></span>(map, [key|rest]) <span class="keyword">do</span></span><br><span class="line">    current_level_map = Enum.find(map, &amp;key_lookup(&amp;<span class="number">1</span>, key))</span><br><span class="line">    ci_get_in current_level_map, rest</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">key_lookup</span></span>(&#123;k, _v&#125;, key) <span class="keyword">when</span> is_binary(k) <span class="keyword">do</span></span><br><span class="line">    String.downcase(k) == String.downcase(key)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">ExUnit.start</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">CaseInsensitiveGetInTest</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">use</span> ExUnit.Case</span><br><span class="line">  import CaseInsensitiveGetIn</span><br><span class="line"></span><br><span class="line">  test <span class="string">"gets an exact key"</span> <span class="keyword">do</span></span><br><span class="line">    assert ci_get_in(%&#123;<span class="string">"name"</span> =&gt; <span class="string">"Mujju"</span>&#125;, ~w(name)) == <span class="string">"Mujju"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  test <span class="string">"gets capitalized key in map"</span> <span class="keyword">do</span></span><br><span class="line">    assert ci_get_in(%&#123;<span class="string">"Name"</span> =&gt; <span class="string">"Mujju"</span>&#125;, ~w(name)) == <span class="string">"Mujju"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  test <span class="string">"gets capitalized input key in map"</span> <span class="keyword">do</span></span><br><span class="line">    assert ci_get_in(%&#123;<span class="string">"Name"</span> =&gt; <span class="string">"Mujju"</span>&#125;, ~w(Name)) == <span class="string">"Mujju"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  test <span class="string">"gets mixed input key in map"</span> <span class="keyword">do</span></span><br><span class="line">    assert ci_get_in(%&#123;<span class="string">"NaME"</span> =&gt; <span class="string">"Mujju"</span>&#125;, ~w(nAme)) == <span class="string">"Mujju"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  test <span class="string">"gets an exact deep key"</span> <span class="keyword">do</span></span><br><span class="line">    assert ci_get_in(%&#123;<span class="string">"name"</span> =&gt; <span class="string">"Mujju"</span>, <span class="string">"sister"</span> =&gt; %&#123;<span class="string">"name"</span> =&gt; <span class="string">"Zainu"</span>&#125;&#125;, ~w(sister name)) == <span class="string">"Zainu"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  test <span class="string">"gets an mixed case deep map key"</span> <span class="keyword">do</span></span><br><span class="line">    assert ci_get_in(%&#123;<span class="string">"name"</span> =&gt; <span class="string">"Mujju"</span>, <span class="string">"sisTER"</span> =&gt; %&#123;<span class="string">"naME"</span> =&gt; <span class="string">"Zainu"</span>&#125;&#125;, ~w(sister name)) == <span class="string">"Zainu"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  test <span class="string">"gets an mixed case deep key"</span> <span class="keyword">do</span></span><br><span class="line">    assert ci_get_in(%&#123;<span class="string">"name"</span> =&gt; <span class="string">"Mujju"</span>, <span class="string">"sisTER"</span> =&gt; %&#123;<span class="string">"naME"</span> =&gt; <span class="string">"Zainu"</span>&#125;&#125;, ~w(sIStER NAme)) == <span class="string">"Zainu"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  test <span class="string">"gets a very deep key"</span> <span class="keyword">do</span></span><br><span class="line">    map = %&#123;</span><br><span class="line">      <span class="string">"aB"</span> =&gt; %&#123;</span><br><span class="line">        <span class="string">"BC"</span> =&gt; <span class="number">7</span>,</span><br><span class="line">        <span class="string">"c"</span> =&gt; %&#123;<span class="string">"DD"</span> =&gt; <span class="symbol">:foo</span>, <span class="string">"Cassandra"</span> =&gt; <span class="symbol">:awesome</span>, <span class="string">"MOO"</span> =&gt; %&#123;<span class="string">"name"</span> =&gt; <span class="string">"Mujju"</span>&#125;&#125;</span><br><span class="line">      &#125;&#125;</span><br><span class="line">    assert ci_get_in(map, ~w(ab bc)) == <span class="number">7</span></span><br><span class="line">    assert ci_get_in(map, ~w(ab c dd)) == <span class="symbol">:foo</span></span><br><span class="line">    assert ci_get_in(map, ~w(ab c moo name)) == <span class="string">"Mujju"</span></span><br><span class="line"></span><br><span class="line">    assert ci_get_in(map, ~w(ab Bc)) == <span class="number">7</span></span><br><span class="line">    assert ci_get_in(map, ~w(ab C dD)) == <span class="symbol">:foo</span></span><br><span class="line">    assert ci_get_in(map, ~w(ab C mOo nAMe)) == <span class="string">"Mujju"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I ran into an issue with inconsistent naming of keys in one of my provider’s json.
This is really bad data quality, the data that is bein
      
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="Case insensitive" scheme="http://minhajuddin.com/tags/case-insensitive/"/>
    
      <category term="Map" scheme="http://minhajuddin.com/tags/map/"/>
    
      <category term="Retrieval" scheme="http://minhajuddin.com/tags/retrieval/"/>
    
  </entry>
  
  <entry>
    <title>Script to analyze the structure of an xml document</title>
    <link href="http://minhajuddin.com/2017/01/05/script-to-analyze-the-structure-of-an-xml-document/"/>
    <id>http://minhajuddin.com/2017/01/05/script-to-analyze-the-structure-of-an-xml-document/</id>
    <published>2017-01-05T16:22:24.000Z</published>
    <updated>2018-05-09T10:16:51.933Z</updated>
    
    <content type="html"><![CDATA[<p>While working with XML data, you often don’t find the WSDL files and may end upmanually working through the document to understand its structure. At my current projectI ran into a few hundred XML files and had to analyze them to understand the data available.Here is a script I created which prints all the possible nodes in the input files</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env ruby</span><br><span class="line"># Author: Khaja Minhajuddin &lt;minhajuddin.k@gmail.com&gt;</span><br><span class="line"></span><br><span class="line">require &apos;nokogiri&apos;</span><br><span class="line"></span><br><span class="line">class XmlAnalyze</span><br><span class="line">  def initialize(filepaths)</span><br><span class="line">    @filepaths = filepaths</span><br><span class="line">    @node_paths = &#123;&#125;</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  def analyze</span><br><span class="line">    @filepaths.each &#123; |filepath| analyze_file(filepath) &#125;</span><br><span class="line">    @node_paths.keys.sort</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  private</span><br><span class="line">  def analyze_file(filepath)</span><br><span class="line">    @doc = File.open(filepath) &#123; |f| Nokogiri::XML(f) &#125;</span><br><span class="line">    analyze_node(@doc.children.first)</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  def analyze_node(node)</span><br><span class="line">    return if node.is_a? Nokogiri::XML::Text</span><br><span class="line">    add_path node.path</span><br><span class="line"></span><br><span class="line">    node.attributes.keys.each do |attr|</span><br><span class="line">      add_path(&quot;#&#123;node.path&#125;:#&#123;attr&#125;&quot;)</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    node.children.each do |child|</span><br><span class="line">      analyze_node(child)</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  def add_path(path)</span><br><span class="line">    path = path.gsub(/\[\d+\]/, &apos;&apos;)</span><br><span class="line">    @node_paths[path] = true</span><br><span class="line">  end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">if ARGV.empty?</span><br><span class="line">  puts &apos;Usage: ./analyze_xml.rb file1.xml file2.xml ....&apos;</span><br><span class="line">  exit(-1)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">puts XmlAnalyze.new(ARGV).analyze</span><br></pre></td></tr></table></figure><p>It outputs the following for the xml below</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">person</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span> <span class="attr">type</span>=<span class="string">"full"</span>&gt;</span>Khaja<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">age</span>&gt;</span>31<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">person</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span> <span class="attr">type</span>=<span class="string">"full"</span>&gt;</span>Khaja<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dob</span>&gt;</span>Jan<span class="tag">&lt;/<span class="name">dob</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/root</span><br><span class="line">/root/person</span><br><span class="line">/root/person/age</span><br><span class="line">/root/person/dob</span><br><span class="line">/root/person/name</span><br><span class="line">/root/person/name:type</span><br></pre></td></tr></table></figure><p>Hope you find it useful!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;While working with XML data, you often don’t find the WSDL files and may end up
manually working through the document to understand its s
      
    
    </summary>
    
    
      <category term="Nokogiri" scheme="http://minhajuddin.com/tags/nokogiri/"/>
    
      <category term="Xml" scheme="http://minhajuddin.com/tags/xml/"/>
    
      <category term="Analyze" scheme="http://minhajuddin.com/tags/analyze/"/>
    
      <category term="Structure" scheme="http://minhajuddin.com/tags/structure/"/>
    
  </entry>
  
  <entry>
    <title>Bash completion script for mix</title>
    <link href="http://minhajuddin.com/2016/12/23/bash-completion-script-for-mix/"/>
    <id>http://minhajuddin.com/2016/12/23/bash-completion-script-for-mix/</id>
    <published>2016-12-23T17:02:14.000Z</published>
    <updated>2018-05-09T10:16:51.921Z</updated>
    
    <content type="html"><![CDATA[<p>Bash completion is very handy for cli tools. You can set it up very easily for <code>mix</code> using the following script.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># `sudo vim /etc/bash_completion.d/mix.sh` and put this inside of it</span><br><span class="line"># mix bash completion script</span><br><span class="line"></span><br><span class="line">complete_mix_command() &#123;</span><br><span class="line">  [ -f mix.exs ] || exit 0</span><br><span class="line">  mix help --search &quot;$2&quot;| cut -f1 -d&apos;#&apos; | cut -f2 -d&apos; &apos;</span><br><span class="line">  return $?</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">complete -C complete_mix_command -o default mix</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Bash completion is very handy for cli tools. You can set it up very easily for &lt;code&gt;mix&lt;/code&gt; using the following script.&lt;/p&gt;
&lt;figure c
      
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="Mix" scheme="http://minhajuddin.com/tags/mix/"/>
    
      <category term="Bash completion" scheme="http://minhajuddin.com/tags/bash-completion/"/>
    
  </entry>
  
  <entry>
    <title>How to show your blog content in your Rails application</title>
    <link href="http://minhajuddin.com/2016/12/22/how-to-show-your-blog-content-in-your-rails-application/"/>
    <id>http://minhajuddin.com/2016/12/22/how-to-show-your-blog-content-in-your-rails-application/</id>
    <published>2016-12-22T08:19:24.000Z</published>
    <updated>2018-05-09T10:16:51.929Z</updated>
    
    <content type="html"><![CDATA[<p>I recently released <a href="https://liveformhq.com/" target="_blank" rel="noopener">LiveForm</a> which is a service which gives you form endpoints (I’d love to have you check it out :) )I wanted to show my blog’s content on the home page, It is pretty straightforward with the rich ruby ecosystem.</p><ol><li>First you need a way to get the data from your blog. The LiveForm blog has an atom feed at <a href="http://blog.liveformhq.com/atom.xml" target="_blank" rel="noopener">http://blog.liveformhq.com/atom.xml</a> . I initially used RestClient to get the data from the feed.  </li><li>Once we have the feed, we need to parse it to extract the right content. Some quick googling led me to the awesome <a href="https://github.com/feedjira/feedjira" target="_blank" rel="noopener">feedjira</a> gem, (I am not gonna comment about the awesome name:))</li><li>feedjira actually has a simple method to parse the feed from a URL <code>Feedjira::Feed.fetch_and_parse(url)</code>  </li><li>Once I got the entries, I just had to format them properly. However, there was an issue with summaries of blog posts having malformed html. This was due to naively slicing the blog post content at 200 characters by hexo (the blog engine I use), Nokogiri has a simple way of working around this. However, I went one step further and removed all html markup from the summary so that it doesn’t mess with the web application’s markup: <code>Nokogiri::HTML(entry.summary).css(&quot;body&quot;).text</code></li><li>Finally, I didn’t want to fetch and parse my feed for every user that visited my website. So, I used fragment caching to render the feed once every day.</li></ol><p>Here is all the relevant code:</p><p>The class that fetches and parses the feed</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LiveformBlog</span></span></span><br><span class="line">  URL = <span class="string">"http://blog.liveformhq.com/atom.xml"</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">entries</span></span></span><br><span class="line">    Rails.logger.info <span class="string">"Fetching feed...................."</span></span><br><span class="line">    feed = Feedjira::Feed.fetch_and_parse(URL)</span><br><span class="line">    feed.entries.take(<span class="number">5</span>).map &#123;<span class="params">|x|</span> parse_entry(x)&#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  private</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">parse_entry</span><span class="params">(entry)</span></span></span><br><span class="line">    OpenStruct.new(</span><br><span class="line">      <span class="symbol">title:</span> entry.title,</span><br><span class="line">      <span class="symbol">summary:</span> fix_summary(entry),</span><br><span class="line">      <span class="symbol">url:</span> entry.url,</span><br><span class="line">      <span class="symbol">published:</span> entry.published,</span><br><span class="line">    )</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fix_summary</span><span class="params">(entry)</span></span></span><br><span class="line">    doc = Nokogiri::HTML(entry.summary)</span><br><span class="line">    doc.css(<span class="string">'body'</span>).text</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>The view that caches and renders the feed</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby"> cache Date.today.to_s <span class="keyword">do</span> </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'blog-posts'</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">'section-heading'</span>&gt;</span>From our Blog<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> LiveformBlog.new.entries.each <span class="keyword">do</span> <span class="params">|entry|</span> </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">blog-post</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'&lt;%=</span></span></span><span class="ruby"> entry.url </span><span class="xml"><span class="tag"><span class="string">%&gt;'</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby"> entry.title </span><span class="xml"><span class="tag">%&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">'blog-post__published'</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby"> short_time entry.published </span><span class="xml"><span class="tag">%&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby"> entry.summary </span><span class="xml"><span class="tag">%&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> <span class="keyword">end</span> </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> <span class="keyword">end</span> </span><span class="xml"><span class="tag">%&gt;</span></span></span><br></pre></td></tr></table></figure><p>Screenshot of the current page</p><img src="/2016/12/22/how-to-show-your-blog-content-in-your-rails-application/liveform-blog-content.png" title="Liveform blog">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I recently released &lt;a href=&quot;https://liveformhq.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LiveForm&lt;/a&gt; which is a service which gives you form
      
    
    </summary>
    
    
      <category term="Blog" scheme="http://minhajuddin.com/tags/blog/"/>
    
      <category term="Rails" scheme="http://minhajuddin.com/tags/rails/"/>
    
      <category term="Atom" scheme="http://minhajuddin.com/tags/atom/"/>
    
  </entry>
  
  <entry>
    <title>How to deploy a simple phoenix app on a single server using distillery</title>
    <link href="http://minhajuddin.com/2016/11/13/how-to-deploy-a-simple-phoenix-app-on-a-single-server-using-distillery/"/>
    <id>http://minhajuddin.com/2016/11/13/how-to-deploy-a-simple-phoenix-app-on-a-single-server-using-distillery/</id>
    <published>2016-11-13T16:09:14.000Z</published>
    <updated>2018-05-09T10:16:51.925Z</updated>
    
    <content type="html"><![CDATA[<h3 id="If-you-find-issues-or-can-improve-this-guide-please-create-a-pull-request-at"><a href="#If-you-find-issues-or-can-improve-this-guide-please-create-a-pull-request-at" class="headerlink" title="If you find issues or can improve this guide, please create a pull request at:"></a>If you find issues or can improve this guide, please create a pull request at:</h3><h2 id="2-Setup-the-server"><a href="#2-Setup-the-server" class="headerlink" title="2. Setup the server"></a>2. Setup the server</h2><p>We’ll be running our server under the user called <code>slugex</code>. So, we first needto create that user.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## commands to be executed on our server</span></span><br><span class="line">APP_USER=slugex</span><br><span class="line"></span><br><span class="line"><span class="comment"># create prent dir for our home</span></span><br><span class="line">sudo mkdir -p /opt/www</span><br><span class="line"><span class="comment"># create the user</span></span><br><span class="line">sudo useradd --home <span class="string">"/opt/www/<span class="variable">$APP_USER</span>"</span> --create-home --shell /bin/bash <span class="variable">$APP_USER</span></span><br><span class="line"><span class="comment"># create the postgresql role for our user</span></span><br><span class="line">sudo -u postgres createuser --<span class="built_in">echo</span> --no-createrole --no-superuser --createdb <span class="variable">$APP_USER</span></span><br></pre></td></tr></table></figure><h2 id="3-Install-the-git-deploy-rubygem-on-our-local-computer"><a href="#3-Install-the-git-deploy-rubygem-on-our-local-computer" class="headerlink" title="3. Install the git-deploy rubygem on our local computer"></a>3. Install the git-deploy rubygem on our local computer</h2><p>We’ll be using the <a href="https://github.com/mislav/git-deploy" target="_blank" rel="noopener">git-deploy</a> rubygem todo deploys. This allows deploys similar to Heroku. You just need to push to your  production git repository to start a deployment.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## commands to be executed on our local computer</span></span><br><span class="line"><span class="comment"># install the gem</span></span><br><span class="line"><span class="comment"># you need ruby installed on your computer for this</span></span><br><span class="line">gem install git-deploy</span><br></pre></td></tr></table></figure><h2 id="4-Setup-distillery-in-our-phoenix-app-on-local-computer"><a href="#4-Setup-distillery-in-our-phoenix-app-on-local-computer" class="headerlink" title="4. Setup distillery in our phoenix app (on local computer)"></a>4. Setup distillery in our phoenix app (on local computer)</h2><p>We’ll be using <a href="https://github.com/bitwalker/distillery" target="_blank" rel="noopener">distillery</a> to manage our releases.</p><p>Add the distillery dependency to our <code>mix.exs</code></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">defp</span> <span class="title">deps</span></span> <span class="keyword">do</span></span><br><span class="line">  [&#123;<span class="symbol">:distillery</span>, <span class="string">"~&gt; 0.10"</span>&#125;]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>Init the distillery config<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># get dependencies</span></span><br><span class="line">mix deps.get</span><br><span class="line"><span class="comment"># init distillery</span></span><br><span class="line">mix release.init</span><br></pre></td></tr></table></figure></p><p>Change <code>rel/config.ex</code> to look like below</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">environment <span class="symbol">:prod</span> <span class="keyword">do</span></span><br><span class="line">  set <span class="symbol">include_erts:</span> <span class="keyword">false</span></span><br><span class="line">  set <span class="symbol">include_src:</span> <span class="keyword">false</span></span><br><span class="line">  <span class="comment"># cookie info ...</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="5-Setup-git-deploy-local-computer"><a href="#5-Setup-git-deploy-local-computer" class="headerlink" title="5. Setup git deploy (local computer)"></a>5. Setup git deploy (local computer)</h2><p>Let us setup the remote and the deploy hooks</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## commands to be executed on our local computer</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># setup the git remote pointing to our prod server</span></span><br><span class="line">git remote add prod slugex@slugex.com:/opt/www/slugex</span><br><span class="line"></span><br><span class="line"><span class="comment"># init</span></span><br><span class="line">git deploy setup -r <span class="string">"prod"</span></span><br><span class="line"><span class="comment"># create the deploy files</span></span><br><span class="line">git deploy init</span><br><span class="line"><span class="comment"># push to production</span></span><br><span class="line">git push prod master</span><br></pre></td></tr></table></figure><h2 id="TODO-release-this-as-a-book"><a href="#TODO-release-this-as-a-book" class="headerlink" title="TODO: release this as a book"></a>TODO: release this as a book</h2><h2 id="6-Setup-postgresql-access"><a href="#6-Setup-postgresql-access" class="headerlink" title="6. Setup postgresql access"></a>6. Setup postgresql access</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## commands to be executed on the server as the slugex user</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># create the database</span></span><br><span class="line">createdb slugex_prod</span><br><span class="line"></span><br><span class="line"><span class="comment"># set the password for the slugex user</span></span><br><span class="line">psql slugex_prod</span><br><span class="line">&gt; slugex_prod=&gt; \password slugex</span><br><span class="line">&gt; Enter new password: enter the password</span><br><span class="line">&gt; Enter it again: repeat the password</span><br></pre></td></tr></table></figure><h2 id="6-Setup-the-prod-secret-exs"><a href="#6-Setup-the-prod-secret-exs" class="headerlink" title="6. Setup the prod.secret.exs"></a>6. Setup the prod.secret.exs</h2><p>Copy the config/prod.secret.exs file from your local computer to /opt/www/slugex/config/prod.secret.exs</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## on local computer from our phoenix app directory</span></span><br><span class="line">scp config/prod.secret.exs slugex@slugex.com:config/</span><br></pre></td></tr></table></figure><p>create a new secret on your local computer using <code>mix phoenix.gen.secret</code> andpaste it in the server’s config/prod.secret.exs secret</p><p>It should look something like below:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># on the server</span></span><br><span class="line"><span class="comment"># /opt/www/slugex/config/prod.secret.exs</span></span><br><span class="line"><span class="keyword">use</span> Mix.Config</span><br><span class="line"></span><br><span class="line">config <span class="symbol">:simple</span>, Simple.Endpoint,</span><br><span class="line">  <span class="symbol">secret_key_base:</span> <span class="string">"RgeM4Dt8kl3yyf47K1DXWr8mgANzOL9TNOOiCknZM8LLDeSdS1ia5Vc2HkmKhy68"</span></span><br><span class="line">  <span class="symbol">http:</span> [<span class="symbol">port:</span> <span class="number">4010</span>],</span><br><span class="line">  <span class="symbol">server:</span> <span class="keyword">true</span>, <span class="comment"># &lt;=== this is very important</span></span><br><span class="line">  <span class="symbol">root:</span> <span class="string">"/opt/www/slugex"</span>,</span><br><span class="line">  <span class="symbol">url:</span> [<span class="symbol">host:</span> <span class="string">"slugex.com"</span>, <span class="symbol">port:</span> <span class="number">443</span>],</span><br><span class="line">  <span class="symbol">cache_static_manifest:</span> <span class="string">"priv/static/manifest.json"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Do not print debug messages in production</span></span><br><span class="line">config <span class="symbol">:logger</span>, <span class="symbol">level:</span> <span class="symbol">:info</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Configure your database</span></span><br><span class="line">config <span class="symbol">:simple</span>, Simple.Repo,</span><br><span class="line">  <span class="symbol">adapter:</span> Ecto.Adapters.Postgres,</span><br><span class="line">  <span class="symbol">username:</span> <span class="string">"slugex"</span>,</span><br><span class="line">  <span class="symbol">password:</span> <span class="string">"another brick in the wall"</span>,</span><br><span class="line">  <span class="symbol">database:</span> <span class="string">"slugex_prod"</span>,</span><br><span class="line">  <span class="symbol">pool_size:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><h2 id="6-Tweak-the-deploy-scripts"><a href="#6-Tweak-the-deploy-scripts" class="headerlink" title="6. Tweak the deploy scripts"></a>6. Tweak the deploy scripts</h2><h2 id="7-One-time-setup-on-the-server"><a href="#7-One-time-setup-on-the-server" class="headerlink" title="7. One time setup on the server"></a>7. One time setup on the server</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## commands to be executed on server as slugex</span></span><br><span class="line">MIX_ENV=prod mix <span class="keyword">do</span> compile, ecto.create</span><br><span class="line">MIX_ENV=prod ./deploy/after_push</span><br></pre></td></tr></table></figure><h2 id="Logger"><a href="#Logger" class="headerlink" title="Logger"></a>Logger</h2><h2 id="Exception-notifications"><a href="#Exception-notifications" class="headerlink" title="Exception notifications"></a>Exception notifications</h2><h2 id="Setup-systemd"><a href="#Setup-systemd" class="headerlink" title="Setup systemd"></a>Setup systemd</h2><h2 id="6-One-time-setup-on-server-on-server-as-slugex-user"><a href="#6-One-time-setup-on-server-on-server-as-slugex-user" class="headerlink" title="6. One time setup on server (on server as slugex user)"></a>6. One time setup on server (on server as slugex user)</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## commands to be run on the server as the slugex user</span></span><br><span class="line"><span class="built_in">cd</span> /opt/www/slugex</span><br><span class="line"></span><br><span class="line"><span class="comment"># create the secrets config</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'use Mix.Config'</span> &gt; config/prod.secrets.exs</span><br><span class="line"><span class="comment"># add your configuration to this file</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># update hex</span></span><br><span class="line"><span class="built_in">export</span> MIX_ENV=prod</span><br><span class="line">mix local.hex --force</span><br><span class="line">mix deps.get</span><br><span class="line">mix ecto.create</span><br></pre></td></tr></table></figure><h2 id="6-Nginx-configuration"><a href="#6-Nginx-configuration" class="headerlink" title="6. Nginx configuration"></a>6. Nginx configuration</h2><h2 id="7-Letsencrypt-setup-and-configuration"><a href="#7-Letsencrypt-setup-and-configuration" class="headerlink" title="7. Letsencrypt setup and configuration"></a>7. Letsencrypt setup and configuration</h2><h2 id="9-TODO-Configuration-using-conform"><a href="#9-TODO-Configuration-using-conform" class="headerlink" title="9. TODO: Configuration using conform"></a>9. TODO: Configuration using conform</h2><h2 id="10-TODO-database-backups-to-S3"><a href="#10-TODO-database-backups-to-S3" class="headerlink" title="10. TODO: database backups to S3"></a>10. TODO: database backups to S3</h2><h2 id="10-TODO-uptime-monitoring-of-websites-using-uptime-monitor"><a href="#10-TODO-uptime-monitoring-of-websites-using-uptime-monitor" class="headerlink" title="10. TODO: uptime monitoring of websites using uptime monitor"></a>10. TODO: uptime monitoring of websites using uptime monitor</h2><h2 id="10-TODO-email-via-SES"><a href="#10-TODO-email-via-SES" class="headerlink" title="10. TODO: email via SES"></a>10. TODO: email via SES</h2><h2 id="10-TODO-db-seeds"><a href="#10-TODO-db-seeds" class="headerlink" title="10. TODO: db seeds"></a>10. TODO: db seeds</h2><h2 id="10-TODO-nginx-caching-basics-static-assets-large-expirations"><a href="#10-TODO-nginx-caching-basics-static-assets-large-expirations" class="headerlink" title="10. TODO: nginx caching basics, static assets large expirations"></a>10. TODO: nginx caching basics, static assets large expirations</h2><h2 id="10-TODO-remote-console-for-debugging"><a href="#10-TODO-remote-console-for-debugging" class="headerlink" title="10. TODO: remote console for debugging"></a>10. TODO: remote console for debugging</h2><p>sudo letsencrypt certonly –webroot -w /opt/www/webmonitor/public/ -d webmonitorhq.com  –webroot -w /opt/www/webmonitor/public/ -d <a href="http://www.webmonitorhq.com" target="_blank" rel="noopener">www.webmonitorhq.com</a></p><h2 id="11-Check-SSL-certificate-https-www-sslshopper-com-ssl-checker-html"><a href="#11-Check-SSL-certificate-https-www-sslshopper-com-ssl-checker-html" class="headerlink" title="11. Check SSL certificate: https://www.sslshopper.com/ssl-checker.html"></a>11. Check SSL certificate: <a href="https://www.sslshopper.com/ssl-checker.html" target="_blank" rel="noopener">https://www.sslshopper.com/ssl-checker.html</a></h2><h3 id="Common-mistakes-errors"><a href="#Common-mistakes-errors" class="headerlink" title="Common mistakes/errors"></a>Common mistakes/errors</h3><ol><li>SSH errors</li></ol><h3 id="Improvements"><a href="#Improvements" class="headerlink" title="Improvements"></a>Improvements</h3><ol><li>Automate all of these using a hex package?</li><li>Remove dependencies on <code>git-deploy</code> if possible</li><li>Hot upgrades</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;If-you-find-issues-or-can-improve-this-guide-please-create-a-pull-request-at&quot;&gt;&lt;a href=&quot;#If-you-find-issues-or-can-improve-this-guide
      
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="Phoenix" scheme="http://minhajuddin.com/tags/phoenix/"/>
    
      <category term="Distillery" scheme="http://minhajuddin.com/tags/distillery/"/>
    
      <category term="Git" scheme="http://minhajuddin.com/tags/git/"/>
    
      <category term="Deploy" scheme="http://minhajuddin.com/tags/deploy/"/>
    
      <category term="Heroku" scheme="http://minhajuddin.com/tags/heroku/"/>
    
  </entry>
  
  <entry>
    <title>How to extract bits from a binary in elixir</title>
    <link href="http://minhajuddin.com/2016/11/01/how-to-extract-bits-from-a-binary-in-elixir/"/>
    <id>http://minhajuddin.com/2016/11/01/how-to-extract-bits-from-a-binary-in-elixir/</id>
    <published>2016-11-01T10:58:50.000Z</published>
    <updated>2018-05-09T10:16:51.925Z</updated>
    
    <content type="html"><![CDATA[<p>Erlang and by extension Elixir have powerful pattern matching constructs, whichallow you to easily extract bits from a binary. Here is an example which takesa binary and returns their bits</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Bits</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="comment"># this is the public api which allows you to pass any binary representation</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">extract</span></span>(str) <span class="keyword">when</span> is_binary(str) <span class="keyword">do</span></span><br><span class="line">    extract(str, [])</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># this function does the heavy lifting by matching the input binary to</span></span><br><span class="line">  <span class="comment"># a single bit and sends the rest of the bits recursively back to itself</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">extract</span></span>(&lt;&lt;b <span class="symbol">:</span>: size(<span class="number">1</span>), bits <span class="symbol">:</span>: bitstring&gt;&gt;, acc) <span class="keyword">when</span> is_bitstring(bits) <span class="keyword">do</span></span><br><span class="line">    extract(bits, [b | acc])</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># this is the terminal condition when we don't have anything more to extract</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">extract</span></span>(&lt;&lt;&gt;&gt;, acc), <span class="symbol">do:</span> acc |&gt; Enum.reverse</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">IO.inspect Bits.extract(<span class="string">"!!"</span>) <span class="comment"># =&gt; [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1]</span></span><br><span class="line">IO.inspect Bits.extract(&lt;&lt; <span class="number">99</span> &gt;&gt;) <span class="comment">#=&gt; [0, 1, 1, 0, 0, 0, 1, 1]</span></span><br></pre></td></tr></table></figure><p>The code is pretty self explanatory</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Erlang and by extension Elixir have powerful pattern matching constructs, which
allow you to easily extract bits from a binary. Here is a
      
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="Binary" scheme="http://minhajuddin.com/tags/binary/"/>
    
      <category term="Bits" scheme="http://minhajuddin.com/tags/bits/"/>
    
      <category term="Pattern matching" scheme="http://minhajuddin.com/tags/pattern-matching/"/>
    
  </entry>
  
  <entry>
    <title>Elixir process timeout pitfall</title>
    <link href="http://minhajuddin.com/2016/10/31/elixir-process-timeout-pitfall/"/>
    <id>http://minhajuddin.com/2016/10/31/elixir-process-timeout-pitfall/</id>
    <published>2016-10-31T17:13:12.000Z</published>
    <updated>2018-05-09T10:16:51.921Z</updated>
    
    <content type="html"><![CDATA[<p>If you taken a look at Elixir, you may have come across something like the below code</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">HardWorker</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">work</span></span>(id) <span class="keyword">do</span></span><br><span class="line">    Process.sleep(id * <span class="number">900</span>)</span><br><span class="line">    &#123;<span class="symbol">:done</span>, id&#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Runner</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="variable">@total_timeout</span> <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">run</span></span> <span class="keyword">do</span></span><br><span class="line">    &#123;us, <span class="number">_</span>&#125; = <span class="symbol">:timer</span>.tc &amp;work/<span class="number">0</span></span><br><span class="line">    IO.puts <span class="string">"ELAPSED_TIME: <span class="subst">#&#123;us/<span class="number">1000</span>&#125;</span>"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">work</span></span> <span class="keyword">do</span></span><br><span class="line">    tasks = Enum.map <span class="number">1</span>..<span class="number">10</span>, <span class="keyword">fn</span> id -&gt;</span><br><span class="line">      Task.async(HardWorker, <span class="symbol">:work</span>, [id])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    Enum.map(tasks, <span class="keyword">fn</span> task -&gt;</span><br><span class="line">      Task.await(task, <span class="variable">@total_timeout</span>)</span><br><span class="line">    <span class="keyword">end</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Runner.run</span><br></pre></td></tr></table></figure><p>Looks simple enough, we loop over and create 10 processes and then waitfor them to finish. It also prints out a message <code>ELAPSED_TIME: _</code> at the end where_ is the time taken for it to run all the processes.</p><p><strong>Can you take a guess how long this runner will take in the worst case?</strong></p><p>If you guessed 10 seconds, you are right! I didn’t guess 10 seconds when I firstsaw this kind of code. I expected it to exit after 1 second. However, the keyhere is that <code>Task.await</code> is called on 10 tasks and if the 10 tasks finishat the end of 1s, 2s, … 10s This code will run just fine.</p><p>This is a completely made up example but it should show you that running in parallelwith timeouts is not just a <code>Task.await</code> away.</p><p>I have coded an example app with proper timeout handling and parallel processing at <a href="https://github.com/minhajuddin/parallel_elixir_workers" target="_blank" rel="noopener">https://github.com/minhajuddin/parallel_elixir_workers</a>Check it out.</p><h3 id="Addendum"><a href="#Addendum" class="headerlink" title="Addendum"></a>Addendum</h3><p>I posted this on <a href="https://elixirforum.com/t/elixir-task-timeout-pitfall/2192/11" target="_blank" rel="noopener">the elixirforum</a> and got some feedback about it.</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tasks = Enum.map <span class="number">1</span>..<span class="number">10</span>, <span class="keyword">fn</span> id -&gt;</span><br><span class="line">  Task.async(HardWorker, <span class="symbol">:work</span>, [id])</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># at this point all tasks are running in parallel</span></span><br><span class="line"></span><br><span class="line">Enum.map(tasks, <span class="keyword">fn</span> task -&gt;</span><br><span class="line">  Task.await(task, <span class="variable">@total_timeout</span>)</span><br><span class="line"><span class="keyword">end</span>)</span><br></pre></td></tr></table></figure><p>Let us take another look at the relevant code. Now, let us say that this is spawningprocesses P1 to P10 in that order. Let’s say tasks T1 to T10 are created for these processes.Now all these tasks are running concurrently.</p><p>Now, in the second <code>Enum.map</code>, in the first iteration the task is set to T1,so T1 has to finish before 1 second otherwise this code will timeout. However,while T1 is running T2..T10 are also running. So, when this code runs for T2 andwaits for 1 second, T2 had been running for 2s. So, effectively T1 would be givena time of 1 second, T2 a time of 2 seconds and T3 a time of 3 seconds and so on.</p><p>This may be what you want. However, if you want all the tasks to finish executing within 1 second.You shouldn’t use <code>Task.await</code>. You can use <code>Task.yield_many</code> which takes a list of tasksand allows you to specify a timeout after which it returns with the results of whateverprocesses finished. The <a href="http://elixir-lang.org/docs/stable/elixir/Task.html#yield_many/2" target="_blank" rel="noopener">documentation for Task.yield_many</a> has a very goodexample on how to use it.</p><p><a href="https://elixirforum.com/t/elixir-task-timeout-pitfall/2192/7?u=minhajuddin" target="_blank" rel="noopener">@benwilson512 has a good example on this</a></p><blockquote><p>..suppose you wrote the following code:</p></blockquote><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">task = Task.async(<span class="keyword">fn</span> -&gt; Process.sleep(<span class="symbol">:infinity</span>) <span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line">Process.sleep(<span class="number">5_000</span>)</span><br><span class="line">Task.await(task, <span class="number">5_000</span>)</span><br></pre></td></tr></table></figure><blockquote><p>How long before it times out? 10 seconds of course. But this is obvious and expected.This is exactly what you’re doing by making the Task.await calls consecutive.It’s just that instead of sleeping in the main process you’re waiting on a different task.Task.await is blocking, this is expected.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;If you taken a look at Elixir, you may have come across something like the below code&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="Process" scheme="http://minhajuddin.com/tags/process/"/>
    
      <category term="Timeout" scheme="http://minhajuddin.com/tags/timeout/"/>
    
      <category term="Task" scheme="http://minhajuddin.com/tags/task/"/>
    
  </entry>
  
</feed>

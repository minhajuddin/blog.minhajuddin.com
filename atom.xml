<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Simplicity</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://minhajuddin.com/"/>
  <updated>2021-03-07T19:31:47.197Z</updated>
  <id>http://minhajuddin.com/</id>
  
  <author>
    <name>Khaja Minhajuddin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>A simple way to store secrets using Parameter Store for your ECS applications</title>
    <link href="http://minhajuddin.com/2021/03/07/a-simple-way-to-store-secrets-using-parameter-store-for-your-ecs-applications/"/>
    <id>http://minhajuddin.com/2021/03/07/a-simple-way-to-store-secrets-using-parameter-store-for-your-ecs-applications/</id>
    <published>2021-03-07T13:52:40.000Z</published>
    <updated>2021-03-07T19:31:47.197Z</updated>
    
    <content type="html"><![CDATA[<p>I have an ECS cluster for my side projects and need to pass secrets to the app.There are a few ways of doing it, and I think I found a nice balance betweensimplicity and ease of use.</p><h2 id="Wrong-ways-of-sharing-secrets"><a href="#Wrong-ways-of-sharing-secrets" class="headerlink" title="Wrong ways of sharing secrets"></a>Wrong ways of sharing secrets</h2><p>There are a few wrong ways of sharing secrets, Make sure you don’t do any ofthese 🙂</p><ol><li><em>Secrets in source code</em>: This is a big no-no, you don’t want to storesecrets in your code because anyone with access to your code will be able toread them.</li><li><em>Secrets built into the docker image</em>: This is another bad idea, becauseanyone with access to your images will have your secrets, moreover, if youwant to change a secret, you’ll have to build a new image and deploy it.</li><li><em>Secrets in the terraform ECS task definitions Environment block</em>: This isnot very bad, but anyone with access to your terraform repo will be able toread your secrets.</li></ol><h2 id="Store-Secrets-in-the-parameter-store-one-parameter-per-secret"><a href="#Store-Secrets-in-the-parameter-store-one-parameter-per-secret" class="headerlink" title="Store Secrets in the parameter store, one parameter per secret"></a>Store Secrets in the parameter store, one parameter per secret</h2><p>The parameter store is a <em>free</em> and easy tool to save your secrets. There aremore fancy options like the secret manager, but they cost money.</p><p>One way of storing secrets is to create one parameter per environment variable,e.g. if you have an app called money, you could create parameters called<code>money_database_url</code>, <code>money_secret_access_token</code> etc,. Make sure you createthem as ‘SecretString’ types. And then in your task definition. Use thefollowing code:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"money-web"</span>,</span><br><span class="line">    <span class="attr">"image"</span>: <span class="string">"..."</span>,</span><br><span class="line">    <span class="attr">"cpu"</span>: <span class="number">256</span>,</span><br><span class="line">    <span class="attr">"memory"</span>: <span class="number">512</span>,</span><br><span class="line">    <span class="attr">"essential"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"portMappings"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"containerPort"</span>: <span class="number">8000</span>,</span><br><span class="line">        <span class="attr">"hostPort"</span>: <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"secrets"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"DATABASE_URL"</span>,</span><br><span class="line">        <span class="attr">"valueFrom"</span>: <span class="string">"money_database_url"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"SECRET_ACCESS_TOKEN"</span>,</span><br><span class="line">        <span class="attr">"valueFrom"</span>: <span class="string">"money_secret_access_token"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"environment"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"MIX_ENV"</span>,</span><br><span class="line">        <span class="attr">"value"</span>: <span class="string">"prod"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>This will make your secrets available to your ECS container via environmentvariables called <code>DATABASE_URL</code> and <code>SECRET_ACCESS_TOKEN</code>. However, if you havelots of secrets, this becomes unweildy.</p><h2 id="Store-Secrets-in-the-parameter-store-one-parameter-per-app"><a href="#Store-Secrets-in-the-parameter-store-one-parameter-per-app" class="headerlink" title="Store Secrets in the parameter store, one parameter per app"></a>Store Secrets in the parameter store, one parameter per app</h2><p>I create a file called <code>secrets.json</code> with all the secrets (You can tweak thisstep, and use some other format)</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"db"</span>:<span class="string">"ecto://user:password@endpoint/dbname"</span>,</span><br><span class="line">  <span class="attr">"secret_key_base"</span>:<span class="string">"...."</span>,</span><br><span class="line">  ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Once I have all the secrets listed in this file. I pass it through the followingcommand:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jq -c . &lt; &quot;secrets.json&quot; | base64 --wrap 0</span><br></pre></td></tr></table></figure><p>This strips the spaces in the json and base64 encodes it. I plug this value intoa single parameter called <code>money_config</code> and then use the same strategy asbefore to pass it as an env var:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"secrets": [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"APP_CONFIG"</span>,</span><br><span class="line">    <span class="attr">"valueFrom"</span>: <span class="string">"money_config"</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>Now, in the app, I just decode base64 and then decode the json to get all thevalues. Here is how I do it in my Elixir apps:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># config/releases.exs</span><br><span class="line">import Config</span><br><span class="line"></span><br><span class="line">app_config = System.fetch_env!(&quot;APP_CONFIG&quot;) |&gt; Base.decode64!() |&gt; Jason.decode!()</span><br><span class="line"></span><br><span class="line">config :money, Money.Repo,</span><br><span class="line">  ssl: true,</span><br><span class="line">  url: Map.fetch!(app_config, &quot;db&quot;),</span><br><span class="line">  pool_size: String.to_integer(System.get_env(&quot;POOL_SIZE&quot;, &quot;10&quot;))</span><br><span class="line"></span><br><span class="line">config :money, MoneyWeb.Endpoint,</span><br><span class="line">  http: [</span><br><span class="line">    port: 8000,</span><br><span class="line">    transport_options: [socket_opts: [:inet6]]</span><br><span class="line">  ],</span><br><span class="line">  server: true,</span><br><span class="line">  secret_key_base: Map.fetch!(app_config, &quot;secret_key_base&quot;)</span><br></pre></td></tr></table></figure><p>This approach allows you to use around 70 secrets in one parameter because paramater values are limited to a size of 4K characters.</p><h2 id="Making-space-for-more-environment-variables"><a href="#Making-space-for-more-environment-variables" class="headerlink" title="Making space for more environment variables"></a>Making space for more environment variables</h2><p>If you have more than 70 environment variables you can add <code>gzip</code> to the pipe to get in more environment variables in a single parameter.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jq -c . &lt; &quot;secrets.json&quot; | gzip | base64 --wrap 0</span><br></pre></td></tr></table></figure><p>You’ll have to do things in the opposite order on your app to read this data. With gzip, You can get almost 140 env variables.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I have an ECS cluster for my side projects and need to pass secrets to the app.
There are a few ways of doing it, and I think I found a n
      
    
    </summary>
    
    
      <category term="ECS" scheme="http://minhajuddin.com/tags/ecs/"/>
    
      <category term="Secrets" scheme="http://minhajuddin.com/tags/secrets/"/>
    
      <category term="Environment Variables" scheme="http://minhajuddin.com/tags/environment-variables/"/>
    
      <category term="Parameter Store" scheme="http://minhajuddin.com/tags/parameter-store/"/>
    
      <category term="AWS" scheme="http://minhajuddin.com/tags/aws/"/>
    
      <category term="Docker" scheme="http://minhajuddin.com/tags/docker/"/>
    
      <category term="Terraform" scheme="http://minhajuddin.com/tags/terraform/"/>
    
  </entry>
  
  <entry>
    <title>How to do batch updates in postgresql for really big updates</title>
    <link href="http://minhajuddin.com/2020/10/17/how-to-do-batch-updates-in-postgresql/"/>
    <id>http://minhajuddin.com/2020/10/17/how-to-do-batch-updates-in-postgresql/</id>
    <published>2020-10-17T08:30:53.000Z</published>
    <updated>2021-03-07T19:31:47.201Z</updated>
    
    <content type="html"><![CDATA[<p>So, you have a ton of records to update in a really large table. Say, you needto update 3 million records in a table with 100 million rows. And, let’s alsoassume that you have a way of finding these records. Even, with all of thisinfo, updating 3M records in a single transaction is troublesome if your tableis being used moderately during this data fix. You have a high probability ofrunning into a deadlock or your query timing out.</p><p>There is a way you can do this by updating your data in small batches. The ideais to first find the ids of the records you want to update and then updating asmall batch of them in each transaction.</p><p>For our example, let us say we have a <code>users</code> table which has 3M records createdin the year 2019 whose authentication token needs to be reset. Simple enough!</p><h2 id="1-Doing-this-in-a-single-update"><a href="#1-Doing-this-in-a-single-update" class="headerlink" title="1. Doing this in a single update"></a>1. Doing this in a single update</h2><p>Doing this in a single update is the easiest and is possible if you don’t usethis table a lot. However, as I said, it is prone to deadlocks and statementtimeouts.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">users</span></span><br><span class="line"><span class="keyword">SET</span> authentication_token = <span class="keyword">encode</span>(gen_random_bytes(<span class="number">32</span>), <span class="string">'base64'</span>)</span><br><span class="line"><span class="keyword">WHERE</span> created_at <span class="keyword">BETWEEN</span> <span class="string">'2019-01-01'</span> <span class="keyword">AND</span> <span class="string">'2019-12-31'</span></span><br></pre></td></tr></table></figure><h3 id="2-Doing-this-in-multiple-batches-through-a-CTE"><a href="#2-Doing-this-in-multiple-batches-through-a-CTE" class="headerlink" title="2. Doing this in multiple batches through a CTE"></a>2. Doing this in multiple batches through a CTE</h3><p>Doing this through a CTE in multiple batches works, but is not the mostefficient.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- first get all the records that you want to update by using rolling OFFSETs</span></span><br><span class="line"><span class="comment">-- and limiting to a nice batch size using LIMIT</span></span><br><span class="line">WITH users_to_be_updated (</span><br><span class="line">  <span class="keyword">SELECT</span> <span class="keyword">id</span></span><br><span class="line">  <span class="keyword">FROM</span> <span class="keyword">users</span></span><br><span class="line">  <span class="keyword">WHERE</span> created_at <span class="keyword">BETWEEN</span> <span class="string">'2019-01-01'</span> <span class="keyword">AND</span> <span class="string">'2019-12-31'</span></span><br><span class="line">  <span class="keyword">LIMIT</span> <span class="number">1000</span></span><br><span class="line">  <span class="keyword">OFFSET</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">users</span> u</span><br><span class="line"><span class="keyword">SET</span> authentication_token = <span class="keyword">encode</span>(gen_random_bytes(<span class="number">32</span>), <span class="string">'base64'</span>)</span><br><span class="line"><span class="keyword">FROM</span> users_to_be_updated utbu</span><br><span class="line"><span class="keyword">WHERE</span> utbu.id = u.id</span><br></pre></td></tr></table></figure><p>That works. However, it is not the most efficient update. Because, for everybatch, (in this example a batch of 1000) we perform the filtering and orderingof all the data. So, we end up making the same query 3M/1K or 3000 times. Notthe most efficient use of our database resources!</p><h3 id="3-1-Doing-this-in-multiple-batches-using-a-temporary-table"><a href="#3-1-Doing-this-in-multiple-batches-using-a-temporary-table" class="headerlink" title="3.1. Doing this in multiple batches using a temporary table"></a>3.1. Doing this in multiple batches using a temporary table</h3><p>So, to remove the inefficiency from the previous step, we can create a temporary table tostore the filtered user ids while we update the records. Also, since this is atemp table, it is discarded automatically once the session finishes.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> TEMP <span class="keyword">TABLE</span> users_to_be_updated <span class="keyword">AS</span></span><br><span class="line">  <span class="keyword">SELECT</span> ROW_NUMBER() <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span>) row_id, <span class="keyword">id</span></span><br><span class="line">  <span class="keyword">FROM</span> <span class="keyword">users</span></span><br><span class="line">  <span class="keyword">WHERE</span> created_at <span class="keyword">BETWEEN</span> <span class="string">'2019-01-01'</span> <span class="keyword">AND</span> <span class="string">'2019-12-31'</span>;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> <span class="keyword">ON</span> users_to_be_updated(row_id);</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">users</span> u</span><br><span class="line"><span class="keyword">SET</span> authentication_token = <span class="keyword">encode</span>(gen_random_bytes(<span class="number">32</span>), <span class="string">'base64'</span>)</span><br><span class="line"><span class="keyword">FROM</span> users_to_be_updated utbu</span><br><span class="line"><span class="keyword">WHERE</span> utbu.id = u.id</span><br><span class="line"><span class="keyword">AND</span> utbu.row_id &gt; <span class="number">0</span> <span class="keyword">AND</span> utbu.row_id  &lt;= <span class="number">1000</span></span><br></pre></td></tr></table></figure><p>So, in the above SQL we are creating a temporary table containing a row_id whichis a serial number going from 1 to the total number of rows and also adding anindex on this because we’ll be using it in our batch update WHERE clause. And,finally doing our batch update by selecting the rows from 0..1000 in the firstiteration, 1000..2000 in the second iteration, and so on.</p><h3 id="3-2-Tying-this-up-via-a-ruby-script-to-do-the-full-update"><a href="#3-2-Tying-this-up-via-a-ruby-script-to-do-the-full-update" class="headerlink" title="3.2. Tying this up via a ruby script to do the full update."></a>3.2. Tying this up via a ruby script to do the full update.</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sql_generator.rb</span></span><br><span class="line">total_count = <span class="number">3_000_000</span></span><br><span class="line">batch_size = <span class="number">10_000</span></span><br><span class="line"></span><br><span class="line">iterations = <span class="number">1</span> + total_count / batch_size</span><br><span class="line"></span><br><span class="line">puts &lt;&lt;~SQL</span><br><span class="line">-- create our temporary table to avoid running this query <span class="keyword">for</span> every batch update</span><br><span class="line">CREATE TEMP TABLE users_to_be_updated AS</span><br><span class="line">  SELECT ROW_NUMBER() OVER(ORDER BY id) row_id, id</span><br><span class="line">  FROM users</span><br><span class="line">  WHERE created_at BETWEEN <span class="string">'2019-01-01'</span> AND <span class="string">'2019-12-31'</span>;</span><br><span class="line">  </span><br><span class="line">-- create an index on row_id because we<span class="string">'ll filter rows by this</span></span><br><span class="line"><span class="string">CREATE INDEX ON users_to_be_updated(row_id);</span></span><br><span class="line"><span class="string">SQL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(0..iterations).each do |i|</span></span><br><span class="line"><span class="string">  start_id = i * batch_size</span></span><br><span class="line"><span class="string">  end_id = (i + 1) * batch_size</span></span><br><span class="line"><span class="string">  puts &lt;&lt;~SQL</span></span><br><span class="line"><span class="string">-- the row below prints out the current iteration which shows us the progress</span></span><br><span class="line"><span class="string">-- batch: <span class="subst">#&#123;i&#125;</span>/<span class="subst">#&#123;iterations&#125;</span></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-- start a transaction for this batch update</span></span><br><span class="line"><span class="string">BEGIN;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-- perform the actual batch update</span></span><br><span class="line"><span class="string">UPDATE users u</span></span><br><span class="line"><span class="string">SET authentication_token = encode(gen_random_bytes(32), '</span>base64<span class="string">')</span></span><br><span class="line"><span class="string">FROM users_to_be_updated utbu</span></span><br><span class="line"><span class="string">WHERE utbu.id = u.id</span></span><br><span class="line"><span class="string">AND utbu.row_id &gt; <span class="subst">#&#123;start_id&#125;</span> AND utbu.row_id  &lt;= <span class="subst">#&#123;end_id&#125;</span>;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-- commit this transaction so that we don'</span>t have a single long running transaction</span><br><span class="line">COMMIT;</span><br><span class="line"></span><br><span class="line">-- This is optional, sleep <span class="keyword">for</span> <span class="number">1</span> second to stop the database from being overwhelmed.</span><br><span class="line">-- You can tweak this to your desire time based on the resources you have <span class="keyword">or</span></span><br><span class="line">-- remove it.</span><br><span class="line">SELECT pg_sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">SQL</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>This tiny script generates a sql file which can then be executed via psql to dothe whole process in one fell swoop.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># generate the sql file</span></span><br><span class="line">ruby sql_generator.rb &gt; user_batch_update.sql</span><br></pre></td></tr></table></figure><p>Once we have the sql file we run it through psql like so</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql --<span class="built_in">echo</span>-all --file=user_batch_update.psql <span class="string">"DATABASE_URL"</span></span><br></pre></td></tr></table></figure><p>That’s all folks, now your updates should be done in batches and shouldn’t causeany deadlocks or statement timeouts.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;So, you have a ton of records to update in a really large table. Say, you need
to update 3 million records in a table with 100 million ro
      
    
    </summary>
    
    
      <category term="psql" scheme="http://minhajuddin.com/tags/psql/"/>
    
      <category term="postgresql" scheme="http://minhajuddin.com/tags/postgresql/"/>
    
      <category term="batch" scheme="http://minhajuddin.com/tags/batch/"/>
    
      <category term="update" scheme="http://minhajuddin.com/tags/update/"/>
    
      <category term="row_number" scheme="http://minhajuddin.com/tags/row-number/"/>
    
      <category term="temp table" scheme="http://minhajuddin.com/tags/temp-table/"/>
    
  </entry>
  
  <entry>
    <title>Lazy functional ruby</title>
    <link href="http://minhajuddin.com/2020/07/29/lazy-functional-ruby/"/>
    <id>http://minhajuddin.com/2020/07/29/lazy-functional-ruby/</id>
    <published>2020-07-29T07:55:10.000Z</published>
    <updated>2021-03-07T19:31:47.201Z</updated>
    
    <content type="html"><![CDATA[<p>Today, I was working with some ruby code that had to find the first product inone of the current contexts. Here is the code:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_product_in_current_contexts</span></span></span><br><span class="line">  context_ids = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">  context_ids.each <span class="keyword">do</span> <span class="params">|context_id|</span></span><br><span class="line">    product = Product.find_by(<span class="symbol">context_id:</span> context_id)</span><br><span class="line">    <span class="keyword">return</span> product <span class="keyword">if</span> product</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>This code tries to find the first product in the current contexts in the orderthey are defined. However, the above code has a tiny bug. Can you figure outwhat it is?</p><p>In cases where there are no products in any of the contexts this functionreturns the array <code>[1, 2, 3]</code> instead of returning <code>nil</code> because <code>Array.each</code>returns the array and in the case where we don’t find the product we don’treturn early.</p><p>We can easily fix this by adding an extra return at the end of the function.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_product_in_current_contexts</span></span></span><br><span class="line">  context_ids = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">  context_ids.each <span class="keyword">do</span> <span class="params">|context_id|</span></span><br><span class="line">    product = Product.find_by(<span class="symbol">context_id:</span> context_id)</span><br><span class="line">    <span class="keyword">return</span> product <span class="keyword">if</span> product</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># if it reaches this point we haven't found a product</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>The fix is awkward, let us see if we can improve this.</p><p>We could use <code>.map</code> to find a product for every context and return the first not<code>nil</code> record like so:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_product_in_current_contexts</span></span></span><br><span class="line">  context_ids = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">  context_ids</span><br><span class="line">    .map &#123; <span class="params">|context_id|</span> Product.find_by(<span class="symbol">context_id:</span> context_id)&#125;</span><br><span class="line">    .find&#123;<span class="params">|x|</span> x &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>This looks much cleaner! And it doesn’t have the previous bug either. However,this code is not efficient, we want to return the first product we find for allthe contexts, and the above code always looks in all contexts even if it finds aproduct for the first context. We need to be lazy!</p><h2 id="Lazy-enumerator-for-the-win"><a href="#Lazy-enumerator-for-the-win" class="headerlink" title="Lazy enumerator for the win!"></a>Lazy enumerator for the win!</h2><p>Calling <code>.lazy</code> on an enumerable gives you a lazy enumerator and the neat thingabout that is it only executes the chain of functions as many times as needed.</p><p>Here is a short example which demonstrates its use:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(id)</span></span></span><br><span class="line">  puts <span class="string">"&gt; finding <span class="subst">#&#123;id&#125;</span>"</span></span><br><span class="line">  <span class="keyword">return</span> <span class="symbol">:product</span> <span class="keyword">if</span> id == <span class="number">2</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># without lazy</span></span><br><span class="line">(<span class="number">1</span>..<span class="number">3</span>).map&#123;<span class="params">|id|</span> find(id)&#125;.find&#123;<span class="params">|x|</span> x&#125;</span><br><span class="line"><span class="comment"># &gt; finding 1</span></span><br><span class="line"><span class="comment"># &gt; finding 2</span></span><br><span class="line"><span class="comment"># &gt; finding 3</span></span><br><span class="line"><span class="comment"># =&gt; :product</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The above `.map` gets executed for every element in the range every time!</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># using the lazy enumerator</span></span><br><span class="line">(<span class="number">1</span>..<span class="number">3</span>).lazy.map&#123;<span class="params">|id|</span> find(id)&#125;.find&#123;<span class="params">|x|</span> x&#125;</span><br><span class="line"><span class="comment"># &gt; finding 1</span></span><br><span class="line"><span class="comment"># &gt; finding 2</span></span><br><span class="line"><span class="comment"># =&gt; :product</span></span><br></pre></td></tr></table></figure><p>As you can see from the above example, the lazy enumerator executes only as manytimes as necessary. Here is another example from the ruby docs, to drive thepoint home:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">irb&gt; (<span class="number">1</span>..Float::INFINITY).lazy.select(&amp;<span class="symbol">:odd?</span>).drop(<span class="number">10</span>).take(<span class="number">2</span>).to_a</span><br><span class="line"><span class="comment"># =&gt; [21, 23]</span></span><br><span class="line"><span class="comment"># Without the lazy enumerator, this would crash your console!</span></span><br></pre></td></tr></table></figure><p>Now applying this to our code is pretty straightforward, we just need to add acall to <code>#.lazy</code> before we map and we are all set!</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_product_in_current_contexts</span></span></span><br><span class="line">  context_ids = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">  context_ids</span><br><span class="line">    .lazy <span class="comment"># this gives us the lazy enumerator</span></span><br><span class="line">    .map &#123; <span class="params">|context_id|</span> Product.find_by(<span class="symbol">context_id:</span> context_id)&#125;</span><br><span class="line">    .find&#123;<span class="params">|x|</span> x &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>Ah, nice functional ruby!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Today, I was working with some ruby code that had to find the first product in
one of the current contexts. Here is the code:&lt;/p&gt;
&lt;figure
      
    
    </summary>
    
    
      <category term="ruby" scheme="http://minhajuddin.com/tags/ruby/"/>
    
      <category term="lazy" scheme="http://minhajuddin.com/tags/lazy/"/>
    
      <category term="functional" scheme="http://minhajuddin.com/tags/functional/"/>
    
  </entry>
  
  <entry>
    <title>How to know which of the Enum functions to use in Elixir</title>
    <link href="http://minhajuddin.com/2020/07/18/how-to-know-which-of-the-enum-functions-to-use-in-elixir/"/>
    <id>http://minhajuddin.com/2020/07/18/how-to-know-which-of-the-enum-functions-to-use-in-elixir/</id>
    <published>2020-07-18T09:36:39.000Z</published>
    <updated>2021-03-07T19:31:47.201Z</updated>
    
    <content type="html"><![CDATA[<p>When you are writing functional code, it is sometimes difficult to figure outwhich of the <code>Enum</code> functions you want to use. Here are a few common use cases.</p><h2 id="Use-Enum-map"><a href="#Use-Enum-map" class="headerlink" title="Use Enum.map"></a>Use <code>Enum.map</code></h2><p>You can use <code>Enum.map</code> when you want to <em>transform</em> a set of elements intoanother set of elements. Also, note that the count of elements remainsunchanged. So, if you transform a list of 5 elements using <code>Enum.map</code>, you getan output list containing exactly 5 elements, However, the shape of the elementsmight be different.</p><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># transform names into their lengths</span></span><br><span class="line">iex&gt; Enum.map([<span class="string">"jack"</span>, <span class="string">"mujju"</span>, <span class="string">"danny boy"</span>], <span class="keyword">fn</span> x -&gt; String.length(x) <span class="keyword">end</span>)</span><br><span class="line">[<span class="number">4</span>, <span class="number">5</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><p>If you look at the count of input and output elements it remains the same,However, the shape is different, the input elements are all strings whereas theoutput elements are all numbers.</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># get ids of all users from a list of structs</span></span><br><span class="line">iex&gt; Enum.map([%&#123;<span class="symbol">id:</span> <span class="number">1</span>, <span class="symbol">name:</span> <span class="string">"Danny"</span>&#125;, %&#123;<span class="symbol">id:</span> <span class="number">2</span>, <span class="symbol">name:</span> <span class="string">"Mujju"</span>&#125;], <span class="keyword">fn</span> x -&gt; x.id <span class="keyword">end</span>)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>In this example we transform a list of maps to a list of numbers.</p><h2 id="Use-Enum-filter"><a href="#Use-Enum-filter" class="headerlink" title="Use Enum.filter"></a>Use <code>Enum.filter</code></h2><p>When you want to whittle down your input list, use <code>Enum.filter</code>, Filteringdoesn’t change the shape of the data, i.e. you are not transforming elements,and the shape of the input data will be the same as the shape of the outputdata. However, the count of elements will be different, to be more precise itwill be lesser or the same as the input list count.</p><h3 id="Examples-1"><a href="#Examples-1" class="headerlink" title="Examples"></a>Examples</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filter a list to only get names which start with `m`</span></span><br><span class="line">iex&gt; Enum.filter([<span class="string">"mujju"</span>, <span class="string">"danny"</span>, <span class="string">"min"</span>, <span class="string">"moe"</span>, <span class="string">"boe"</span>, <span class="string">"joe"</span>], <span class="keyword">fn</span> x -&gt; String.starts_with?(x, <span class="string">"m"</span>) <span class="keyword">end</span>)</span><br><span class="line">[<span class="string">"mujju"</span>, <span class="string">"min"</span>, <span class="string">"moe"</span>]</span><br></pre></td></tr></table></figure><p>The shape of data here is the same, we use a list of strings as the input andget a list of strings as an output, only the count has changed, in this case, wehave fewer elements.</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filter a list of users to only get active users</span></span><br><span class="line">iex&gt; Enum.filter([%&#123;<span class="symbol">id:</span> <span class="number">1</span>, <span class="symbol">name:</span> <span class="string">"Danny"</span>, <span class="symbol">active:</span> <span class="keyword">true</span>&#125;, %&#123;<span class="symbol">id:</span> <span class="number">2</span>, <span class="symbol">name:</span> <span class="string">"Mujju"</span>, <span class="symbol">active:</span> <span class="keyword">false</span>&#125;], <span class="keyword">fn</span> x -&gt; x.active <span class="keyword">end</span>)</span><br><span class="line">[%&#123;<span class="symbol">active:</span> <span class="keyword">true</span>, <span class="symbol">id:</span> <span class="number">1</span>, <span class="symbol">name:</span> <span class="string">"Danny"</span>&#125;]</span><br></pre></td></tr></table></figure><p>In this example too, the shape of the input elements is a map (user) and theshape of output elements is still a map.</p><h2 id="Use-Enum-reduce"><a href="#Use-Enum-reduce" class="headerlink" title="Use Enum.reduce"></a>Use <code>Enum.reduce</code></h2><p>The last of the commonly used <code>Enum</code> functions is <code>Enum.reduce</code> and it is alsoone of the most powerful functions. You can use <code>Enum.reduce</code> when you need tochange the shape of the input list into something else, for instance a <code>map</code> or a<code>number</code>.</p><h3 id="Examples-2"><a href="#Examples-2" class="headerlink" title="Examples"></a>Examples</h3><p>Change a list of elements into a number by computing its product or sum</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">iex&gt; Enum.reduce(</span><br><span class="line">  _input_enumberable = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">  _start_value_of_acc = <span class="number">1</span>,</span><br><span class="line">  <span class="keyword">fn</span> x, acc -&gt; x * acc <span class="keyword">end</span>)</span><br><span class="line"><span class="number">24</span></span><br><span class="line"></span><br><span class="line">iex&gt; Enum.reduce(</span><br><span class="line">  _input_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">  _start_value_of_acc = <span class="number">0</span>,</span><br><span class="line">  <span class="keyword">fn</span> x, acc -&gt; x + acc <span class="keyword">end</span>)</span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><p><code>Enum.reduce</code> takes three arguments, the first is the input enumerable, which isusually a list or map, the second is the starting value of the accumulator andthe third is a function which is applied for each element<strong>whose result is then sent to the next function application as the accumulator</strong>.</p><p>Let’s try and understand this using an equivalent javascript example.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// input list</span></span><br><span class="line"><span class="keyword">const</span> inputList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// starting value of accumulator, we want to chose this wisely, for instance</span></span><br><span class="line"><span class="comment">// when we want addition, we should use a `0` as the start value to avoid</span></span><br><span class="line"><span class="comment">// impacting the output and if you want to compute a product we use a `1`, this</span></span><br><span class="line"><span class="comment">// is usually called the identity element for the function: https://en.wikipedia.org/wiki/Identity_element</span></span><br><span class="line"><span class="comment">// It is also the value that is returned when the input list is empty</span></span><br><span class="line"><span class="keyword">let</span> acc = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// loop over all the input elements and for each element compute the new</span></span><br><span class="line"><span class="comment">// accumulator as the sum of the current accumulator and the current element</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> x <span class="keyword">of</span> inputList) &#123;</span><br><span class="line">  <span class="comment">// compute the next value of our accumulator, in our Elixir code this is</span></span><br><span class="line">  <span class="comment">// done by the third argument which is a function which gets `x` and `acc`</span></span><br><span class="line">  acc = acc + x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// in Elixir, the final value of the accumulator is returned</span></span><br></pre></td></tr></table></figure><p>Let’s look at another example of converting an employee list into a mapcontaining an employee id and their name.</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">iex&gt; Enum.reduce(</span><br><span class="line">  _input_list = [%&#123;<span class="symbol">id:</span> <span class="number">1</span>, <span class="symbol">name:</span> <span class="string">"Danny"</span>&#125;, %&#123;<span class="symbol">id:</span> <span class="number">2</span>, <span class="symbol">name:</span> <span class="string">"Mujju"</span>&#125;],</span><br><span class="line">  _start_value_of_acc = %&#123;&#125;,</span><br><span class="line">  <span class="keyword">fn</span> x, acc -&gt; Map.put(acc, x.id, x.name) <span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line">%&#123;<span class="number">1</span> =&gt; <span class="string">"Danny"</span>, <span class="number">2</span> =&gt; <span class="string">"Mujju"</span>&#125;</span><br></pre></td></tr></table></figure><p>So, in a map you end up reducing an input list into one output value.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;When you are writing functional code, it is sometimes difficult to figure out
which of the &lt;code&gt;Enum&lt;/code&gt; functions you want to use. H
      
    
    </summary>
    
    
      <category term="Enum" scheme="http://minhajuddin.com/tags/enum/"/>
    
      <category term="Functional Programming" scheme="http://minhajuddin.com/tags/functional-programming/"/>
    
      <category term="map" scheme="http://minhajuddin.com/tags/map/"/>
    
      <category term="reduce" scheme="http://minhajuddin.com/tags/reduce/"/>
    
      <category term="filter" scheme="http://minhajuddin.com/tags/filter/"/>
    
  </entry>
  
  <entry>
    <title>How to control the enqueuing speed of Sidekiq jobs and their concurrency</title>
    <link href="http://minhajuddin.com/2020/07/13/how-to-control-enqueuing-speed-of-sidekiq-jobs-and-their-execution-concurrency/"/>
    <id>http://minhajuddin.com/2020/07/13/how-to-control-enqueuing-speed-of-sidekiq-jobs-and-their-execution-concurrency/</id>
    <published>2020-07-13T18:55:04.000Z</published>
    <updated>2021-03-07T19:31:47.197Z</updated>
    
    <content type="html"><![CDATA[<p>At my work, we use ruby heavily and sidekiq is an essential part of our stack.Sometimes, I long for the concurrency primitives from Elixir, but that’s notwhat today’s post is about.</p><p>A few days ago, I caused a minor incident by overloading our databases. Havingbeen away from ruby for a bit, I had forgotten that sidekiq runs multiplethreads per each worker instance. So, I ended up enqueuing about 10K jobs onSidekiq, and Sidekiq started executing them immediately. We have 50 workerinstances and run Sidekiq with a concurrency of 20. So, essentially we had 400worker threads ready to start crunching these jobs. Coincidentally we have 400database connections available and my batch background job ended up consumingall the connections for 5 minutes during which the other parts ofthe application were connection starved and started throwing errors 😬.</p><p>That was a dumb mistake. Whenever you find yourself making a dumb mistake,make sure that no one else can repeat that mistake. To fix that, we could set upour database with multiple users in such a way that the web app would connectwith a user which could only open a maximum of 100 connections, the backgroundworker with a user with its own limits and, so on. This would stop these kinds ofproblems from happening again. However, we’ll get there when we get there, asthis would require infrastructure changes.</p><p>I had another batch job lined up which had to process millions of rows in asimilar fashion. And, I started looking for solutions. A few solutions that weresuggested were to run these jobs on a single worker or a small set of workers,you can do this by having a custom queue for this job and executing a separatesidekiq instance just for this one queue. However, that would require someinfrastructure work. So, I started looking at other options.</p><p>I thought that redis might have something to help us here, and it did! So, redisallows you to make blocking pops from a list using the <code>BLPOP</code> function. So, ifyou run <code>BLPOP myjob 10</code>, it will pop the first available element in the list,However, if the list is empty, it will block for 10 seconds during which if anelement is inserted, it will pop it and return its value. Using this knowledge,I thought we could control the enqueuing based on the elements in the list. Theidea is simple.</p><ol><li>Before the background job starts, I would seed this list with <code>n</code> elementswhere <code>n</code> is the desired concurrency. So, if I seed this list with <code>2</code>elements, Sidekiq would execute only 2 jobs at any point in time, regardlessof the number of worker instances/concurrency of sidekiq workers.</li><li>The way this is enforced is by the enqueue function using a <code>BLPOP</code> before itenqueues, so, as soon as the enqueuer starts, it pops the first 2 elements fromthe redis list and enqueues 2 jobs. At this point, the enqueuer is stuck till weadd more elements to the list.</li><li>That’s where the background jobs come into play, at the end of eachbackground job, we add one element back to the list using <code>LPUSH</code> and as soonas an element is added the enqueuer which is blocked at <code>BLPOP</code> pops thiselement and enqueues another job. This goes on till all your background jobsare enqueued, all the while making sure that there are never more than 2 jobsat any given time.</li></ol><p>Let’s put this into concrete ruby code.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">ControlledConcurrency</span></span></span><br><span class="line">  <span class="comment"># I love module_function</span></span><br><span class="line">  module_function</span><br><span class="line"></span><br><span class="line">  <span class="comment"># The name of our list needs to be constant per worker type, you could</span></span><br><span class="line">  <span class="comment"># probably extract this into a Sidekiq middleware with a little effort</span></span><br><span class="line">  LIST_NAME = <span class="string">"migrate"</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setup</span><span class="params">(<span class="symbol">concurrency:</span>)</span></span></span><br><span class="line">    <span class="comment"># if our list already has elements before we start, our concurrency will be</span></span><br><span class="line">    <span class="comment"># screwed, so, this is a safety check!</span></span><br><span class="line">    slot_count = Redis.current.llen(LIST_NAME)</span><br><span class="line">    raise <span class="string">"Key '<span class="subst">#&#123;LIST_NAME&#125;</span>' is being used, it already has <span class="subst">#&#123;slot_count&#125;</span> slots"</span> <span class="keyword">if</span> slot_count &gt; <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Seed our list with as many items as the concurrency, the contents of this</span></span><br><span class="line">    <span class="comment"># list don't matter.</span></span><br><span class="line">    Redis.current.lpush(LIST_NAME, concurrency.times.to_a)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># A helper function to bump up concurrency if you need to</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">increase_concurrency</span><span class="params">(n = <span class="number">1</span>)</span></span></span><br><span class="line">    Redis.current.lpush(LIST_NAME, n.times.to_a)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># A helper function to bump the concurrency down if you need to</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">decrease_concurrency</span><span class="params">(n = <span class="number">1</span>)</span></span></span><br><span class="line">    n.times <span class="keyword">do</span></span><br><span class="line">      puts <span class="string">"&gt; waiting"</span></span><br><span class="line">      Redis.current.blpop(LIST_NAME)</span><br><span class="line">      puts <span class="string">"&gt; decrease by 1"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># This is our core enqueuer, it runs in a loop because our blpop might get a</span></span><br><span class="line">  <span class="comment"># timeout and return nil, we keep trying till it returns a value</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">nq</span><span class="params">(&amp;block)</span></span></span><br><span class="line">    loop <span class="keyword">do</span></span><br><span class="line">      puts <span class="string">"&gt; waiting to enqueue"</span></span><br><span class="line">      slot = Redis.current.blpop(LIST_NAME)</span><br><span class="line">      <span class="keyword">if</span> slot</span><br><span class="line">        puts <span class="string">"&gt; found slot <span class="subst">#&#123;slot&#125;</span>"</span></span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Function which allow background workers to signal that a job has been</span></span><br><span class="line">  <span class="comment"># completed, so that the enqueuer can nq more jobs.</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">return_slot</span></span></span><br><span class="line">    puts <span class="string">"&gt; returning slot"</span></span><br><span class="line">    Redis.current.lpush(LIST_NAME, <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This is our Sidekiq worker</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HardWorker</span></span></span><br><span class="line">  <span class="keyword">include</span> Sidekiq::Worker</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Our set up doesn't enforce concurrency across retries, if you want this,</span></span><br><span class="line">  <span class="comment"># you'll probably have to tweak the code a little more :)</span></span><br><span class="line">  sidekiq_options <span class="symbol">retry:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># the only custom code here is in the ensure block</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">perform</span><span class="params">(user_id)</span></span></span><br><span class="line">    puts <span class="string">"&gt; start: <span class="subst">#&#123;user_id&#125;</span>"</span></span><br><span class="line">    <span class="comment"># mock work</span></span><br><span class="line">    sleep <span class="number">1</span></span><br><span class="line">    puts <span class="string">"&gt; finish: <span class="subst">#&#123;user_id&#125;</span>"</span></span><br><span class="line">  <span class="keyword">ensure</span></span><br><span class="line">    <span class="comment"># make sure that we return this slot at the end of the background job, so</span></span><br><span class="line">    <span class="comment"># that the next job can be enqueued. This doesn't handle retries because of</span></span><br><span class="line">    <span class="comment"># failures, we disabled retries for our job, but if you have them enabled,</span></span><br><span class="line">    <span class="comment"># you might end up having more jobs than the set concurrency because of</span></span><br><span class="line">    <span class="comment"># retried jobs.</span></span><br><span class="line">    ControlledConcurrency.return_slot</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ./concurrency_setter.rb</span></span><br><span class="line">ControlledConcurrency.setup(<span class="symbol">concurrency:</span> ARGV.first.to_i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ./enqueuer.rb</span></span><br><span class="line"><span class="comment"># Before running the enqueuer, we need to set up the concurrency using the above script</span></span><br><span class="line"><span class="comment"># This our enqueuer and it makes sure that the block passed to</span></span><br><span class="line"><span class="comment"># ControlledConcurrency.nq doesn't enqueue more jobs that our concurrency</span></span><br><span class="line"><span class="comment"># setting.</span></span><br><span class="line"><span class="number">100</span>.times <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">  ControlledConcurrency.nq <span class="keyword">do</span></span><br><span class="line">    puts <span class="string">"&gt; enqueuing user_id: <span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line">    HardWorker.perform_async(i)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>That’s all folks! Hope you find this useful!</p><p>The full code for this can be found at: <a href="https://github.com/minhajuddin/sidekiq-controlled-concurrency" target="_blank" rel="noopener">https://github.com/minhajuddin/sidekiq-controlled-concurrency</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;At my work, we use ruby heavily and sidekiq is an essential part of our stack.
Sometimes, I long for the concurrency primitives from Elix
      
    
    </summary>
    
    
      <category term="Redis" scheme="http://minhajuddin.com/tags/redis/"/>
    
      <category term="Sidekiq" scheme="http://minhajuddin.com/tags/sidekiq/"/>
    
      <category term="Concurrency" scheme="http://minhajuddin.com/tags/concurrency/"/>
    
      <category term="Ruby" scheme="http://minhajuddin.com/tags/ruby/"/>
    
      <category term="Enqueue" scheme="http://minhajuddin.com/tags/enqueue/"/>
    
      <category term="Backpressure" scheme="http://minhajuddin.com/tags/backpressure/"/>
    
  </entry>
  
  <entry>
    <title>How to create a web server using Cowboy without Plug or Phoenix - Part 01</title>
    <link href="http://minhajuddin.com/2020/06/05/how-to-create-a-web-server-using-cowboy-without-plug/"/>
    <id>http://minhajuddin.com/2020/06/05/how-to-create-a-web-server-using-cowboy-without-plug/</id>
    <published>2020-06-05T17:33:48.000Z</published>
    <updated>2021-03-07T19:31:47.197Z</updated>
    
    <content type="html"><![CDATA[<p>Cowboy is an amazing web server that is used by Plug/Phoenix out of the box, Idon’t think Phoenix supports any other web servers at the moment. However, the<a href="https://github.com/elixir-plug/plug/blob/master/lib/plug/conn/adapter.ex" target="_blank" rel="noopener">plugadapter</a>is fairly abstracted, and plug implements this adapter for cowboy through the<a href="https://github.com/elixir-plug/plug_cowboy/" target="_blank" rel="noopener">plug_cowboy</a> hex package. Intheory, you should be able to write a new adapter if you just implement the <a href="https://github.com/elixir-plug/plug/blob/master/lib/plug/conn/adapter.ex" target="_blank" rel="noopener">Plugadapter <abbr title="That's not a typo :) it comes from the british heritage ofErlang">behaviour</abbr></a>.The plug cowboy adapter has a lot of interesting code and you’ll learn a lotfrom reading it. Anyway, this blog post isn’t about Plug or Phoenix. I wanted toshow off how you can create a simple Cowboy server without using Plug or Phoenix(I had to learn how to do this while creating my side project<a href="https://webpipe.hyperngn.com/" target="_blank" rel="noopener">webpipe</a>)</p><p>We want an application which spins up a cowboy server and renders a hello worldmessage. Here is the required code for that:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Hello</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="comment"># The handler module which handles all requests, its `init` function is called</span></span><br><span class="line">  <span class="comment"># by Cowboy for all matching requests.</span></span><br><span class="line">  <span class="class"><span class="keyword">defmodule</span> <span class="title">Handler</span></span> <span class="keyword">do</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init</span></span>(req, _opts) <span class="keyword">do</span></span><br><span class="line">      resp =</span><br><span class="line">        <span class="symbol">:cowboy_req</span>.reply(</span><br><span class="line">          _status = <span class="number">200</span>,</span><br><span class="line">          _headers = %&#123;<span class="string">"content-type"</span> =&gt; <span class="string">"text/html; charset=utf-8"</span>&#125;,</span><br><span class="line">          _body = <span class="string">"&lt;!doctype html&gt;&lt;h1&gt;Hello, Cowboy!&lt;/h1&gt;"</span>,</span><br><span class="line">          _request = req</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">      &#123;<span class="symbol">:ok</span>, resp, []&#125;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">start</span></span> <span class="keyword">do</span></span><br><span class="line">    <span class="comment"># compile the routes</span></span><br><span class="line">    routes =</span><br><span class="line">      <span class="symbol">:cowboy_router</span>.compile([</span><br><span class="line">        &#123;<span class="symbol">:_</span>,</span><br><span class="line">         [</span><br><span class="line">           <span class="comment"># &#123; wildcard, handler module (needs to have an init function), options &#125;</span></span><br><span class="line">           &#123;<span class="symbol">:_</span>, Handler, []&#125;</span><br><span class="line">         ]&#125;</span><br><span class="line">      ])</span><br><span class="line"></span><br><span class="line">    require Logger</span><br><span class="line">    Logger.info(<span class="string">"Staring server at http://localhost:4001/"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># start an http server</span></span><br><span class="line">    <span class="symbol">:cowboy</span>.start_clear(</span><br><span class="line">      <span class="symbol">:hello_http</span>,</span><br><span class="line">      [<span class="symbol">port:</span> <span class="number">4001</span>],</span><br><span class="line">      %&#123;<span class="symbol">env:</span> %&#123;<span class="symbol">dispatch:</span> routes&#125;&#125;</span><br><span class="line">    )</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>And, here is a quick test to assert that it works!</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">HelloTest</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">use</span> ExUnit.Case</span><br><span class="line"></span><br><span class="line">  test <span class="string">"returns hello world"</span> <span class="keyword">do</span></span><br><span class="line">    assert &#123;<span class="symbol">:ok</span>, &#123;&#123;<span class="string">'HTTP/1.1'</span>, <span class="number">200</span>, <span class="string">'OK'</span>&#125;, _headers, <span class="string">'&lt;!doctype html&gt;&lt;h1&gt;Hello, Cowboy!&lt;/h1&gt;'</span>&#125;&#125; =</span><br><span class="line">             <span class="symbol">:httpc</span>.request(<span class="string">'http://localhost:4001/'</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/hyperngn/cowboy-examples/tree/master/hello" target="_blank" rel="noopener">Full code on GitHub</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Cowboy is an amazing web server that is used by Plug/Phoenix out of the box, I
don’t think Phoenix supports any other web servers at the 
      
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="Cowboy" scheme="http://minhajuddin.com/tags/cowboy/"/>
    
      <category term="Webpipe" scheme="http://minhajuddin.com/tags/webpipe/"/>
    
      <category term="Phoenix" scheme="http://minhajuddin.com/tags/phoenix/"/>
    
      <category term="Plug" scheme="http://minhajuddin.com/tags/plug/"/>
    
  </entry>
  
  <entry>
    <title>My first SVG creation</title>
    <link href="http://minhajuddin.com/2020/05/17/my-first-svg-creation/"/>
    <id>http://minhajuddin.com/2020/05/17/my-first-svg-creation/</id>
    <published>2020-05-17T17:51:15.000Z</published>
    <updated>2021-03-07T19:31:47.205Z</updated>
    
    <content type="html"><![CDATA[<p>SVG is amazing, I want to design the logo of my next company using it!</p><svg style="border: solid 1px #0f0" viewbox="0 0 200 200" stroke="#44337a" fill="#6b46c1">      <circle cx="100" cy="100" r="80" fill="none"/>      <circle cx="60" cy="60" r="10" fill="none" stroke="black"/>      <circle cx="60" cy="60" r="6" fill="#0074D9" stroke="none"/>      <circle cx="140" cy="60" r="10" fill="none" stroke="black"/>      <circle cx="140" cy="60" r="6" fill="#0074D9" stroke="none"/>      <path d="               M 90,140               A 8 5 0 1 0 110,140               z               " fill="none"/>      <circle cx="100" cy="100" r="20" fill="#FF4136" stroke="none"/>    </svg><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg style=&apos;border: solid 1px #0f0&apos; viewbox=&apos;0 0 200 200&apos; stroke=&quot;#44337a&quot; fill=&apos;#6b46c1&apos;&gt;</span><br><span class="line">      &lt;circle cx=100 cy=100 r=80 fill=none /&gt;</span><br><span class="line"></span><br><span class="line">      &lt;circle cx=60 cy=60 r=10 fill=none stroke=black /&gt;</span><br><span class="line">      &lt;circle cx=60 cy=60 r=6 fill=#0074D9 stroke=none /&gt;</span><br><span class="line"></span><br><span class="line">      &lt;circle cx=140 cy=60 r=10 fill=none stroke=black /&gt;</span><br><span class="line">      &lt;circle cx=140 cy=60 r=6 fill=#0074D9 stroke=none /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &lt;path d=&quot;</span><br><span class="line">               M 90,140</span><br><span class="line">               A 8 5 0 1 0 110,140</span><br><span class="line">               z</span><br><span class="line">               &quot; fill=none /&gt;</span><br><span class="line"></span><br><span class="line">      &lt;circle cx=100 cy=100 r=20 fill=#FF4136 stroke=none /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/svg&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;SVG is amazing, I want to design the logo of my next company using it!&lt;/p&gt;
&lt;svg style=&quot;border: solid 1px #0f0&quot; viewbox=&quot;0 0 200 200&quot; stro
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>many_to_many relationships in Ecto and Phoenix - Screencast - Part 2</title>
    <link href="http://minhajuddin.com/2020/05/17/many-to-many-relationships-in-ecto-and-phoenix-screencast-part-2/"/>
    <id>http://minhajuddin.com/2020/05/17/many-to-many-relationships-in-ecto-and-phoenix-screencast-part-2/</id>
    <published>2020-05-17T00:00:00.000Z</published>
    <updated>2021-03-07T19:31:47.205Z</updated>
    
    <content type="html"><![CDATA[<div class="video-container"><iframe src="//www.youtube.com/embed/_ut8o0fdXRo" frameborder="0" allowfullscreen></iframe></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/_ut8o0fdXRo&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;

      
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="Phoenix" scheme="http://minhajuddin.com/tags/phoenix/"/>
    
      <category term="Ecto" scheme="http://minhajuddin.com/tags/ecto/"/>
    
      <category term="many_to_many" scheme="http://minhajuddin.com/tags/many-to-many/"/>
    
      <category term="Tags" scheme="http://minhajuddin.com/tags/tags/"/>
    
      <category term="relationships" scheme="http://minhajuddin.com/tags/relationships/"/>
    
  </entry>
  
  <entry>
    <title>many_to_many relationships in Ecto and Phoenix - Screencast - Part 1</title>
    <link href="http://minhajuddin.com/2020/05/11/many-to-many-relationships-in-ecto-and-phoenix-screencast-part-1/"/>
    <id>http://minhajuddin.com/2020/05/11/many-to-many-relationships-in-ecto-and-phoenix-screencast-part-1/</id>
    <published>2020-05-11T11:18:05.000Z</published>
    <updated>2021-03-07T19:31:47.205Z</updated>
    
    <content type="html"><![CDATA[<div class="video-container"><iframe src="//www.youtube.com/embed/Cl2U_8XtUBM" frameborder="0" allowfullscreen></iframe></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/Cl2U_8XtUBM&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;

      
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="Phoenix" scheme="http://minhajuddin.com/tags/phoenix/"/>
    
      <category term="Ecto" scheme="http://minhajuddin.com/tags/ecto/"/>
    
      <category term="many_to_many" scheme="http://minhajuddin.com/tags/many-to-many/"/>
    
      <category term="Tags" scheme="http://minhajuddin.com/tags/tags/"/>
    
      <category term="relationships" scheme="http://minhajuddin.com/tags/relationships/"/>
    
  </entry>
  
  <entry>
    <title>How to use a single aurora cluster for multiple databases each with its own restricted user</title>
    <link href="http://minhajuddin.com/2020/05/09/how-to-use-a-single-aurora-cluster-for-multiple-databases-each-with-its-own-restricted-user/"/>
    <id>http://minhajuddin.com/2020/05/09/how-to-use-a-single-aurora-cluster-for-multiple-databases-each-with-its-own-restricted-user/</id>
    <published>2020-05-09T15:58:55.000Z</published>
    <updated>2021-03-07T19:31:47.201Z</updated>
    
    <content type="html"><![CDATA[<p>I have been playing around with terraform for the last few days and it is anamazing tool to manage infrastructure. For my AWS infrastructure I needed anaurora postgresql cluster which would allow hosting of multiple databases, eachfor one of my side projects, while also keeping them isolated and preventingan app user from accessing other app’s databases.</p><img src="/2020/05/09/how-to-use-a-single-aurora-cluster-for-multiple-databases-each-with-its-own-restricted-user/db.png"><p><a href="https://www.terraform.io/docs/providers/postgresql/index.html" target="_blank" rel="noopener">Terraform has an awesome postgresqlprovider</a> whichcan be used for managing databases, However there are a few parts which aretricky and needed trial and error to get right.</p><h2 id="Connecting-to-an-RDS-database-via-an-SSH-tunnel"><a href="#Connecting-to-an-RDS-database-via-an-SSH-tunnel" class="headerlink" title="Connecting to an RDS database via an SSH tunnel"></a>Connecting to an RDS database via an SSH tunnel</h2><p>The first roadblock was that my RDS cluster wasn’t accessible publicly (which ishow it should be for security reasons). I do have a <a href="https://minhajuddin.com/2020/05/06/how-to-create-temporary-bastion-ec2-instances-using-terraform/">way to connect to mypostgres servers via a bastionhost</a>.I thought we could use an SSH tunnel over the bastion host to get to our RDScluster from my local computer. However, terraform doesn’t supportconnecting to the postgres server over an SSH tunnel via its configuration.</p><p>So, it required a little bit of jerry-rigging. The postgresql provider was happyas long as it could reach the postgres cluster using a host, port and password.So, I set up a local tunnel outside terraform via my SSH config like so:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Host bastion</span><br><span class="line">Hostname ec2-180-21-145-48.us-east-2.compute.amazonaws.com</span><br><span class="line">IdentityFile ~/.ssh/aws_ssh.pem</span><br><span class="line"></span><br><span class="line">Host ecs1-pg</span><br><span class="line">  LocalForward localhost:3333 hn-aurora-pg-1.hosturl.us-east-2.rds.amazonaws.com:5432</span><br><span class="line"></span><br><span class="line">Host ecs1 ecs1-pg</span><br><span class="line">  Hostname 20.10.22.214</span><br><span class="line">  User ec2-user</span><br><span class="line">  IdentityFile ~/.ssh/aws_ssh.pem</span><br><span class="line">  ForwardAgent yes</span><br><span class="line">  ProxyJump bastion</span><br></pre></td></tr></table></figure><p>The relevant line here is the <code>LocalForward</code> declaration which wires up a localport forward so that when you network traffic hits port <code>3333</code> on your<code>localhost</code> it is tunneled over the bastion and then the ecs server and isrouted to your cluster’s port <code>5432</code>. One thing to note here is that your ecscluster should be able to connect to your RDS cluster via proper security grouprules.</p><h2 id="Setting-up-the-postgres-provider"><a href="#Setting-up-the-postgres-provider" class="headerlink" title="Setting up the postgres provider"></a>Setting up the postgres provider</h2><p>Once you have the ssh tunnel set up, you can start wiring up your postgresprovider for terraform like so:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">provider &quot;postgresql&quot; &#123;</span><br><span class="line">  version = &quot;~&gt; 1.5&quot;</span><br><span class="line"></span><br><span class="line">  # LocalForwarded on the local computer via an SSH tunnel to</span><br><span class="line">  # module.hn_db.this_rds_cluster_endpoint</span><br><span class="line">  # via</span><br><span class="line">  # LocalForward localhost:3333 module.hn_db.this_rds_cluster_endpoint:5432</span><br><span class="line">  host            = &quot;localhost&quot;</span><br><span class="line">  port            = 3333</span><br><span class="line">  username        = &quot;root&quot;</span><br><span class="line">  superuser       = false</span><br><span class="line">  password        = module.hn_db.this_rds_cluster_master_password</span><br><span class="line">  sslmode         = &quot;require&quot;</span><br><span class="line">  connect_timeout = 15</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The provider config is pretty straightforward, we point it to <code>localhost:3333</code>with a <code>root</code> user (which is the master user created by the rds cluster). So,when you connect to <code>localhost:3333</code>, you are actually connecting to the RDScluster through an SSH tunnel (make sure that your ssh connection is open atthis point via <code>ssh ecs1-pg</code> in a separate terminal). We also need to set the<code>superuser</code> to <code>false</code> because RDS doesn’t give us a postgres superuser, gettingthis wrong initially caused me a lot of frustration.</p><h2 id="Setting-up-the-database-and-it’s-user"><a href="#Setting-up-the-database-and-it’s-user" class="headerlink" title="Setting up the database and it’s user"></a>Setting up the database and it’s user</h2><p>Now that our cluster connectivity is set up, we can start creating the databasesand users, each for one of our apps.</p><p>Below is a sensible configuration for a database called <code>liveform_prod</code> and it’suser called <code>liveform</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">locals &#123;</span><br><span class="line">  lf_connection_limit  = 5</span><br><span class="line">  lf_statement_timeout = 60000 # 1 minute</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;postgresql_database&quot; &quot;liveform_db&quot; &#123;</span><br><span class="line">  name             = &quot;liveform_prod&quot;</span><br><span class="line">  owner            = postgresql_role.liveform_db_role.name</span><br><span class="line">  connection_limit = local.lf_connection_limit</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;postgresql_role&quot; &quot;liveform_db_role&quot; &#123;</span><br><span class="line">  name              = &quot;liveform&quot;</span><br><span class="line">  login             = true</span><br><span class="line">  password          = random_password.liveform_db_password.result</span><br><span class="line">  connection_limit  = local.lf_connection_limit</span><br><span class="line">  statement_timeout = local.lf_statement_timeout</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;random_password&quot; &quot;liveform_db_password&quot; &#123;</span><br><span class="line">  length  = 40</span><br><span class="line">  special = false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &quot;liveform_db_password&quot; &#123;</span><br><span class="line">  description = &quot;Liveform db password&quot;</span><br><span class="line">  value       = random_password.liveform_db_password.result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A few things to note here:</p><ol><li>The database <code>liveform_prod</code> is owned by a new user called <code>liveform</code>.</li><li>It has a connection limit of <code>5</code>, You should always set a sensibleconnection limit to prevent this app from crashing the cluster.</li><li>The db user too has a connection limit of <code>5</code> and a statement timeout of 1minute which is big enough for web apps, you should set it to the leastduration which works for your app.</li><li>A random password (via the <code>random_password</code> resource) is used as thepassword of our new <code>liveform</code> role. This can be viewed by running<code>terraform show</code></li></ol><h2 id="Isolating-this-database-from-other-users"><a href="#Isolating-this-database-from-other-users" class="headerlink" title="Isolating this database from other users"></a>Isolating this database from other users</h2><p>By default postgres allows all users to connect to all databases and create/viewfrom all the tables. We want our databases to be isolated properly so that auser for one app cannot access another app’s database. This requires running ofsome SQL on the newly created database. We can easily do this using a<code>null_resource</code> and a <code>local-exec</code> provisioner like so:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">resource &quot;null_resource&quot; &quot;liveform_db_after_create&quot; &#123;</span><br><span class="line">  depends_on = [</span><br><span class="line">    postgresql_database.liveform_db,</span><br><span class="line">    postgresql_role.liveform_db_role</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  provisioner &quot;local-exec&quot; &#123;</span><br><span class="line">    command = &quot;./pg_database_roles_setup.sh&quot;</span><br><span class="line">    environment = &#123;</span><br><span class="line">      PG_DB_ROLE_NAME = postgresql_role.liveform_db_role.name</span><br><span class="line">      PG_DB_NAME      = postgresql_database.liveform_db.name</span><br><span class="line">      PGPASSWORD      = random_password.liveform_db_password.result</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>./pg_database_roles_setup.sh</code> script:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="comment"># This needs an SSH TUNNEL to be set up</span></span><br><span class="line"><span class="comment"># password needs to be supplied via the PGPASSWORD env var</span></span><br><span class="line">psql --host <span class="string">"localhost"</span> \</span><br><span class="line">    --port <span class="string">"3333"</span> \</span><br><span class="line">    --username <span class="string">"<span class="variable">$PG_DB_ROLE_NAME</span>"</span> \</span><br><span class="line">    --dbname <span class="string">"<span class="variable">$PG_DB_NAME</span>"</span> \</span><br><span class="line">    --file - &lt;&lt;SQL</span><br><span class="line">  REVOKE CONNECT ON DATABASE <span class="variable">$PG_DB_NAME</span> FROM PUBLIC;</span><br><span class="line">  GRANT CONNECT ON DATABASE <span class="variable">$PG_DB_NAME</span> TO <span class="variable">$PG_DB_ROLE_NAME</span>;</span><br><span class="line">  GRANT CONNECT ON DATABASE <span class="variable">$PG_DB_NAME</span> TO root;</span><br><span class="line">SQL</span><br></pre></td></tr></table></figure><p>The <code>pg_database_roles_setup.sh</code> script connects to our rds cluster over the SSHtunnel to the newly created database as the newly created user and revokesconnect privileges for all users on this database, and then adds connectprivileges to the app user and the root user. You can add more queries to thisscript that you might want to run after the database is set up. Finally, the<code>local-exec</code> provisioner passes the right data via environment variables andcalls the database setup script.</p><h2 id="Gotchas"><a href="#Gotchas" class="headerlink" title="Gotchas"></a>Gotchas</h2><p>If you create a <code>posgresql_role</code> before setting the connection’s <code>superuser</code> to<code>false</code>, you’ll get stuck trying to update or delete the new role. To work aroundthis, manually log in to the rds cluster via psql and <code>DROP</code> the role, and removethis state from terraform using: <code>terraform state rmpostgresql_role.liveform_db_role</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I have been playing around with terraform for the last few days and it is an
amazing tool to manage infrastructure. For my AWS infrastruc
      
    
    </summary>
    
    
      <category term="AWS" scheme="http://minhajuddin.com/tags/aws/"/>
    
      <category term="Terraform" scheme="http://minhajuddin.com/tags/terraform/"/>
    
      <category term="Aurora" scheme="http://minhajuddin.com/tags/aurora/"/>
    
      <category term="RDS" scheme="http://minhajuddin.com/tags/rds/"/>
    
      <category term="Postgres" scheme="http://minhajuddin.com/tags/postgres/"/>
    
      <category term="Multiple" scheme="http://minhajuddin.com/tags/multiple/"/>
    
      <category term="Restricted" scheme="http://minhajuddin.com/tags/restricted/"/>
    
      <category term="Isolated" scheme="http://minhajuddin.com/tags/isolated/"/>
    
      <category term="User" scheme="http://minhajuddin.com/tags/user/"/>
    
      <category term="Postgres provider" scheme="http://minhajuddin.com/tags/postgres-provider/"/>
    
  </entry>
  
  <entry>
    <title>How to create temporary bastion EC2 instances using Terraform</title>
    <link href="http://minhajuddin.com/2020/05/06/how-to-create-temporary-bastion-ec2-instances-using-terraform/"/>
    <id>http://minhajuddin.com/2020/05/06/how-to-create-temporary-bastion-ec2-instances-using-terraform/</id>
    <published>2020-05-06T12:02:47.000Z</published>
    <updated>2021-03-07T19:31:47.201Z</updated>
    
    <content type="html"><![CDATA[<p>I have recently started learning Terraform to manage my AWS resources, And it isa great tool for maintaining your infrastructure! I use a <a href="https://en.wikipedia.org/wiki/Bastion_host" target="_blank" rel="noopener">Bastionhost</a> to SSH into my main serversand bring up the bastion host on demand only when I need it giving me some costsavings. Here are the required Terraform files to get this working.</p><p>Set up the <code>bastion.tf</code> file like so:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"># get a reference to aws_ami.id using a data resource by finding the right AMI</span><br><span class="line">data &quot;aws_ami&quot; &quot;ubuntu&quot; &#123;</span><br><span class="line">  # pick the most recent version of the AMI</span><br><span class="line">  most_recent = true</span><br><span class="line"></span><br><span class="line">  # Find the 20.04 image</span><br><span class="line">  filter &#123;</span><br><span class="line">    name   = &quot;name&quot;</span><br><span class="line">    values = [&quot;ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*&quot;]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  # With the right virtualization type</span><br><span class="line">  filter &#123;</span><br><span class="line">    name   = &quot;virtualization-type&quot;</span><br><span class="line">    values = [&quot;hvm&quot;]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  # And the image should be published by Canonical (which is a trusted source)</span><br><span class="line">  owners = [&quot;099720109477&quot;] # Canonical&apos;s owner_id don&apos;t change this</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Configuration for your bastion EC2 instance</span><br><span class="line">resource &quot;aws_instance&quot; &quot;bastion&quot; &#123;</span><br><span class="line">  # Use the AMI from the above step</span><br><span class="line">  ami = data.aws_ami.ubuntu.id</span><br><span class="line"></span><br><span class="line">  # We don&apos;t need a heavy duty server, t2.micro should suffice</span><br><span class="line">  instance_type = &quot;t2.micro&quot;</span><br><span class="line"></span><br><span class="line">  # We use a variable which can be set to true or false in the terraform.tfvars</span><br><span class="line">  # file to control creating or destroying the bastion resource on demand.</span><br><span class="line">  count = var.bastion_enabled ? 1 : 0</span><br><span class="line"></span><br><span class="line">  # The ssh key name</span><br><span class="line">  key_name = var.ssh_key_name</span><br><span class="line"></span><br><span class="line">  # This should refer to the subnet in which you want to spin up the Bastion host</span><br><span class="line">  # You can even hardcode this ID by getting a subnet id from the AWS console</span><br><span class="line">  subnet_id = aws_subnet.subnet[0].id</span><br><span class="line"></span><br><span class="line">  # The 2 security groups here have 2 important rules</span><br><span class="line">  # 1. hn_bastion_sg: opens up Port 22 for just my IP address</span><br><span class="line">  # 2. default: sets up an open network within the security group</span><br><span class="line">  vpc_security_group_ids = [aws_security_group.hn_bastion_sg.id, aws_default_security_group.default.id]</span><br><span class="line"></span><br><span class="line">  # Since we want to access this via internet, we need a public IP</span><br><span class="line">  associate_public_ip_address = true</span><br><span class="line"></span><br><span class="line">  # Some useful tags</span><br><span class="line">  tags = &#123;</span><br><span class="line">    Name = &quot;Bastion&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># We want to output the public_dns name of the bastion host when it spins up</span><br><span class="line">output &quot;bastion-public-dns&quot; &#123;</span><br><span class="line">  value = var.bastion_enabled ? aws_instance.bastion[0].public_dns : &quot;No-bastion&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Set up the <code>terraform.tfvars</code> file like so:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Set this to `true` and do a `terraform apply` to spin up a bastion host</span><br><span class="line"># and when you are done, set it to `false` and do another `terraform apply`</span><br><span class="line">bastion_enabled = false</span><br><span class="line"></span><br><span class="line"># My SSH keyname (without the .pem extension)</span><br><span class="line">ssh_key_name = &quot;hyperngn_aws_ohio&quot;</span><br><span class="line"></span><br><span class="line"># The IP of my computer. Do a `curl -sq icanhazip.com` to get it</span><br><span class="line"># Look for the **ProTip** down below to automate this!</span><br><span class="line">myip = [&quot;247.39.103.23/32&quot;]</span><br></pre></td></tr></table></figure></p><p>Set up the <code>vars.tf</code> file like so:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">variable &quot;ssh_key_name&quot; &#123;</span><br><span class="line">  description = &quot;Name of AWS key pair&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">variable &quot;myip&quot; &#123;</span><br><span class="line">  type        = list(string)</span><br><span class="line">  description = &quot;My IP to allow SSH access into the bastion server&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">variable &quot;bastion_enabled&quot; &#123;</span><br><span class="line">  description = &quot;Spins up a bastion host if enabled&quot;</span><br><span class="line">  type        = bool</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Relevant sections from my <code>vpc.tf</code>, you could just hardcode these values in the<code>bastion.tf</code> or use <code>data</code> if you’ve set these up manually and <code>resources</code> ifyou use terraform to control them</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">resource &quot;aws_subnet&quot; &quot;subnet&quot; &#123;</span><br><span class="line">  # ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Allows SSH connections from our IP</span><br><span class="line">resource &quot;aws_security_group&quot; &quot;hn_bastion_sg&quot; &#123;</span><br><span class="line">  name   = &quot;hn_bastion_sg&quot;</span><br><span class="line">  vpc_id = aws_vpc.vpc.id</span><br><span class="line"></span><br><span class="line">  ingress &#123;</span><br><span class="line">    from_port   = 22</span><br><span class="line">    to_port     = 22</span><br><span class="line">    protocol    = &quot;tcp&quot;</span><br><span class="line">    cidr_blocks = var.myip</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  egress &#123;</span><br><span class="line">    from_port   = 0</span><br><span class="line">    to_port     = 0</span><br><span class="line">    protocol    = &quot;-1&quot;</span><br><span class="line">    cidr_blocks = [&quot;0.0.0.0/0&quot;]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Allow inter security group connections</span><br><span class="line">resource &quot;aws_default_security_group&quot; &quot;default&quot; &#123;</span><br><span class="line">  vpc_id = aws_vpc.vpc.id</span><br><span class="line"></span><br><span class="line">  ingress &#123;</span><br><span class="line">    protocol  = -1</span><br><span class="line">    self      = true</span><br><span class="line">    from_port = 0</span><br><span class="line">    to_port   = 0</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  egress &#123;</span><br><span class="line">    from_port   = 0</span><br><span class="line">    to_port     = 0</span><br><span class="line">    protocol    = &quot;-1&quot;</span><br><span class="line">    cidr_blocks = [&quot;0.0.0.0/0&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Finally you need to set up your ~/.ssh/config to use the bastion as the jumphost like so:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># Bastion config</span><br><span class="line">Host bastion</span><br><span class="line"># Change the hostname to whatever you get from terraform&apos;s output</span><br><span class="line">Hostname ec2-5-55-128-160.us-east-2.compute.amazonaws.com</span><br><span class="line">IdentityFile ~/.ssh/hyperngn_aws_ohio.pem</span><br><span class="line"></span><br><span class="line"># ECS cluster machines</span><br><span class="line">Host ecs1</span><br><span class="line">Hostname 20.10.21.217</span><br><span class="line">User ec2-user</span><br><span class="line">IdentityFile ~/.ssh/hyperngn_aws_ohio.pem</span><br><span class="line">ForwardAgent yes</span><br><span class="line">ProxyJump bastion</span><br><span class="line"></span><br><span class="line"># This section is optional but allows you to reuse SSH connections</span><br><span class="line">Host *</span><br><span class="line">  User ubuntu</span><br><span class="line">   Compression yes</span><br><span class="line"># every 10 minutes send an alive ping</span><br><span class="line">   ServerAliveInterval 60</span><br><span class="line">   ControlMaster auto</span><br><span class="line">   ControlPath /tmp/ssh-%r@%h:%p</span><br></pre></td></tr></table></figure><p>Once you are done, you can just login by running the following command and itshould run seamlessly:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh ecs1</span><br></pre></td></tr></table></figure><p><strong>Pro-Tip</strong> Put the following in your terraform folder’s .envrc, so that youdon’t have to manually copy paste your IP every time you bring your bastion hostup (You also need to have <a href="https://direnv.net/" target="_blank" rel="noopener">direnv</a> for this to work).<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat .envrc</span><br><span class="line">export TF_VAR_myip=&quot;[\&quot;$(curl -sq icanhazip.com)/32\&quot;]&quot;</span><br></pre></td></tr></table></figure></p><h2 id="Gotchas"><a href="#Gotchas" class="headerlink" title="Gotchas"></a>Gotchas</h2><ol><li>If you run into any issues use the <code>ssh -vv ecs1</code> command to get copiouslogs and read through all of them to figure out what might be wrong.</li><li>Make sure you are using the correct <code>User</code>, Ubuntu AMIs create a user called<code>ubuntu</code> whereas Amazon ECS optimized AMIs create an <code>ec2-user</code> user, If youget the user wrong <code>ssh</code> will fail.</li><li>Use private IPs for the target servers that you are jumping into and thepublic IP or public DNS for your bastion host.</li><li>Make sure your Bastion host is in the same VPC with a default security groupwhich allows inter security group communication and a security group whichopens up the SSH port for your IP. If they are not on the same VPC make surethey have the right security groups to allow communication from the bastionhost to the target host, specifically on port 22. You can use VPC flow logsto figure problems in your network.</li></ol><p>From a security point of view this is a pretty great set up, your normal serversdon’t allow any SSH access (and in my case aren’t even public and are fronted byALBs). And your bastion host is not up all the time, and even when it is up, itonly allows traffic from your single IP. It also saves cost by tearing down thebastion instance when you don’t need it.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I have recently started learning Terraform to manage my AWS resources, And it is
a great tool for maintaining your infrastructure! I use 
      
    
    </summary>
    
    
      <category term="AWS" scheme="http://minhajuddin.com/tags/aws/"/>
    
      <category term="Terraform" scheme="http://minhajuddin.com/tags/terraform/"/>
    
      <category term="Bastion" scheme="http://minhajuddin.com/tags/bastion/"/>
    
      <category term="EC2" scheme="http://minhajuddin.com/tags/ec2/"/>
    
      <category term="SSH" scheme="http://minhajuddin.com/tags/ssh/"/>
    
      <category term="ProxyJump" scheme="http://minhajuddin.com/tags/proxyjump/"/>
    
  </entry>
  
  <entry>
    <title>many_to_many relationships in Ecto and Phoenix for Products and Tags</title>
    <link href="http://minhajuddin.com/2020/05/03/many-to-many-relationships-in-ecto-and-phoenix-for-products-and-tags/"/>
    <id>http://minhajuddin.com/2020/05/03/many-to-many-relationships-in-ecto-and-phoenix-for-products-and-tags/</id>
    <published>2020-05-03T12:54:34.000Z</published>
    <updated>2021-03-07T19:31:47.201Z</updated>
    
    <content type="html"><![CDATA[<p>The other day I was helping a friend set up a phoenix app which required the useof tags on products, we all have used tags in our day to day to add informationabout notes, images, and other stuff. Tags are just labels/chunks-of-text whichare used to associated with an entity like a product, blog post, image, etc.This blog post has a few tags too (Ecto, Elixir, Phoenix, etc.). Tags help usorganize information by annotating records with useful fragments ofinformation. And modeling these in a database is pretty straightforward, it isusually implemented like the following design.</p><img src="/2020/05/03/many-to-many-relationships-in-ecto-and-phoenix-for-products-and-tags/erd-small.jpg" title="Products and Tags ERD"><p>As you can see, we have a many-to-many relation between the products and tagstables via a products_tags table which has just 2 columns the <code>product_id</code> andthe <code>tag_id</code> and it has a composite primary key (while also having an index onthe <code>tag_id</code> to make lookups faster). The use of a join table is required,however, you usually want the join table to be invisible in your domain, as youdon’t want to deal with a ProductTag model, it doesn’t serve any purpose otherthan helping you bridge the object model with the relational model. Anyway, hereis how we ended up building the many-to-many relationship in Phoenix and Ecto.</p><h2 id="Scaffolding-the-models"><a href="#Scaffolding-the-models" class="headerlink" title="Scaffolding the models"></a>Scaffolding the models</h2><p>We use a nondescript <code>Core</code> context for our <code>Product</code> model by running thefollowing scaffold code:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mix phx.gen.html Core Product products name:string description:text</span><br></pre></td></tr></table></figure><p>This generates the following migration (I’ve omitted the boilerplate to makereading the relevant code easier):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table(:products) do</span><br><span class="line">  add :name, :string</span><br><span class="line">  add :description, :text</span><br><span class="line"></span><br><span class="line">  timestamps()</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>Don’t forget to add the following to your <code>router.ex</code></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resources <span class="string">"/products"</span>, ProductController</span><br></pre></td></tr></table></figure><p>Then, we add the <code>Tag</code> in the same context by running the following scaffoldgenerator:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mix phx.gen.html Core Tag tags name:string:unique</span><br></pre></td></tr></table></figure><p>This generates the following migration, note the unique index on <code>name</code>, as wedon’t want tags with duplicate names, you might have separate tags per user inwhich case you would have a unique index on <code>[:user_id, :name]</code>.</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table(<span class="symbol">:tags</span>) <span class="keyword">do</span></span><br><span class="line">  add <span class="symbol">:name</span>, <span class="symbol">:string</span></span><br><span class="line"></span><br><span class="line">  timestamps()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">create unique_index(<span class="symbol">:tags</span>, [<span class="symbol">:name</span>])</span><br></pre></td></tr></table></figure><p>Finally, we generate the migration for the join table <code>products_tags</code>(byconvention it uses the pluralized names of both entities joined by an underscoreso <code>products</code> and <code>tags</code> joined by an <code>_</code> gives us the name <code>products_tags</code>).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mix phx.gen.schema Core.ProductTag products_tags product_id:references:products tag_id:references:tags</span><br></pre></td></tr></table></figure><p>This scaffolded migration requires a few tweaks to make it look like thefollowing:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table(<span class="symbol">:products_tags</span>, <span class="symbol">primary_key:</span> <span class="keyword">false</span>) <span class="keyword">do</span></span><br><span class="line">  add <span class="symbol">:product_id</span>, references(<span class="symbol">:products</span>, <span class="symbol">on_delete:</span> <span class="symbol">:nothing</span>), <span class="symbol">primary_key:</span> <span class="keyword">true</span></span><br><span class="line">  add <span class="symbol">:tag_id</span>, references(<span class="symbol">:tags</span>, <span class="symbol">on_delete:</span> <span class="symbol">:nothing</span>), <span class="symbol">primary_key:</span> <span class="keyword">true</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">create index(<span class="symbol">:products_tags</span>, [<span class="symbol">:product_id</span>])</span><br><span class="line">create index(<span class="symbol">:products_tags</span>, [<span class="symbol">:tag_id</span>])</span><br></pre></td></tr></table></figure><p>Note the following:</p><ol><li>We added a <code>primary_key: false</code> declaration to the <code>table()</code> function callto avoid creating a wasted <code>id</code> column.</li><li>We got rid of the <code>timestamps()</code> declaration as we don’t want to track<code>inserts</code> and <code>updates</code> on the joins. You might want to track inserts ifyou want to know when a product was tagged with a specific tag which makesthings a little more complex, so, we’ll avoid it for now.</li><li>We added a <code>, primary_key: true</code> to the <code>:product_id</code> and <code>:tag_id</code> linesto make <code>[:product_id, :tag_id]</code> a composite primary key</li></ol><p>Now our database is set up nicely for our many-to-many relationship. Here is howour tables look in the database:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">product_tags_demo_dev=# \d products</span><br><span class="line">                                       Table &quot;public.products&quot;</span><br><span class="line">┌─────────────┬────────────────────────────────┬───────────┬──────────┬─────────────────────────────┐</span><br><span class="line">│   Column    │              Type              │ Collation │ Nullable │           Default           │</span><br><span class="line">├─────────────┼────────────────────────────────┼───────────┼──────────┼─────────────────────────────┤</span><br><span class="line">│ id          │ bigint                         │           │ not null │ nextval(&apos;products_id_seq&apos;::…│</span><br><span class="line">│             │                                │           │          │…regclass)                   │</span><br><span class="line">│ name        │ character varying(255)         │           │          │                             │</span><br><span class="line">│ description │ text                           │           │          │                             │</span><br><span class="line">│ inserted_at │ timestamp(0) without time zone │           │ not null │                             │</span><br><span class="line">│ updated_at  │ timestamp(0) without time zone │           │ not null │                             │</span><br><span class="line">└─────────────┴────────────────────────────────┴───────────┴──────────┴─────────────────────────────┘</span><br><span class="line">Indexes:</span><br><span class="line">    &quot;products_pkey&quot; PRIMARY KEY, btree (id)</span><br><span class="line">Referenced by:</span><br><span class="line">    TABLE &quot;products_tags&quot; CONSTRAINT &quot;products_tags_product_id_fkey&quot; FOREIGN KEY (product_id) REFERENCES products(id)</span><br><span class="line"></span><br><span class="line">product_tags_demo_dev=# \d tags</span><br><span class="line">                                         Table &quot;public.tags&quot;</span><br><span class="line">┌─────────────┬────────────────────────────────┬───────────┬──────────┬─────────────────────────────┐</span><br><span class="line">│   Column    │              Type              │ Collation │ Nullable │           Default           │</span><br><span class="line">├─────────────┼────────────────────────────────┼───────────┼──────────┼─────────────────────────────┤</span><br><span class="line">│ id          │ bigint                         │           │ not null │ nextval(&apos;tags_id_seq&apos;::regc…│</span><br><span class="line">│             │                                │           │          │…lass)                       │</span><br><span class="line">│ name        │ character varying(255)         │           │          │                             │</span><br><span class="line">│ inserted_at │ timestamp(0) without time zone │           │ not null │                             │</span><br><span class="line">│ updated_at  │ timestamp(0) without time zone │           │ not null │                             │</span><br><span class="line">└─────────────┴────────────────────────────────┴───────────┴──────────┴─────────────────────────────┘</span><br><span class="line">Indexes:</span><br><span class="line">    &quot;tags_pkey&quot; PRIMARY KEY, btree (id)</span><br><span class="line">    &quot;tags_name_index&quot; UNIQUE, btree (name)</span><br><span class="line">Referenced by:</span><br><span class="line">    TABLE &quot;products_tags&quot; CONSTRAINT &quot;products_tags_tag_id_fkey&quot; FOREIGN KEY (tag_id) REFERENCES tags(id)</span><br><span class="line"></span><br><span class="line">product_tags_demo_dev=# \d products_tags</span><br><span class="line">              Table &quot;public.products_tags&quot;</span><br><span class="line">┌────────────┬────────┬───────────┬──────────┬─────────┐</span><br><span class="line">│   Column   │  Type  │ Collation │ Nullable │ Default │</span><br><span class="line">├────────────┼────────┼───────────┼──────────┼─────────┤</span><br><span class="line">│ product_id │ bigint │           │ not null │         │</span><br><span class="line">│ tag_id     │ bigint │           │ not null │         │</span><br><span class="line">└────────────┴────────┴───────────┴──────────┴─────────┘</span><br><span class="line">Indexes:</span><br><span class="line">    &quot;products_tags_pkey&quot; PRIMARY KEY, btree (product_id, tag_id)</span><br><span class="line">    &quot;products_tags_product_id_index&quot; btree (product_id)</span><br><span class="line">    &quot;products_tags_tag_id_index&quot; btree (tag_id)</span><br><span class="line">Foreign-key constraints:</span><br><span class="line">    &quot;products_tags_product_id_fkey&quot; FOREIGN KEY (product_id) REFERENCES products(id)</span><br><span class="line">    &quot;products_tags_tag_id_fkey&quot; FOREIGN KEY (tag_id) REFERENCES tags(id)</span><br></pre></td></tr></table></figure><h2 id="Getting-tags-to-work"><a href="#Getting-tags-to-work" class="headerlink" title="Getting tags to work!"></a>Getting tags to work!</h2><p>Now comes the fun part, modifying our controllers and contexts to get our tagsworking!</p><p>The first thing we need to do is add a many_to_many relationship on the <code>Product</code> schema like so:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">schema <span class="string">"products"</span> <span class="keyword">do</span></span><br><span class="line">  field <span class="symbol">:description</span>, <span class="symbol">:string</span></span><br><span class="line">  field <span class="symbol">:name</span>, <span class="symbol">:string</span></span><br><span class="line">  many_to_many <span class="symbol">:tags</span>, ProductTagsDemo.Core.Tag, <span class="symbol">join_through:</span> <span class="string">"products_tags"</span></span><br><span class="line"></span><br><span class="line">  timestamps()</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>(Note, that we don’t need to add this relationship on the other side, i.e., <code>Tag</code>to get this working)</p><p>Now, we need to modify our <code>Product</code> form to show an input mechanism for tags,the easy way to do this is to ask the users to provide a comma-separated list oftags in an input textbox. A nicer way is to use a javascript library like<a href="https://select2.org/getting-started/basic-usage#multi-select-boxes-pillbox" target="_blank" rel="noopener"><em>select2</em></a>.For us, a text box with comma-separated tags will suffice.</p><p>The easiest way to do this is to add a text field like so:<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">label</span> <span class="attr">f</span>, <span class="attr">:tags</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">text_input</span> <span class="attr">f</span>, <span class="attr">:tags</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">error_tag</span> <span class="attr">f</span>, <span class="attr">:tags</span> %&gt;</span></span><br></pre></td></tr></table></figure></p><p>However, as soon as you wire this up you’ll get an error on the <code>/products/new</code>page like below:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protocol Phoenix.HTML.Safe not implemented for #Ecto.Association.NotLoaded&lt;association :tags is not loaded&gt; of type Ecto.Association.NotLoaded (a struct).</span><br></pre></td></tr></table></figure></p><p>This is telling us that the <code>to_string</code> function can’t convert an<code>Ecto.Association.NotLoaded</code> struct into a string, When you have a relation likea <code>belongs_to</code> or <code>has_one</code> or <code>many_to_many</code> that isn’t loaded on a struct, ithas this default value. This is coming from our controller, we can remedy thisby changing our action to the following:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span></span>(conn, _params) <span class="keyword">do</span></span><br><span class="line">  changeset = Core.change_product(%Product&#123;<span class="symbol">tags:</span> []&#125;)</span><br><span class="line">  render(conn, <span class="string">"new.html"</span>, <span class="symbol">changeset:</span> changeset)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>Notice the <code>tags: []</code>, we are creating a new product with an empty tagscollection so that it renders properly in the form.</p><p>Now that we have fixed our form, we can try submitting some tags through thisform, However, when you enter any tags and hit <code>Save</code> it doesn’t do anythingwhich is not surprising because we haven’t set up the handling of these tags onthe backend yet.</p><p>We know that the <code>tags</code> field has comma-separated tags, so we need to do thefollowing to be able to save a product.</p><ol><li>Split tags on a comma.</li><li>Strip them of whitespace.</li><li>Lowercase them to get them to be homogeneous (If you want your tag names tobe persisted using the input casing and still treat the uppercased versionthe same as the lowercased or capitalized versions, you can use <code>:citext</code>(short for case insensitive text) read more about how to set up <code>:citext</code>columns in my blog post about <a href="https://minhajuddin.com/2019/04/14/how-to-store-username-or-email-with-case-insensitive-search-using-ecto-part2/">storing username/email in a case insensitivefashion</a>).</li><li>Once we have all the tag <code>names</code> we can insert any new tags and then fetchthe existing tags, combine them, and use <code>put_assoc</code> to put them on theproduct.</li></ol><p>Step #4 creates a race condition in your code which can happen when 2 requeststry to create tags with the same name at the same time. An easy way to workaround this is to treat all the tags as new and do an upsert using<code>Repo.insert_all</code> with an <code>on_conflict: :nothing</code> option which adds the fragment<code>ON CONFLICT DO NOTHING</code> to your SQL making your query run successfully even ifthere are tags with the same name in the database, it just doesn’t insert newtags. Also, note that this function inserts all the tags in a single query doinga bulk insert of all the input tags. Once you <code>upsert</code> all the tags, you canthen find them and use a <code>put_assoc</code> to create an association.</p><p>This is what ended up as the final <code>Core.create_product</code> function:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_product</span></span>(attrs \\ %&#123;&#125;) <span class="keyword">do</span></span><br><span class="line">  %Product&#123;&#125;</span><br><span class="line">  |&gt; Product.changeset(attrs)</span><br><span class="line">  <span class="comment"># use put_assoc to associate the input tags to the product</span></span><br><span class="line">  |&gt; Ecto.Changeset.put_assoc(<span class="symbol">:tags</span>, product_tags(attrs))</span><br><span class="line">  |&gt; Repo.insert()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">defp</span> <span class="title">parse_tags</span></span>(<span class="keyword">nil</span>), <span class="symbol">do:</span> []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">defp</span> <span class="title">parse_tags</span></span>(tags) <span class="keyword">do</span></span><br><span class="line">  <span class="comment"># Repo.insert_all requires the inserted_at and updated_at to be filled out</span></span><br><span class="line">  <span class="comment"># and they should have time truncated to the second that is why we need this</span></span><br><span class="line">  now = NaiveDateTime.utc_now() |&gt; NaiveDateTime.truncate(<span class="symbol">:second</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> tag &lt;- String.split(tags, <span class="string">","</span>),</span><br><span class="line">      tag = tag |&gt; String.trim() |&gt; String.downcase(),</span><br><span class="line">      tag != <span class="string">""</span>,</span><br><span class="line">      <span class="symbol">do:</span> %&#123;<span class="symbol">name:</span> tag, <span class="symbol">inserted_at:</span> now, <span class="symbol">updated_at:</span> now&#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">defp</span> <span class="title">product_tags</span></span>(attrs) <span class="keyword">do</span></span><br><span class="line">  tags = parse_tags(attrs[<span class="string">"tags"</span>]) <span class="comment"># =&gt; [%&#123;name: "phone", inserted_at: ..&#125;,  ...]</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># do an upsert ensuring that all the input tags are present</span></span><br><span class="line">  Repo.insert_all(Tag, tags, <span class="symbol">on_conflict:</span> <span class="symbol">:nothing</span>)</span><br><span class="line"></span><br><span class="line">  tag_names = <span class="keyword">for</span> t &lt;- tags, <span class="symbol">do:</span> t.name</span><br><span class="line">  <span class="comment"># find all the input tags</span></span><br><span class="line">  Repo.all(from t <span class="keyword">in</span> Tag, <span class="symbol">where:</span> t.name <span class="keyword">in</span> ^tag_names)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>It does the following:</p><ol><li>Normalize our tags</li><li>Ensure that all the tags are in our database using <code>Repo.insert_all</code> with<code>on_conflict: :nothing</code> in a single SQL query.</li><li>Load all the tag structs using the names.</li><li>Use <code>put_assoc</code> to associate the tags with the newly created product.</li><li>From here <code>Ecto</code> takes over and makes sure that our product has the rightassociation records in the <code>products_tags</code> table</li></ol><p>Notice, how through all of our code we haven’t used the <code>products_tags</code> tableexcept for defining the <code>many_to_many</code> relationship in the <code>Product</code> schema.</p><p>This is all you need to insert a product with multiple tags, However, we stillwant to show the tags of a product on the product details page. We can do thisby tweaking our action and the Core module like so:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Core</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_product_with_tags!</span></span>(id), <span class="symbol">do:</span> Product |&gt; preload(<span class="symbol">:tags</span>) |&gt; Repo.get!(id)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">ProductTagsDemoWeb</span></span>.ProductController <span class="keyword">do</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">show</span></span>(conn, %&#123;<span class="string">"id"</span> =&gt; id&#125;) <span class="keyword">do</span></span><br><span class="line">    product = Core.get_product_with_tags!(id)</span><br><span class="line">    render(conn, <span class="string">"show.html"</span>, <span class="symbol">product:</span> product)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>Here we are preloading the tags with the product and we can use it in the viewlike below to show all the tags for a product:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Tags: &lt;%= (for tag &lt;- @product.tags, do: tag.name) |&gt; Enum.join(", ") %&gt;</span><br></pre></td></tr></table></figure><p>This takes care of creating and showing a product with tags, However, if we tryto edit a product we are greeted with the following error:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protocol Phoenix.HTML.Safe not implemented for #Ecto.Association.NotLoaded&lt;association :tags is not loaded&gt; of type Ecto.Association.NotLoaded (a struct).</span><br></pre></td></tr></table></figure><p>Hmmm, we have seen this before when we rendered a new Product without tags,However, in this case, our product does have tags but they haven’t beenloaded/preloaded. We can remedy that easily by tweaking our <code>edit</code> action to thefollowing:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span></span>(conn, %&#123;<span class="string">"id"</span> =&gt; id&#125;) <span class="keyword">do</span></span><br><span class="line">  product = Core.get_product_with_tags!(id)</span><br><span class="line">  changeset = Core.change_product(product)</span><br><span class="line">  render(conn, <span class="string">"edit.html"</span>, <span class="symbol">product:</span> product, <span class="symbol">changeset:</span> changeset)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>This gives us a new error:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lists in Phoenix.HTML and templates may only contain integers representing bytes, binaries or other lists, got invalid entry: %ProductTagsDemo.Core.Tag&#123;__meta__: #Ecto.Schema.Metadata&lt;:loaded, &quot;tags&quot;&gt;, id: 1, inserted_at: ~N[2020-05-04 05:20:45], name: &quot;phone&quot;, updated_at: ~N[2020-05-04 05:20:45]&#125;</span><br></pre></td></tr></table></figure><p>This is because we are using a <code>text_input</code> for a collection of tags and whenphoenix tries to convert the list of tags into a string it fails. This is a goodplace to add a custom input function:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">ProductTagsDemoWeb</span></span>.ProductView <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">use</span> ProductTagsDemoWeb, <span class="symbol">:view</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">tag_input</span></span>(form, field, opts \\ []) <span class="keyword">do</span></span><br><span class="line">    <span class="comment"># get the input tags collection</span></span><br><span class="line">    tags = Phoenix.HTML.Form.input_value(form, field)</span><br><span class="line">    <span class="comment"># render text using the text_input after converting tags to text</span></span><br><span class="line">    Phoenix.HTML.Form.text_input(form, field, <span class="symbol">value:</span> tags_to_text(tags), opts)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">tags_to_text</span></span>(tags) <span class="keyword">do</span></span><br><span class="line">    tags</span><br><span class="line">    |&gt; Enum.map(<span class="keyword">fn</span> t -&gt; t.name <span class="keyword">end</span>)</span><br><span class="line">    |&gt; Enum.join(<span class="string">", "</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>With this helper we can tweak our form to:<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">label</span> <span class="attr">f</span>, <span class="attr">:tags</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">tag_input</span> <span class="attr">f</span>, <span class="attr">:tags</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">error_tag</span> <span class="attr">f</span>, <span class="attr">:tags</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">small</span> <span class="attr">class</span>=<span class="string">"help-text"</span>&gt;</span>tags separated by commas<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>Note that the <code>text_input</code> has been changed to <code>tag_input</code>.</p><p>Now, when we go to edit a product, it should render the form with the tagsseparated by commas. However, updating the product by changing tags stilldoesn’t work because we haven’t updated our backend code to handle this. Tocomplete this, we need to tweak the controller and the <code>Core</code> context like so:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">ProductTagsDemoWeb</span></span>.ProductController <span class="keyword">do</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">update</span></span>(conn, %&#123;<span class="string">"id"</span> =&gt; id, <span class="string">"product"</span> =&gt; product_params&#125;) <span class="keyword">do</span></span><br><span class="line">    product = Core.get_product_with_tags!(id)</span><br><span class="line">    <span class="comment"># ... rest is the same</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">ProductTagsDemo</span></span>.Core <span class="keyword">do</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">update_product</span></span>(%Product&#123;&#125; = product, attrs) <span class="keyword">do</span></span><br><span class="line">    product</span><br><span class="line">    |&gt; Product.changeset(attrs)</span><br><span class="line">    |&gt; Ecto.Changeset.put_assoc(<span class="symbol">:tags</span>, product_tags(attrs))</span><br><span class="line">    |&gt; Repo.update()</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>Note that in the controller we are using <code>get_product_with_tags!</code> and in thecontext, we inserted a line to <code>put_assoc</code> similar to the <code>create_product</code>function which does the same things as <code>create_product</code>.</p><p>Astute readers will observe that our create and update product implementationdoesn’t rollback newly created tags, when <code>create_product</code> or <code>update_product</code>fails. Let us handle this case and wrap our post!</p><p>Ecto provides <code>Ecto.Multi</code> to allow easy database transaction handling. Thisjust needs changes to our context and our view like so:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">ProductTagsDemo</span></span>.Core <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">alias</span> Ecto.Multi</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">create_product</span></span>(attrs \\ %&#123;&#125;) <span class="keyword">do</span></span><br><span class="line">    multi_result =</span><br><span class="line">      Multi.new()</span><br><span class="line">      <span class="comment"># use multi to insert all the tags, so the tags are rolled back when there</span></span><br><span class="line">      <span class="comment"># is an error in product creation</span></span><br><span class="line">      |&gt; ensure_tags(attrs)</span><br><span class="line">      |&gt; Multi.insert(<span class="symbol">:product</span>, <span class="keyword">fn</span> %&#123;<span class="symbol">tags:</span> tags&#125; -&gt;</span><br><span class="line">        <span class="comment"># This chunk of code remains the same, the only difference is we let</span></span><br><span class="line">        <span class="comment"># Ecto.Multi handle insertion of the product</span></span><br><span class="line">        %Product&#123;&#125;</span><br><span class="line">        |&gt; Product.changeset(attrs)</span><br><span class="line">        |&gt; Ecto.Changeset.put_assoc(<span class="symbol">:tags</span>, tags)</span><br><span class="line">      <span class="keyword">end</span>)</span><br><span class="line">      <span class="comment"># Finally, we run all of this in a single transaction</span></span><br><span class="line">      |&gt; Repo.transaction()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># a multi result can be an :ok tagged tuple with the data from all steps</span></span><br><span class="line">    <span class="comment"># or an error tagged tuple with the failure step's atom and relevant data</span></span><br><span class="line">    <span class="comment"># in this case we only expect failures in Product insertion</span></span><br><span class="line">    <span class="keyword">case</span> multi_result <span class="keyword">do</span></span><br><span class="line">      &#123;<span class="symbol">:ok</span>, %&#123;<span class="symbol">product:</span> product&#125;&#125; -&gt; &#123;<span class="symbol">:ok</span>, product&#125;</span><br><span class="line">      &#123;<span class="symbol">:error</span>, <span class="symbol">:product</span>, changeset, <span class="number">_</span>&#125; -&gt; &#123;<span class="symbol">:error</span>, changeset&#125;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># This is identical to `create_product`</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">update_product</span></span>(%Product&#123;&#125; = product, attrs) <span class="keyword">do</span></span><br><span class="line">    multi_result =</span><br><span class="line">      Multi.new()</span><br><span class="line">      |&gt; ensure_tags(attrs)</span><br><span class="line">      |&gt; Multi.update(<span class="symbol">:product</span>, <span class="keyword">fn</span> %&#123;<span class="symbol">tags:</span> tags&#125; -&gt;</span><br><span class="line">        product</span><br><span class="line">        |&gt; Product.changeset(attrs)</span><br><span class="line">        |&gt; Ecto.Changeset.put_assoc(<span class="symbol">:tags</span>, tags)</span><br><span class="line">      <span class="keyword">end</span>)</span><br><span class="line">      |&gt; Repo.transaction()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> multi_result <span class="keyword">do</span></span><br><span class="line">      &#123;<span class="symbol">:ok</span>, %&#123;<span class="symbol">product:</span> product&#125;&#125; -&gt; &#123;<span class="symbol">:ok</span>, product&#125;</span><br><span class="line">      &#123;<span class="symbol">:error</span>, <span class="symbol">:product</span>, changeset, <span class="number">_</span>&#125; -&gt; &#123;<span class="symbol">:error</span>, changeset&#125;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># parse_tags is unchanged</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># We have created an ensure tags to use the multi struct passed along and the</span></span><br><span class="line">  <span class="comment"># repo associated with it to allow rolling back tag inserts</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">ensure_tags</span></span>(multi, attrs) <span class="keyword">do</span></span><br><span class="line">    tags = parse_tags(attrs[<span class="string">"tags"</span>])</span><br><span class="line"></span><br><span class="line">    multi</span><br><span class="line">    |&gt; Multi.insert_all(<span class="symbol">:insert_tags</span>, Tag, tags, <span class="symbol">on_conflict:</span> <span class="symbol">:nothing</span>)</span><br><span class="line">    |&gt; Multi.run(<span class="symbol">:tags</span>, <span class="keyword">fn</span> repo, _changes -&gt;</span><br><span class="line">      tag_names = <span class="keyword">for</span> t &lt;- tags, <span class="symbol">do:</span> t.name</span><br><span class="line">      &#123;<span class="symbol">:ok</span>, repo.all(from t <span class="keyword">in</span> Tag, <span class="symbol">where:</span> t.name <span class="keyword">in</span> ^tag_names)&#125;</span><br><span class="line">    <span class="keyword">end</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">ProductTagsDemoWeb</span></span>.ProductView <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">use</span> ProductTagsDemoWeb, <span class="symbol">:view</span></span><br><span class="line">  import Phoenix.HTML.Form</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">tag_input</span></span>(form, field, opts \\ []) <span class="keyword">do</span></span><br><span class="line">    text_input(form, field, <span class="symbol">value:</span> tag_value(form.source, form, field))</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># if there is an error, pass the input params along</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">tag_value</span></span>(%Ecto.Changeset&#123;<span class="symbol">valid?:</span> <span class="keyword">false</span>&#125;, form, field) <span class="keyword">do</span></span><br><span class="line">    form.params[to_string(field)]</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">tag_value</span></span>(_source, form, field) <span class="keyword">do</span></span><br><span class="line">    form</span><br><span class="line">    |&gt; input_value(field)</span><br><span class="line">    |&gt; tags_to_text</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">tags_to_text</span></span>(tags) <span class="keyword">do</span></span><br><span class="line">    tags</span><br><span class="line">    |&gt; Enum.map(<span class="keyword">fn</span> t -&gt; t.name <span class="keyword">end</span>)</span><br><span class="line">    |&gt; Enum.join(<span class="string">", "</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>Whew, that was long, but hopefully, this gives you a comprehensive understandingof how to handle <code>many_to_many</code> relationships in Ecto and Phoenix.</p><p>The source code associated with this blog post can be found at <a href="https://github.com/minhajuddin/product_tags_demo" target="_blank" rel="noopener">https://github.com/minhajuddin/product_tags_demo</a></p><p>P.S. There is a lot of duplication in our final <code>create_product</code> and<code>update_product</code> functions, try removing the duplication in an elegant way! I’llshare my take on it in the next post!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The other day I was helping a friend set up a phoenix app which required the use
of tags on products, we all have used tags in our day to
      
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="Phoenix" scheme="http://minhajuddin.com/tags/phoenix/"/>
    
      <category term="Ecto" scheme="http://minhajuddin.com/tags/ecto/"/>
    
      <category term="many_to_many" scheme="http://minhajuddin.com/tags/many-to-many/"/>
    
      <category term="Tags" scheme="http://minhajuddin.com/tags/tags/"/>
    
      <category term="relationships" scheme="http://minhajuddin.com/tags/relationships/"/>
    
  </entry>
  
  <entry>
    <title>How to dump a partial/sample table(1000 rows) in postgres using pg_dump</title>
    <link href="http://minhajuddin.com/2019/11/30/how-to-dump-a-partial-sample-table-1000-rows-in-postgres-using-pg-dump/"/>
    <id>http://minhajuddin.com/2019/11/30/how-to-dump-a-partial-sample-table-1000-rows-in-postgres-using-pg-dump/</id>
    <published>2019-11-30T00:36:13.000Z</published>
    <updated>2021-03-07T19:31:47.201Z</updated>
    
    <content type="html"><![CDATA[<p>The other day, I wanted to export a sample of one of my big Postgres tables fromthe production server to my local computer. This was a huge table and I didn’twant to move around a few GBs just to get a sample onto my local environment.Unfortunately <code>pg_dump</code> doesn’t support exporting of partial tables. I lookedaround and found a utility called <a href="https://github.com/mla/pg_sample" target="_blank" rel="noopener">pg_sample</a>which is supposed to help you with this. However, I wasn’t comfortable withinstalling this on my production server or letting my production data throughthis script. Thinking a little more made the solution obvious. The idea wassimple:</p><ol><li><p>Create a table called <code>tmp_page_caches</code> where <code>page_caches</code> is the table thatyou want to copy using <code>pg_dump</code> using the following SQL in <code>psql</code>, thisgives you a lot of freedom on SELECTing just the rows you want.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tmp_page_caches <span class="keyword">AS</span> (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> page_caches <span class="keyword">LIMIT</span> <span class="number">1000</span>);</span><br></pre></td></tr></table></figure></li><li><p>Export this table using <code>pg_dump</code> as below. Here we are exporting the data toa sql file and transforming our table name to the original table namemidstream.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pg_dump app_production --table tmp_page_caches | sed <span class="string">'s/public.tmp_/public./'</span> &gt; page_caches.sql</span><br></pre></td></tr></table></figure></li><li><p>Copy this file to the local server using <code>scp</code> and now run it against thelocal database:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp minhajuddin@server.prod:page_caches.sql .</span><br><span class="line">psql app_development &lt; page_caches.sql</span><br></pre></td></tr></table></figure></li><li><p>Get rid of the temporary table on the production server</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> tmp_page_caches; <span class="comment">-- be careful not to drop the real table!</span></span><br></pre></td></tr></table></figure></li></ol><p>Voila! We have successfully copied over a sample of our production table to ourlocal environment. Hope you find it useful.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The other day, I wanted to export a sample of one of my big Postgres tables from
the production server to my local computer. This was a h
      
    
    </summary>
    
    
      <category term="postgresql" scheme="http://minhajuddin.com/tags/postgresql/"/>
    
      <category term="pg_dump" scheme="http://minhajuddin.com/tags/pg-dump/"/>
    
      <category term="limit" scheme="http://minhajuddin.com/tags/limit/"/>
    
      <category term="partial table" scheme="http://minhajuddin.com/tags/partial-table/"/>
    
      <category term="sample" scheme="http://minhajuddin.com/tags/sample/"/>
    
  </entry>
  
  <entry>
    <title>How to copy output of a function to your clipboard in Elixir or Ruby</title>
    <link href="http://minhajuddin.com/2019/06/03/how-to-copy-output-of-a-function-to-your-clipboard-in-elixir-or-ruby/"/>
    <id>http://minhajuddin.com/2019/06/03/how-to-copy-output-of-a-function-to-your-clipboard-in-elixir-or-ruby/</id>
    <published>2019-06-03T17:51:36.000Z</published>
    <updated>2021-03-07T19:31:47.197Z</updated>
    
    <content type="html"><![CDATA[<p>Having the ability to drive your development using just a keyboard is veryproductive. However, when you are using a terminal and have to copy the outputof a command to use it somewhere else, it breaks your flow, you need to moveyour hands away from your keyboard, use the mouse to select the text and thencopy it.</p><p>When I want to copy passwords to be used elsewhere from my browser, I usuallyopen the developer tools console, inspect element and click on the passwordinput box and then run the following code:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy($<span class="number">0.</span>value)</span><br></pre></td></tr></table></figure><p>Chrome sets <code>$0</code> to refer to the currently selected DOM element and <code>$0.value</code>will give us the value of the password field and sending it to the <code>copy</code>function copies this text to the OS clipboard.</p><p>I have a similar script set up for my terminal, when I want to copy the outputof a command like <code>rake secret</code> I run the following command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rake secret | xc <span class="comment"># copies a new secret to the clipboard.</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Hello"</span> | xc <span class="comment"># copies the string `Hello` to the clipboard.</span></span><br></pre></td></tr></table></figure><p><code>xc</code> is aliased to the following in my bashrc:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> xc=<span class="string">'tee /dev/tty | xclip -selection clipboard'</span></span><br></pre></td></tr></table></figure><p>This command prints the output to the terminal (using <code>tee /dev/tty</code>) and copiesit to the OS clipboard using the <code>xclip</code> package.</p><p>I wanted the same ability in my ruby and elixir REPLs. It was prettystraightforward to do in ruby. Here is the annotated code:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">puts <span class="string">'loading ~/.pryrc ...'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'open3'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># copy takes an argument and converts it into a string and copies it to the OS</span></span><br><span class="line"><span class="comment"># clipboard using the `xclip` command line package.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">copy</span><span class="params">(text)</span></span></span><br><span class="line">  <span class="comment"># start running the `xclip` command to copy the stdin to the OS primary</span></span><br><span class="line">  <span class="comment"># clipboard. Also pass the stdin and stdout, stderr to the block</span></span><br><span class="line">  Open3.popen3(<span class="string">'xclip'</span>, <span class="string">'-selection'</span>, <span class="string">'clipboard'</span>) <span class="keyword">do</span> <span class="params">|stdin, _stdout, _stderr, _wait_thr|</span></span><br><span class="line">    <span class="comment"># convert the input argument to a string and write it to the stdin of the</span></span><br><span class="line">    <span class="comment"># spawned `xclip` process and the close the input stream</span></span><br><span class="line">    stdin.puts text.to_s</span><br><span class="line">    stdin.close</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># print out an informational message to signal that the argument has been</span></span><br><span class="line">  <span class="comment"># copied to the clipboard.</span></span><br><span class="line">  puts <span class="string">"copied to clipboard: <span class="subst">#&#123;text.to_s[<span class="number">0</span>..<span class="number">10</span>]&#125;</span>..."</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># e.g. running `copy SecureRandom.uuid` will print the following</span></span><br><span class="line"><span class="comment"># pry(main)&gt; copy SecureRandom.uuid</span></span><br><span class="line"><span class="comment"># copied to clipboard: 14438d5c-62...</span></span><br><span class="line"><span class="comment"># and copies: `14438d5c-62b9-40a1-a324-5d2bd2205990` to the OS clipboard</span></span><br></pre></td></tr></table></figure><p>Below is a similar script for Elixir:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">IO.puts(<span class="string">"loading ~/.iex.exs"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># open a module called `H` as we can't have functions outside modules</span></span><br><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">H</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="comment"># copy function takes the input and converts it into a string before copying</span></span><br><span class="line">  <span class="comment"># it to the OS clipboard.</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">copy</span></span>(text) <span class="keyword">do</span></span><br><span class="line">    <span class="comment"># convert input argument to a string</span></span><br><span class="line">    text = to_s(text)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># spawn a new xclip process configured to copy the stdin to the OS's primary</span></span><br><span class="line">    <span class="comment"># clipboard</span></span><br><span class="line">    port = Port.open(&#123;<span class="symbol">:spawn</span>, <span class="string">"xclip -selection clipboard"</span>&#125;, [])</span><br><span class="line">    <span class="comment"># send the input text as stdin to the xclip process</span></span><br><span class="line">    Port.command(port, text)</span><br><span class="line">    <span class="comment"># close the port</span></span><br><span class="line">    Port.close(port)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print out an informational message to signal that the text has been copied</span></span><br><span class="line">    <span class="comment"># to the OS's clipboard"</span></span><br><span class="line">    IO.puts(<span class="string">"copied to clipboard: <span class="subst">#&#123;String.slice(text, <span class="number">0</span>, <span class="number">10</span>)&#125;</span>..."</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># to_s converts an elixir term to a string if it implements the `String.Chars`</span></span><br><span class="line">  <span class="comment"># protocol otherwise it uses `inspect` to convert it into a string.</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">to_s</span></span>(text) <span class="keyword">do</span></span><br><span class="line">    to_string(text)</span><br><span class="line">  rescue</span><br><span class="line">    <span class="number">_</span> -&gt; inspect(text)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iex(<span class="number">2</span>)&gt; <span class="symbol">:crypto</span>.strong_rand_bytes(<span class="number">16</span>) |&gt; Base.encode16 |&gt; H.copy</span><br><span class="line"><span class="comment"># copied to clipboard: 347B175C6F...</span></span><br><span class="line"><span class="comment"># it has also copied `347B175C6F397B2808DE7168444ED428` to the OS's clipboard</span></span><br></pre></td></tr></table></figure><p>All these utilities (except for the browser’s <code>copy</code> function) depend on the<code>xclip</code> utility which can be installed on ubuntu using <code>sudo apt-get installxclip</code>. You can emulate the same behaviour on a Mac using the <code>pbcopy</code> utility,you might have to tweak things a little bit, but it should be pretty straightforward.</p><p>You can do the same in your favorite programming language too, just find theright way to spawn an <code>xclip</code> process and send the text you want to be copied toits’ stdin. Hope this makes your development a little more pleasant :)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Having the ability to drive your development using just a keyboard is very
productive. However, when you are using a terminal and have to
      
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="Ruby" scheme="http://minhajuddin.com/tags/ruby/"/>
    
      <category term="Pry" scheme="http://minhajuddin.com/tags/pry/"/>
    
      <category term="IRB" scheme="http://minhajuddin.com/tags/irb/"/>
    
      <category term="IEx" scheme="http://minhajuddin.com/tags/iex/"/>
    
      <category term="copy" scheme="http://minhajuddin.com/tags/copy/"/>
    
      <category term="pbcopy" scheme="http://minhajuddin.com/tags/pbcopy/"/>
    
      <category term="xclip" scheme="http://minhajuddin.com/tags/xclip/"/>
    
  </entry>
  
  <entry>
    <title>How to store username or email with case insensitive search using Ecto</title>
    <link href="http://minhajuddin.com/2019/04/14/how-to-store-username-or-email-with-case-insensitive-search-using-ecto/"/>
    <id>http://minhajuddin.com/2019/04/14/how-to-store-username-or-email-with-case-insensitive-search-using-ecto/</id>
    <published>2019-04-14T10:59:55.000Z</published>
    <updated>2021-03-07T19:31:47.201Z</updated>
    
    <content type="html"><![CDATA[<p>I am building a small personal project which stores users in a <code>users</code> table andevery user has a unique email. So, my first model looked something like below:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">SF</span></span>.Repo.Migrations.CreateUsers <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">use</span> Ecto.Migration</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">change</span></span> <span class="keyword">do</span></span><br><span class="line">    create table(<span class="symbol">:users</span>, <span class="symbol">primary_key:</span> <span class="keyword">false</span>) <span class="keyword">do</span></span><br><span class="line">      add <span class="symbol">:id</span>, <span class="symbol">:binary_id</span>, <span class="symbol">primary_key:</span> <span class="keyword">true</span></span><br><span class="line">      add <span class="symbol">:email</span>, <span class="symbol">:string</span>, <span class="symbol">null:</span> <span class="keyword">false</span></span><br><span class="line">      add <span class="symbol">:magic_token</span>, <span class="symbol">:uuid</span></span><br><span class="line">      add <span class="symbol">:confirmation_token</span>, <span class="symbol">:uuid</span></span><br><span class="line">      add <span class="symbol">:confirmed_at</span>, <span class="symbol">:naive_datetime</span></span><br><span class="line"></span><br><span class="line">      timestamps()</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    create index(<span class="symbol">:users</span>, [<span class="symbol">:email</span>], <span class="symbol">unique:</span> <span class="keyword">true</span>)</span><br><span class="line">    create index(<span class="symbol">:users</span>, [<span class="symbol">:magic_token</span>], <span class="symbol">unique:</span> <span class="keyword">true</span>)</span><br><span class="line">    create index(<span class="symbol">:users</span>, [<span class="symbol">:confirmation_token</span>], <span class="symbol">unique:</span> <span class="keyword">true</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">SF</span></span>.User <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">use</span> Ecto.Schema</span><br><span class="line">  import Ecto.Changeset</span><br><span class="line"></span><br><span class="line">  <span class="variable">@primary_key</span> &#123;<span class="symbol">:id</span>, <span class="symbol">:binary_id</span>, <span class="symbol">autogenerate:</span> <span class="keyword">true</span>&#125;</span><br><span class="line">  <span class="variable">@foreign_key_type</span> <span class="symbol">:binary_id</span></span><br><span class="line">  schema <span class="string">"users"</span> <span class="keyword">do</span></span><br><span class="line">    field <span class="symbol">:email</span>, <span class="symbol">:string</span></span><br><span class="line">    field <span class="symbol">:magic_token</span>, Ecto.Base64UUID</span><br><span class="line">    field <span class="symbol">:confirmation_token</span>, Ecto.Base64UUID</span><br><span class="line">    field <span class="symbol">:confirmed_at</span>, <span class="symbol">:naive_datetime</span></span><br><span class="line"></span><br><span class="line">    timestamps()</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="variable">@doc</span> <span class="keyword">false</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">changeset</span></span>(user, attrs) <span class="keyword">do</span></span><br><span class="line">    user</span><br><span class="line">    |&gt; cast(attrs, [<span class="symbol">:email</span>, <span class="symbol">:confirmation_token</span>])</span><br><span class="line">    |&gt; validate_required([<span class="symbol">:email</span>])</span><br><span class="line">    |&gt; unique_constraint(<span class="symbol">:email</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>Like all good developers I had a unique index on the email field to make thesearches faster. So, when I do a <code>Repo.get_by(User, email: &quot;danny@m.com&quot;)</code>,postgres doesn’t have to scan the whole table to find my user. However, userssometimes enter email in mixed case, so some people might enter the above emailas <a href="mailto:`DANNY@m.com" target="_blank" rel="noopener">`DANNY@m.com</a>`, and since postgres makes a distinction between upper cased andlower cased strings, we would end up returning a 404 Not found error to theuser. To work around this I would usually lower case the email whenever itentered the system, in Rails you would do something like below:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateUsers</span> &lt; ActiveRecord::Migration[5.2]</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">change</span></span></span><br><span class="line">    create_table <span class="symbol">:users</span>, <span class="symbol">id:</span> <span class="symbol">:uuid</span> <span class="keyword">do</span> <span class="params">|t|</span></span><br><span class="line">      <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    add_index <span class="symbol">:users</span>, %i[email], <span class="symbol">unique:</span> <span class="literal">true</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ActiveRecord::Base</span></span><br><span class="line">  <span class="comment"># downcase email before saving</span></span><br><span class="line">  before_save <span class="symbol">:normalize_email</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">normalize_email</span></span></span><br><span class="line">    <span class="keyword">self</span>.email = email&amp;.downcase</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># always downcase before you find a record</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">find_by_email</span></span></span><br><span class="line">    find_by(<span class="symbol">email:</span> email.downcase)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>One downside of this approach is the need to ensure that all the emails in thedatabase are stored as lower case. If you mess up on your data entry code, youmight end up with a table containing the same email with different cases.</p><p>A better way to do this in Ecto would be to create an index on a lower casedemail like so:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create index(<span class="symbol">:users</span>, [<span class="string">"(lower(email))"</span>], <span class="symbol">unique:</span> <span class="keyword">true</span>)</span><br></pre></td></tr></table></figure><p>This way you would never end up with a table with duplicate emails, and when youwant to find a user with an email you can do something like below:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">SF</span></span>.UserService <span class="keyword">do</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">find_by_email</span></span>(email) <span class="keyword">do</span></span><br><span class="line">    email = String.downcase(email)</span><br><span class="line"></span><br><span class="line">    user =</span><br><span class="line">      Repo.one(</span><br><span class="line">        from u <span class="keyword">in</span> User,</span><br><span class="line">          <span class="symbol">where:</span> fragment(<span class="string">"lower(?)"</span>, u.email) == ^email</span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line">    if user != <span class="keyword">nil</span>, <span class="symbol">do:</span> &#123;<span class="symbol">:ok</span>, user&#125;, <span class="symbol">else:</span> &#123;<span class="symbol">:error</span>, <span class="symbol">:not_found</span>&#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>This would also make sure that your index is actually used. You can take the SQLlogged in your IEx and run a quick <code>EXPLAIN</code> to make sure that your index isproperly being used:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># EXPLAIN ANALYZE SELECT u0."id", u0."email", u0."magic_token", u0."confirmation_token", u0."confirmed_at", u0."inserted_at", u0."updated_at" FROM "users" AS u0 WHERE (lower(u0</span><br><span class="line">."email") = 'foobar@x.com');</span><br><span class="line">┌─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐</span><br><span class="line">│                                                             QUERY PLAN                                                              │</span><br><span class="line">├─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤</span><br><span class="line">│ Index Scan using users__lower_email_index on users u0  (cost=0.14..8.16 rows=1 width=588) (actual time=0.013..0.014 rows=0 loops=1) │</span><br><span class="line">│   Index Cond: (lower((email)::text) = 'foobar@x.com'::text)                                                                         │</span><br><span class="line">│ Planning time: 0.209 ms                                                                                                             │</span><br><span class="line">│ Execution time: 0.064 ms                                                                                                            │</span><br><span class="line">└─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘</span><br><span class="line">(4 rows)</span><br><span class="line"></span><br><span class="line">Time: 1.086 ms</span><br></pre></td></tr></table></figure><p>A common rookie mistake is creating an index on the email column and then comparingin sql using the <code>lower</code> function like so:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">simpleform_dev=# EXPLAIN ANALYZE select * from users where lower(email) = 'danny';</span><br><span class="line">┌─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐</span><br><span class="line">│                                                     QUERY PLAN                                                      │</span><br><span class="line">├─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤</span><br><span class="line">│ Seq Scan on users  (cost=10000000000.00..10000000001.01 rows=1 width=580) (actual time=0.034..0.034 rows=0 loops=1) │</span><br><span class="line">│   Filter: (lower((email)::text) = 'danny'::text)                                                                     │</span><br><span class="line">│   Rows Removed by Filter: 1                                                                                         │</span><br><span class="line">│ Planning time: 0.158 ms                                                                                             │</span><br><span class="line">│ Execution time: 0.076 ms                                                                                            │</span><br><span class="line">└─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘</span><br><span class="line">(5 rows)</span><br><span class="line"></span><br><span class="line">Time: 1.060 ms</span><br><span class="line">simpleform_dev=#</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I am building a small personal project which stores users in a &lt;code&gt;users&lt;/code&gt; table and
every user has a unique email. So, my first m
      
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="Ecto" scheme="http://minhajuddin.com/tags/ecto/"/>
    
      <category term="Postgresql" scheme="http://minhajuddin.com/tags/postgresql/"/>
    
      <category term="Username" scheme="http://minhajuddin.com/tags/username/"/>
    
      <category term="Email" scheme="http://minhajuddin.com/tags/email/"/>
    
      <category term="Index" scheme="http://minhajuddin.com/tags/index/"/>
    
  </entry>
  
  <entry>
    <title>How to store username or email with case insensitive search using Ecto - Part 2</title>
    <link href="http://minhajuddin.com/2019/04/14/how-to-store-username-or-email-with-case-insensitive-search-using-ecto-part2/"/>
    <id>http://minhajuddin.com/2019/04/14/how-to-store-username-or-email-with-case-insensitive-search-using-ecto-part2/</id>
    <published>2019-04-14T10:59:55.000Z</published>
    <updated>2021-03-07T19:31:47.201Z</updated>
    
    <content type="html"><![CDATA[<p>In a previous blog post I was trying to <a href="/2019/04/14/how-to-store-username-or-email-with-case-insensitive-search-using-ecto/">store username/email in a caseinsensitive way inpostgres</a>.A few folks commented that the <code>citext</code> postgres extension actually did this ina very easy and straightforward way. So, I went back to my code and ripped outthe unnecessary complexity and here is what I ended up with:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">SF</span></span>.Repo.Migrations.EnableCitextExtension <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">use</span> Ecto.Migration</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">change</span></span> <span class="keyword">do</span></span><br><span class="line">    execute <span class="string">"CREATE EXTENSION citext"</span>, <span class="string">"DROP EXTENSION citext"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"> SF.Repo.Migrations.CreateUsers <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">use</span> Ecto.Migration</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">change</span></span> <span class="keyword">do</span></span><br><span class="line">    create table(<span class="symbol">:users</span>, <span class="symbol">primary_key:</span> <span class="keyword">false</span>) <span class="keyword">do</span></span><br><span class="line">      add <span class="symbol">:id</span>, <span class="symbol">:binary_id</span>, <span class="symbol">primary_key:</span> <span class="keyword">true</span></span><br><span class="line">      add <span class="symbol">:email</span>, <span class="symbol">:citext</span>, <span class="symbol">null:</span> <span class="keyword">false</span></span><br><span class="line">      add <span class="symbol">:magic_token</span>, <span class="symbol">:uuid</span></span><br><span class="line">      add <span class="symbol">:magic_token_created_at</span>, <span class="symbol">:naive_datetime</span></span><br><span class="line">      add <span class="symbol">:confirmation_token</span>, <span class="symbol">:uuid</span></span><br><span class="line">      add <span class="symbol">:confirmed_at</span>, <span class="symbol">:naive_datetime</span></span><br><span class="line"></span><br><span class="line">      timestamps()</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    create index(<span class="symbol">:users</span>, [<span class="symbol">:email</span>], <span class="symbol">unique:</span> <span class="keyword">true</span>)</span><br><span class="line">    create index(<span class="symbol">:users</span>, [<span class="symbol">:magic_token</span>], <span class="symbol">unique:</span> <span class="keyword">true</span>)</span><br><span class="line">    create index(<span class="symbol">:users</span>, [<span class="symbol">:confirmation_token</span>], <span class="symbol">unique:</span> <span class="keyword">true</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">SF</span></span>.User <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">use</span> Ecto.Schema</span><br><span class="line">  import Ecto.Changeset</span><br><span class="line"></span><br><span class="line">  <span class="variable">@primary_key</span> &#123;<span class="symbol">:id</span>, <span class="symbol">:binary_id</span>, <span class="symbol">autogenerate:</span> <span class="keyword">true</span>&#125;</span><br><span class="line">  <span class="variable">@foreign_key_type</span> <span class="symbol">:binary_id</span></span><br><span class="line">  schema <span class="string">"users"</span> <span class="keyword">do</span></span><br><span class="line">    field <span class="symbol">:email</span>, <span class="symbol">:string</span></span><br><span class="line">    field <span class="symbol">:magic_token</span>, Ecto.Base64UUID</span><br><span class="line">    field <span class="symbol">:confirmation_token</span>, Ecto.Base64UUID</span><br><span class="line">    field <span class="symbol">:confirmed_at</span>, <span class="symbol">:naive_datetime</span></span><br><span class="line"></span><br><span class="line">    timestamps()</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="variable">@doc</span> <span class="keyword">false</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">changeset</span></span>(user, attrs) <span class="keyword">do</span></span><br><span class="line">    user</span><br><span class="line">    |&gt; cast(attrs, [<span class="symbol">:email</span>, <span class="symbol">:confirmation_token</span>])</span><br><span class="line">    |&gt; validate_required([<span class="symbol">:email</span>])</span><br><span class="line">    |&gt; unique_constraint(<span class="symbol">:email</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">SF</span></span>.UserService <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">find_by_email</span></span>(email) <span class="keyword">do</span></span><br><span class="line">    Repo.one(from u <span class="keyword">in</span> User, <span class="symbol">where:</span> u.email == ^email)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>So, the way <a href="https://www.postgresql.org/docs/11/citext.html" target="_blank" rel="noopener">citext</a> works issimilar to our previous approach. If you want to get into all the gory detailsabout how citext is implemented you can check out the code on GitHub at:<a href="https://github.com/postgres/postgres/blob/6dd86c269d5b9a176f6c9f67ea61cc17fef9d860/contrib/citext/citext.c" target="_blank" rel="noopener">https://github.com/postgres/postgres/blob/6dd86c269d5b9a176f6c9f67ea61cc17fef9d860/contrib/citext/citext.c</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In a previous blog post I was trying to &lt;a href=&quot;/2019/04/14/how-to-store-username-or-email-with-case-insensitive-search-using-ecto/&quot;&gt;sto
      
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="Ecto" scheme="http://minhajuddin.com/tags/ecto/"/>
    
      <category term="Postgresql" scheme="http://minhajuddin.com/tags/postgresql/"/>
    
      <category term="Username" scheme="http://minhajuddin.com/tags/username/"/>
    
      <category term="Email" scheme="http://minhajuddin.com/tags/email/"/>
    
      <category term="Index" scheme="http://minhajuddin.com/tags/index/"/>
    
  </entry>
  
  <entry>
    <title>How to view documentation of callbacks in IEx for Elixir</title>
    <link href="http://minhajuddin.com/2019/03/20/how-to-view-documentation-of-callbacks-in-iex-for-elixir/"/>
    <id>http://minhajuddin.com/2019/03/20/how-to-view-documentation-of-callbacks-in-iex-for-elixir/</id>
    <published>2019-03-20T09:36:03.000Z</published>
    <updated>2021-03-07T19:31:47.201Z</updated>
    
    <content type="html"><![CDATA[<p>The other day, I was playing around with GenServers and I needed to see thedocumentation for the <code>handle_call</code> hook. I knew that this wasn’t a functiondefined on the <code>GenServer</code>, So I couldn’t just do a <code>h GenServer.callback</code>. Ithought to myself that there must be a way to get callback documentation using<code>h</code>, so I typed <code>h h</code> in IEx.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">iex(9)&gt; h h</span><br><span class="line"></span><br><span class="line">                                    def h()</span><br><span class="line"></span><br><span class="line">Prints the documentation for IEx.Helpers.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                                defmacro h(term)</span><br><span class="line"></span><br><span class="line">Prints the documentation for the given module or for the given function/arity</span><br><span class="line">pair.</span><br><span class="line"></span><br><span class="line">## Examples</span><br><span class="line"></span><br><span class="line">    iex&gt; h(Enum)</span><br><span class="line"></span><br><span class="line">It also accepts functions in the format fun/arity and module.fun/arity, for</span><br><span class="line">example:</span><br><span class="line"></span><br><span class="line">    iex&gt; h(receive/1)</span><br><span class="line">    iex&gt; h(Enum.all?/2)</span><br><span class="line">    iex&gt; h(Enum.all?)</span><br><span class="line"></span><br><span class="line">iex(10)&gt;</span><br></pre></td></tr></table></figure><p>No luck with that! Nothing that references getting callback documentation, Istill wanted to do the naive thing and just see what <code>h GenServer.callback</code>returned. And, to my surprise it ended up returning something useful:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">iex(10)&gt; h GenServer.handle_call</span><br><span class="line">No documentation for function GenServer.handle_call was found, but there is a callback with the same name.</span><br><span class="line">You can view callback documentation with the b/1 helper.</span><br><span class="line"></span><br><span class="line">iex(11)&gt;</span><br></pre></td></tr></table></figure><p>Aha! These are the little things which make me love Elixir so much :’)So, the next time you want to look up documentation about callbacks just use the<code>b</code> helper in IEx, hope that saves you some time :) It even accepts a module andshows you all the callbacks that a module defines!</p><p>P.S: The curse of knowledge is real, if I hadn’t tried the naive way, I wouldn’tknow that it was so easy to get documentation for callbacks and I would haveended up creating a GenServer, sending a message and inspecting the arguments tofigure out what they were. So, the next time you run into a problem, it might beworth your while to take a step back and ask yourself, How would an Elixirbeginner do this?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">iex(13)&gt; b GenServer.handle_call</span><br><span class="line">@callback handle_call(request :: term(), from(), state :: term()) ::</span><br><span class="line">            &#123;:reply, reply, new_state&#125;</span><br><span class="line">            | &#123;:reply, reply, new_state,</span><br><span class="line">               timeout() | :hibernate | &#123;:continue, term()&#125;&#125;</span><br><span class="line">            | &#123;:noreply, new_state&#125;</span><br><span class="line">            | &#123;:noreply, new_state,</span><br><span class="line">               timeout() | :hibernate | &#123;:continue, term()&#125;&#125;</span><br><span class="line">            | &#123;:stop, reason, reply, new_state&#125;</span><br><span class="line">            | &#123;:stop, reason, new_state&#125;</span><br><span class="line">          when reply: term(), new_state: term(), reason: term()</span><br><span class="line"></span><br><span class="line">Invoked to handle synchronous call/3 messages. call/3 will block until a reply</span><br><span class="line">is received (unless the call times out or nodes are disconnected).</span><br><span class="line"></span><br><span class="line">request is the request message sent by a call/3, from is a 2-tuple containing</span><br><span class="line">the caller&apos;s PID and a term that uniquely identifies the call, and state is the</span><br><span class="line">current state of the GenServer.</span><br><span class="line"></span><br><span class="line">Returning &#123;:reply, reply, new_state&#125; sends the response reply to the caller and</span><br><span class="line">continues the loop with new state new_state.</span><br><span class="line"></span><br><span class="line">Returning &#123;:reply, reply, new_state, timeout&#125; is similar to &#123;:reply, reply,</span><br><span class="line">new_state&#125; except handle_info(:timeout, new_state) will be called after timeout</span><br><span class="line">milliseconds if no messages are received.</span><br><span class="line"></span><br><span class="line">Returning &#123;:reply, reply, new_state, :hibernate&#125; is similar to &#123;:reply, reply,</span><br><span class="line">new_state&#125; except the process is hibernated and will continue the loop once a</span><br><span class="line">message is in its message queue. If a message is already in the message queue</span><br><span class="line">this will be immediately. Hibernating a GenServer causes garbage collection and</span><br><span class="line">leaves a continuous heap that minimises the memory used by the process.</span><br><span class="line"></span><br><span class="line">Returning &#123;:reply, reply, new_state, &#123;:continue, continue&#125;&#125; is similar to</span><br><span class="line">&#123;:reply, reply, new_state&#125; except c:handle_continue/2 will be invoked</span><br><span class="line">immediately after with the value continue as first argument.</span><br><span class="line"></span><br><span class="line">Hibernating should not be used aggressively as too much time could be spent</span><br><span class="line">garbage collecting. Normally it should only be used when a message is not</span><br><span class="line">expected soon and minimising the memory of the process is shown to be</span><br><span class="line">beneficial.</span><br><span class="line"></span><br><span class="line">Returning &#123;:noreply, new_state&#125; does not send a response to the caller and</span><br><span class="line">continues the loop with new state new_state. The response must be sent with</span><br><span class="line">reply/2.</span><br><span class="line"></span><br><span class="line">There are three main use cases for not replying using the return value:</span><br><span class="line"></span><br><span class="line">  • To reply before returning from the callback because the response is</span><br><span class="line">    known before calling a slow function.</span><br><span class="line">  • To reply after returning from the callback because the response is not</span><br><span class="line">    yet available.</span><br><span class="line">  • To reply from another process, such as a task.</span><br><span class="line"></span><br><span class="line">When replying from another process the GenServer should exit if the other</span><br><span class="line">process exits without replying as the caller will be blocking awaiting a reply.</span><br><span class="line"></span><br><span class="line">Returning &#123;:noreply, new_state, timeout | :hibernate | &#123;:continue, continue&#125;&#125;</span><br><span class="line">is similar to &#123;:noreply, new_state&#125; except a timeout, hibernation or continue</span><br><span class="line">occurs as with a :reply tuple.</span><br><span class="line"></span><br><span class="line">Returning &#123;:stop, reason, reply, new_state&#125; stops the loop and c:terminate/2 is</span><br><span class="line">called with reason reason and state new_state. Then the reply is sent as the</span><br><span class="line">response to call and the process exits with reason reason.</span><br><span class="line"></span><br><span class="line">Returning &#123;:stop, reason, new_state&#125; is similar to &#123;:stop, reason, reply,</span><br><span class="line">new_state&#125; except a reply is not sent.</span><br><span class="line"></span><br><span class="line">This callback is optional. If one is not implemented, the server will fail if a</span><br><span class="line">call is performed against it.</span><br><span class="line"></span><br><span class="line">iex(14)&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The other day, I was playing around with GenServers and I needed to see the
documentation for the &lt;code&gt;handle_call&lt;/code&gt; hook. I knew t
      
    
    </summary>
    
    
      <category term="GenServer" scheme="http://minhajuddin.com/tags/genserver/"/>
    
      <category term="TIL" scheme="http://minhajuddin.com/tags/til/"/>
    
      <category term="Documentation" scheme="http://minhajuddin.com/tags/documentation/"/>
    
      <category term="Callbacks" scheme="http://minhajuddin.com/tags/callbacks/"/>
    
  </entry>
  
  <entry>
    <title>Pearls of Elixir - Interesting patterns from popular Elixir packages</title>
    <link href="http://minhajuddin.com/2019/02/01/pearls-of-elixir-interesting-patterns-from-popular-elixir-packages/"/>
    <id>http://minhajuddin.com/2019/02/01/pearls-of-elixir-interesting-patterns-from-popular-elixir-packages/</id>
    <published>2019-02-01T09:11:16.000Z</published>
    <updated>2021-03-07T19:31:47.205Z</updated>
    
    <content type="html"><![CDATA[<p>I had a wonderful time giving a talk at the <a href="https://www.meetup.com/TorontoElixir/events/258157474/" target="_blank" rel="noopener">Elixir January Tech Meetup</a>here in Toronto. Big thanks to <a href="https://twitter.com/ghedamat" target="_blank" rel="noopener">Mattia</a> for organizing and <a href="https://twitter.com/pagerduty" target="_blank" rel="noopener">PagerDuty</a> forhosting the meetup!</p><p>I wanted to capture the talk in a blog post and here it is.</p><h2 id="1-Canada"><a href="#1-Canada" class="headerlink" title="1. Canada"></a>1. Canada</h2><p>Many of us have used cancan for authorization in our Rails applications. WhenI was searching for a similar package in Elixir, I found the awesome <a href="https://github.com/jarednorman/canada" target="_blank" rel="noopener">canada</a>package.</p><p>It’s DSL is pretty straightforward</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># In this example we have a User and a Post entity.</span></span><br><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">User</span></span> <span class="keyword">do</span></span><br><span class="line">  defstruct <span class="symbol">id:</span> <span class="keyword">nil</span>, <span class="symbol">name:</span> <span class="keyword">nil</span>, <span class="symbol">admin:</span> <span class="keyword">false</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Post</span></span> <span class="keyword">do</span></span><br><span class="line">  defstruct <span class="symbol">user_id:</span> <span class="keyword">nil</span>, <span class="symbol">content:</span> <span class="keyword">nil</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Followed by a protocol definition which allows you to define the rules on what</span></span><br><span class="line"><span class="comment"># is allowed and what is forbidden.</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">defimpl</span> <span class="title">Canada</span></span>.Can, <span class="symbol">for:</span> User <span class="keyword">do</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">can?</span></span>(%User&#123;<span class="symbol">id:</span> user_id&#125;, action, %Post&#123;<span class="symbol">user_id:</span> user_id&#125;)</span><br><span class="line">    <span class="keyword">when</span> action <span class="keyword">in</span> [<span class="symbol">:update</span>, <span class="symbol">:read</span>, <span class="symbol">:destroy</span>, <span class="symbol">:touch</span>], <span class="symbol">do:</span> <span class="keyword">true</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">can?</span></span>(%User&#123;<span class="symbol">admin:</span> admin&#125;, action, <span class="number">_</span>)</span><br><span class="line">    <span class="keyword">when</span> action <span class="keyword">in</span> [<span class="symbol">:update</span>, <span class="symbol">:read</span>, <span class="symbol">:destroy</span>, <span class="symbol">:touch</span>], <span class="symbol">do:</span> admin</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">can?</span></span>(%User&#123;&#125;, <span class="symbol">:create</span>, Post), <span class="symbol">do:</span> <span class="keyword">true</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Finally, when we want to use this we just use the following syntax which reads</span></span><br><span class="line"><span class="comment"># very nicely.</span></span><br><span class="line"></span><br><span class="line">import Canada, <span class="symbol">only:</span> [<span class="symbol">can?:</span> <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">if some_user |&gt; can? read(some_post) <span class="keyword">do</span></span><br><span class="line">  <span class="comment"># render the post</span></span><br><span class="line">else</span><br><span class="line">  <span class="comment"># sorry (raise a 403)</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>When using packages, I try to take a peek at the source code andunderstand how things work. And, I was <em>shocked</em> when I saw just 10 lines ofcode in the <code>lib</code> folder! See for yourself:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># lib/canada.ex</span></span><br><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Canada</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="function"><span class="keyword">defmacro</span> <span class="title">can?</span></span>(subject, &#123;action, <span class="number">_</span>, [argument]&#125;) <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">quote</span> <span class="keyword">do</span></span><br><span class="line">      Canada.Can.can? unquote(subject), unquote(action), unquote(argument)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># lib/canada/can.ex</span></span><br><span class="line"><span class="class"><span class="keyword">defprotocol</span> <span class="title">Canada</span></span>.Can <span class="keyword">do</span></span><br><span class="line">  <span class="variable">@doc</span> <span class="string">"Evaluates permissions"</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">can?</span></span>(subject, action, resource)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>The protocol is what allows you to define your custom rules for authorizationand the <code>Canada</code> module defines a neat little macro which allows you to test ifa <em>user</em> is authorized to perform an <em>action</em> using syntax like: <code>can? user,read(post)</code>. How cool is that!</p><h1 id="2-Readable-binary-match-specs"><a href="#2-Readable-binary-match-specs" class="headerlink" title="2. Readable binary match specs"></a>2. Readable binary match specs</h1><p>Postgrex is another one of those packages which is filled with neat Elixir code.When I was skimming through the code, I ran into a piece of code which surprisedme:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Postgrex</span></span>.BinaryUtils <span class="keyword">do</span></span><br><span class="line">  <span class="variable">@moduledoc</span> <span class="keyword">false</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">defmacro</span> <span class="title">int64</span></span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">quote</span> <span class="symbol">do:</span> signed-<span class="number">64</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">defmacro</span> <span class="title">uint16</span></span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">quote</span> <span class="symbol">do:</span> unsigned-<span class="number">16</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>I was having a difficult time understanding how <code>signed-64</code> could be validElixir code. I quickly spun up an iex console and typed in <code>signed-64</code> andunsurprisingly it threw an error. Upon further searching I found that this wasactually used in binary pattern matches all over the code:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Postgrex</span></span>.Messages <span class="keyword">do</span></span><br><span class="line">  import Postgrex.BinaryUtils</span><br><span class="line">  <span class="comment"># ....</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">parse</span></span>(&lt;&lt;type <span class="symbol">:</span>: int32, rest <span class="symbol">:</span>: binary&gt;&gt;, ?R, size) <span class="keyword">do</span></span><br><span class="line">  <span class="comment"># ....</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">parse</span></span>(&lt;&lt;pid <span class="symbol">:</span>: int32, key <span class="symbol">:</span>: int32&gt;&gt;, ?K, _size) <span class="keyword">do</span></span><br><span class="line">  <span class="comment"># ....</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>So, the macro <code>int32</code> would actually be spliced inside of a binary patternmatch. I would never have thought of doing this! And it makes the code so muchmore readable and easy to follow.</p><h1 id="3-Compiling-lookup-tables-in-Modules"><a href="#3-Compiling-lookup-tables-in-Modules" class="headerlink" title="3. Compiling lookup tables in Modules"></a>3. Compiling lookup tables in Modules</h1><p>While browsing through postgrex, I found a text file called <code>errcodes.txt</code> whichI thought was a bit strange. Here is a snippet of that file:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line"># errcodes.txt</span><br><span class="line">#      PostgreSQL error codes</span><br><span class="line">#</span><br><span class="line"># Copyright (c) 2003-2015, PostgreSQL Global Development Group</span><br><span class="line"></span><br><span class="line"># ...</span><br><span class="line"></span><br><span class="line">Section: Class 00 - Successful Completion</span><br><span class="line"></span><br><span class="line">00000    S    ERRCODE_SUCCESSFUL_COMPLETION                                  successful_completion</span><br><span class="line"></span><br><span class="line">Section: Class 01 - Warning</span><br><span class="line"></span><br><span class="line"># do not use this class for failure conditions</span><br><span class="line">01000    W    ERRCODE_WARNING                                                warning</span><br><span class="line">0100C    W    ERRCODE_WARNING_DYNAMIC_RESULT_SETS_RETURNED                   dynamic_result_sets_returned</span><br><span class="line">01008    W    ERRCODE_WARNING_IMPLICIT_ZERO_BIT_PADDING                      implicit_zero_bit_padding</span><br><span class="line">01003    W    ERRCODE_WARNING_NULL_VALUE_ELIMINATED_IN_SET_FUNCTION          null_value_eliminated_in_set_function</span><br><span class="line">01007    W    ERRCODE_WARNING_PRIVILEGE_NOT_GRANTED                          privilege_not_granted</span><br><span class="line">01006    W    ERRCODE_WARNING_PRIVILEGE_NOT_REVOKED                          privilege_not_revoked</span><br><span class="line">01004    W    ERRCODE_WARNING_STRING_DATA_RIGHT_TRUNCATION                   string_data_right_truncation</span><br><span class="line">01P01    W    ERRCODE_WARNING_DEPRECATED_FEATURE                             deprecated_feature</span><br><span class="line"></span><br><span class="line"># ...</span><br></pre></td></tr></table></figure><p>This file maps error codes to their symbols. The reason this was in the <code>lib</code>folder was because it was supposed to be used as a source for error codesmapping. Upon further reading I found that this was being used in a modulecalled <code>Postgrex.ErrorCode</code>. Here are the interesting pieces of that module:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Postgrex</span></span>.ErrorCode <span class="keyword">do</span></span><br><span class="line">  <span class="variable">@external_resource</span> errcodes_path = Path.join(__DIR_<span class="number">_</span>, <span class="string">"errcodes.txt"</span>)</span><br><span class="line"></span><br><span class="line">  errcodes = <span class="keyword">for</span> line &lt;- File.stream!(errcodes_path),</span><br><span class="line">             <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># errcode duplication removal</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># defining a `code_to_name` function for every single error code which maps</span></span><br><span class="line">  <span class="comment"># the code to a name.</span></span><br><span class="line">  <span class="keyword">for</span> &#123;code, errcodes&#125; &lt;- Enum.group_by(errcodes, &amp;elem(&amp;<span class="number">1</span>, <span class="number">0</span>)) <span class="keyword">do</span></span><br><span class="line">    [&#123;^code, name&#125;] = errcodes</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">code_to_name</span></span>(unquote(code)), <span class="symbol">do:</span> unquote(name)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">code_to_name</span></span>(<span class="number">_</span>), <span class="symbol">do:</span> <span class="keyword">nil</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>This code file uses our errorcodes text file to define around 400 functions whichembed the actual code to name mapping. And whenever you wanted to do the actual lookup you could just use<code>Postgrex.ErrorCode.code_to_name(error_code)</code></p><img src="/2019/02/01/pearls-of-elixir-interesting-patterns-from-popular-elixir-packages/blow-my-mind.gif"><h1 id="4-Validating-UUIDs"><a href="#4-Validating-UUIDs" class="headerlink" title="4. Validating UUIDs"></a>4. Validating UUIDs</h1><p>Did you know that you don’t need the <code>uuid</code> package to generate UUIDs? UUIDgeneration is available in Ecto as part of the <code>Ecto.UUID</code> module. And it evenhas a function which allows you to validate a UUID. Most of us would quicklyreach for a regex pattern to validate a UUID, However, the Ecto library uses aninteresting approach:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Ecto</span></span>.UUID <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">  <span class="variable">@doc</span> <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">  Casts to UUID.</span></span><br><span class="line"><span class="string">  "</span><span class="string">""</span></span><br><span class="line">  <span class="variable">@spec</span> cast(t | raw | any) <span class="symbol">:</span>: &#123;<span class="symbol">:ok</span>, t&#125; | <span class="symbol">:error</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">cast</span></span>(&lt;&lt; a1, a2, a3, a4, a5, a6, a7, a8, ?-,</span><br><span class="line">              b1, b2, b3, b4, ?-,</span><br><span class="line">              c1, c2, c3, c4, ?-,</span><br><span class="line">              d1, d2, d3, d4, ?-,</span><br><span class="line">              e1, e2, e3, e4, e5, e6, e7, e8, e9, e1<span class="number">0</span>, e11, e12 &gt;&gt;) <span class="keyword">do</span></span><br><span class="line">    &lt;&lt; c(a1), c(a2), c(a3), c(a4),</span><br><span class="line">       c(a5), c(a6), c(a7), c(a8), ?-,</span><br><span class="line">       c(b1), c(b2), c(b3), c(b4), ?-,</span><br><span class="line">       c(c1), c(c2), c(c3), c(c4), ?-,</span><br><span class="line">       c(d1), c(d2), c(d3), c(d4), ?-,</span><br><span class="line">       c(e1), c(e2), c(e3), c(e4),</span><br><span class="line">       c(e5), c(e6), c(e7), c(e8),</span><br><span class="line">       c(e9), c(e1<span class="number">0</span>), c(e11), c(e12) &gt;&gt;</span><br><span class="line">  catch</span><br><span class="line">    <span class="symbol">:error</span> -&gt; <span class="symbol">:error</span></span><br><span class="line">  else</span><br><span class="line">    casted -&gt; &#123;<span class="symbol">:ok</span>, casted&#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">cast</span></span>(&lt;&lt; <span class="symbol">_:</span><span class="symbol">:</span><span class="number">128</span> &gt;&gt; = binary), <span class="symbol">do:</span> encode(binary)</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">cast</span></span>(<span class="number">_</span>), <span class="symbol">do:</span> <span class="symbol">:error</span></span><br><span class="line"></span><br><span class="line">  <span class="variable">@compile</span> &#123;<span class="symbol">:inline</span>, <span class="symbol">c:</span> <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(?<span class="number">0</span>), <span class="symbol">do:</span> ?<span class="number">0</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(?<span class="number">1</span>), <span class="symbol">do:</span> ?<span class="number">1</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(?<span class="number">2</span>), <span class="symbol">do:</span> ?<span class="number">2</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(?<span class="number">3</span>), <span class="symbol">do:</span> ?<span class="number">3</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(?<span class="number">4</span>), <span class="symbol">do:</span> ?<span class="number">4</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(?<span class="number">5</span>), <span class="symbol">do:</span> ?<span class="number">5</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(?<span class="number">6</span>), <span class="symbol">do:</span> ?<span class="number">6</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(?<span class="number">7</span>), <span class="symbol">do:</span> ?<span class="number">7</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(?<span class="number">8</span>), <span class="symbol">do:</span> ?<span class="number">8</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(?<span class="number">9</span>), <span class="symbol">do:</span> ?<span class="number">9</span></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(?A), <span class="symbol">do:</span> ?a</span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(?B), <span class="symbol">do:</span> ?b</span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(?C), <span class="symbol">do:</span> ?c</span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(?D), <span class="symbol">do:</span> ?d</span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(?E), <span class="symbol">do:</span> ?e</span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(?F), <span class="symbol">do:</span> ?f</span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(?a), <span class="symbol">do:</span> ?a</span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(?b), <span class="symbol">do:</span> ?b</span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(?c), <span class="symbol">do:</span> ?c</span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(?d), <span class="symbol">do:</span> ?d</span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(?e), <span class="symbol">do:</span> ?e</span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(?f), <span class="symbol">do:</span> ?f</span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">c</span></span>(<span class="number">_</span>),  <span class="symbol">do:</span> throw(<span class="symbol">:error</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>This code is pretty self explanatory and is a <em>literal</em> translation of how youwould validate a UUID using a pen and paper.</p><h1 id="5-Honorable-Mentions"><a href="#5-Honorable-Mentions" class="headerlink" title="5. Honorable Mentions"></a>5. Honorable Mentions</h1><h3 id="Static-struct-assertions-checks-in-functions"><a href="#Static-struct-assertions-checks-in-functions" class="headerlink" title="Static struct assertions/checks in functions"></a>Static struct assertions/checks in functions</h3><p>With Elixir you can assert that the argument your function receives is of aspecific type by using a pattern like below:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">User</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">authorized?</span></span>(%User&#123;&#125; = user) <span class="keyword">do</span></span><br><span class="line">    <span class="comment"># ....</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>This code would blow up if the argument passed was not a <code>User</code> struct. This isa nice way of asserting the type. However, you can overdo this by using iteverywhere. A good rule of thumb is to use this pattern in your public API atthe periphery where data comes in.</p><h3 id="Tagged-with-blocks"><a href="#Tagged-with-blocks" class="headerlink" title="Tagged with blocks"></a>Tagged with blocks</h3><p>You can wrap your <code>with</code> matches in tagged tuples like below if you want tohandle errors differently for different failures.</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">with &#123;<span class="symbol">:parse</span>, &#123;<span class="symbol">:ok</span>, user_attrs&#125;&#125; &lt;- &#123;<span class="symbol">:parse</span>, Jason.parse(body)&#125;,</span><br><span class="line">     &#123;<span class="symbol">:persist</span>, &#123;<span class="symbol">:ok</span>, user&#125;&#125; &lt;- &#123;<span class="symbol">:persist</span>, Users.create(user_attrs)&#125;,</span><br><span class="line">     &#123;<span class="symbol">:welcome_email</span>, <span class="symbol">:ok</span>&#125; &lt;- &#123;<span class="symbol">:welcome_email</span>, Emailer.welcome(user)&#125; <span class="keyword">do</span></span><br><span class="line">     <span class="symbol">:ok</span></span><br><span class="line">else</span><br><span class="line">  &#123;<span class="symbol">:parse</span>, err&#125; -&gt;</span><br><span class="line">    <span class="comment"># raise an error</span></span><br><span class="line">    &#123;<span class="symbol">:error</span>, <span class="symbol">:parse_error</span>&#125;</span><br><span class="line">  &#123;<span class="symbol">:persist</span>, &#123;<span class="symbol">:error</span>, changeset&#125;&#125; -&gt;</span><br><span class="line">    <span class="comment"># return validation errors</span></span><br><span class="line">    &#123;<span class="symbol">:error</span>, changeset&#125;</span><br><span class="line">  &#123;<span class="symbol">:welcome_email</span>, err&#125; -&gt;</span><br><span class="line">    <span class="comment"># it is ok if email sending failed, we just log this</span></span><br><span class="line">    Logger.error(<span class="string">"SENDING_WELCOME_EMAIL_FAILED"</span>)</span><br><span class="line">    <span class="symbol">:ok</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Delegating-function-calls-on-your-root-API-module"><a href="#Delegating-function-calls-on-your-root-API-module" class="headerlink" title="Delegating function calls on your root API module"></a>Delegating function calls on your root API module</h3><p><code>defdelegate</code> allows you to delegate function calls to a different module usingthe same arguments.</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">API</span></span> <span class="keyword">do</span></span><br><span class="line">  defdelegate create_customer(customer_json), <span class="symbol">to:</span> API.CustomerCreator</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">API</span></span>.CustomerCreator <span class="keyword">do</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">create_customer</span></span>(customer_json) <span class="keyword">do</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Enforcing-Keys"><a href="#Enforcing-Keys" class="headerlink" title="Enforcing Keys"></a>Enforcing Keys</h3><p>While defining a struct you can also define which keys are mandatory.</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">User</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="variable">@enforce_keys</span> [<span class="symbol">:email</span>, <span class="symbol">:name</span>]</span><br><span class="line">  defstruct [<span class="symbol">:email</span>, <span class="symbol">:name</span>]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Interpolation-in-docs"><a href="#Interpolation-in-docs" class="headerlink" title="Interpolation in docs"></a>Interpolation in docs</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">HTTPClient</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="variable">@timeout</span> <span class="number">60_000</span></span><br><span class="line">  <span class="variable">@doc</span> <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">  Times out after <span class="subst">#&#123;<span class="variable">@timeout</span>&#125;</span> seconds</span></span><br><span class="line"><span class="string">  "</span><span class="string">""</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get</span></span>(url) <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Suppressing-logs-in-your-tests"><a href="#Suppressing-logs-in-your-tests" class="headerlink" title="Suppressing logs in your tests"></a>Suppressing logs in your tests</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ExUnit.start</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">HTTPTest</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">use</span> ExUnit.Case</span><br><span class="line">  require Logger</span><br><span class="line"></span><br><span class="line">  <span class="variable">@moduletag</span> <span class="symbol">:capture_log</span></span><br><span class="line"></span><br><span class="line">  test <span class="string">"suppress logs"</span> <span class="keyword">do</span></span><br><span class="line">    Logger.info <span class="string">"AAAAAAAAAAAAAAAAAAAHHHHHHHHH"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h3><ul><li><a href="https://github.com/jarednorman/canada" target="_blank" rel="noopener">Canada</a></li><li><a href="https://github.com/elixir-ecto/postgrex/blob/master/lib/postgrex/binary_utils.ex" target="_blank" rel="noopener">Postgrex.BinaryUtils</a></li><li><a href="https://github.com/elixir-ecto/postgrex/blob/master/lib/postgrex/error_code.ex" target="_blank" rel="noopener">Postgrex.ErrorCode</a></li><li><a href="https://github.com/elixir-ecto/ecto/blob/master/lib/ecto/uuid.ex" target="_blank" rel="noopener">Ecto.UUID</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I had a wonderful time giving a talk at the &lt;a href=&quot;https://www.meetup.com/TorontoElixir/events/258157474/&quot; target=&quot;_blank&quot; rel=&quot;noopene
      
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="Pearls" scheme="http://minhajuddin.com/tags/pearls/"/>
    
  </entry>
  
  <entry>
    <title>Solution to Advent of Code 2018 Day 5 in Elixir</title>
    <link href="http://minhajuddin.com/2018/12/14/solution-to-advent-of-code-2018-day-5-in-elixir/"/>
    <id>http://minhajuddin.com/2018/12/14/solution-to-advent-of-code-2018-day-5-in-elixir/</id>
    <published>2018-12-14T05:26:18.000Z</published>
    <updated>2021-03-07T19:31:47.209Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Day5</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">scan</span></span>(polymer) <span class="keyword">do</span></span><br><span class="line">    chars =</span><br><span class="line">      polymer</span><br><span class="line">      |&gt; String.to_charlist()</span><br><span class="line"></span><br><span class="line">    res =</span><br><span class="line">      chars</span><br><span class="line">      |&gt; Enum.reduce(&#123;<span class="symbol">:none</span>, []&#125;, <span class="keyword">fn</span></span><br><span class="line">        c, &#123;<span class="symbol">:none</span>, acc&#125; -&gt;</span><br><span class="line">          &#123;<span class="symbol">:prev</span>, c, acc&#125;</span><br><span class="line"></span><br><span class="line">        c, &#123;<span class="symbol">:prev</span>, prev, acc&#125; -&gt;</span><br><span class="line">          if react?(c, prev) <span class="keyword">do</span></span><br><span class="line">            &#123;<span class="symbol">:none</span>, acc&#125;</span><br><span class="line">          else</span><br><span class="line">            &#123;<span class="symbol">:prev</span>, c, [prev | acc]&#125;</span><br><span class="line">          <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line">    reduced_polymer =</span><br><span class="line">      <span class="keyword">case</span> res <span class="keyword">do</span></span><br><span class="line">        &#123;<span class="number">_</span>, acc&#125; -&gt; acc</span><br><span class="line">        &#123;<span class="symbol">:prev</span>, c, acc&#125; -&gt; [c | acc]</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      |&gt; Enum.reverse()</span><br><span class="line">      |&gt; to_string</span><br><span class="line"></span><br><span class="line">    if reduced_polymer == polymer <span class="keyword">do</span></span><br><span class="line">      polymer</span><br><span class="line">    else</span><br><span class="line">      scan(reduced_polymer)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">react?</span></span>(c1, c2), <span class="symbol">do:</span> abs(c1 - c2) == <span class="number">32</span></span><br><span class="line"></span><br><span class="line">  <span class="variable">@all_units</span> Enum.zip(?a..?z, ?A..?Z) |&gt; Enum.map(<span class="keyword">fn</span> &#123;c1, c2&#125; -&gt; ~r[<span class="comment">#&#123;[c1]&#125;|#&#123;[c2]&#125;] end)</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">smallest</span></span>(polymer) <span class="keyword">do</span></span><br><span class="line">    <span class="variable">@all_units</span></span><br><span class="line">    |&gt; Enum.map(<span class="keyword">fn</span> unit_to_be_removed -&gt;</span><br><span class="line">      polymer</span><br><span class="line">      |&gt; String.replace(unit_to_be_removed, <span class="string">""</span>)</span><br><span class="line">      |&gt; scan</span><br><span class="line">      |&gt; String.length()</span><br><span class="line">    <span class="keyword">end</span>)</span><br><span class="line">    |&gt; Enum.min()</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Day5Test</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">use</span> ExUnit.Case</span><br><span class="line"></span><br><span class="line">  import Day5</span><br><span class="line"></span><br><span class="line">  test <span class="string">"reduces 2 reacting units"</span> <span class="keyword">do</span></span><br><span class="line">    assert scan(<span class="string">"aA"</span>) == <span class="string">""</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  test <span class="string">"reduces 2 non reacting units"</span> <span class="keyword">do</span></span><br><span class="line">    assert scan(<span class="string">"aB"</span>) == <span class="string">"aB"</span></span><br><span class="line">    assert scan(<span class="string">"Ba"</span>) == <span class="string">"Ba"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  test <span class="string">"reduces 3 non reacting units"</span> <span class="keyword">do</span></span><br><span class="line">    assert scan(<span class="string">"aBc"</span>) == <span class="string">"aBc"</span></span><br><span class="line">    assert scan(<span class="string">"aBA"</span>) == <span class="string">"aBA"</span></span><br><span class="line">    assert scan(<span class="string">"BaD"</span>) == <span class="string">"BaD"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  test <span class="string">"reduces 3 reacting units"</span> <span class="keyword">do</span></span><br><span class="line">    assert scan(<span class="string">"aAB"</span>) == <span class="string">"B"</span></span><br><span class="line">    assert scan(<span class="string">"abB"</span>) == <span class="string">"a"</span></span><br><span class="line">    assert scan(<span class="string">"aBb"</span>) == <span class="string">"a"</span></span><br><span class="line">    assert scan(<span class="string">"BaA"</span>) == <span class="string">"B"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  test <span class="string">"reduces recursively"</span> <span class="keyword">do</span></span><br><span class="line">    assert scan(<span class="string">"baAB"</span>) == <span class="string">""</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  test <span class="string">"large polymer"</span> <span class="keyword">do</span></span><br><span class="line">    assert scan(<span class="string">"dabAcCaCBAcCcaDA"</span>) == <span class="string">"dabCBAcaDA"</span></span><br><span class="line">    assert scan(<span class="string">"abcdDCBA"</span>) == <span class="string">""</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  test <span class="string">"input"</span> <span class="keyword">do</span></span><br><span class="line">    assert File.read!(<span class="string">"./input.txt"</span>) |&gt; String.trim() |&gt; scan |&gt; String.length() == <span class="number">0</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  test <span class="string">"smallest"</span> <span class="keyword">do</span></span><br><span class="line">    assert smallest(<span class="string">"dabAcCaCBAcCcaDA"</span>) == <span class="number">4</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  test <span class="string">"smallest for input"</span> <span class="keyword">do</span></span><br><span class="line">    assert File.read!(<span class="string">"./input.txt"</span>) |&gt; String.trim() |&gt; smallest == <span class="number">0</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="Advent of Code" scheme="http://minhajuddin.com/tags/advent-of-code/"/>
    
  </entry>
  
  <entry>
    <title>Solution to Advent of Code 2018 Day 4 in Elixir</title>
    <link href="http://minhajuddin.com/2018/12/14/solution-to-advent-of-code-2018-day-4-in-elixir/"/>
    <id>http://minhajuddin.com/2018/12/14/solution-to-advent-of-code-2018-day-4-in-elixir/</id>
    <published>2018-12-14T05:24:48.000Z</published>
    <updated>2021-03-07T19:31:47.209Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Day4</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="class"><span class="keyword">defmodule</span> <span class="title">State</span></span> <span class="keyword">do</span></span><br><span class="line">    defstruct [<span class="symbol">:guard_id</span>, <span class="symbol">:start</span>, <span class="symbol">:sleep</span>]</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">desc_minutes</span></span>(&#123;_k, ranges&#125;) <span class="keyword">do</span></span><br><span class="line">    ranges</span><br><span class="line">    |&gt; Enum.reduce(<span class="number">0</span>, <span class="keyword">fn</span> x, sum -&gt;</span><br><span class="line">      sum + Enum.count(x)</span><br><span class="line">    <span class="keyword">end</span>)</span><br><span class="line">    |&gt; Kernel.*(-<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">find_sleep_constant</span></span>(spec) <span class="keyword">do</span></span><br><span class="line">    &#123;guard, sleep_durations&#125; =</span><br><span class="line">      spec</span><br><span class="line">      |&gt; parse</span><br><span class="line">      |&gt; Enum.sort_by(&amp;desc_minutes/<span class="number">1</span>)</span><br><span class="line">      |&gt; hd</span><br><span class="line"></span><br><span class="line">    guard * most_sleepy_minute(sleep_durations)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sleepiest_guard_minute</span></span>(spec) <span class="keyword">do</span></span><br><span class="line">    &#123;guard_id, &#123;min, _count&#125;&#125; =</span><br><span class="line">      spec</span><br><span class="line">      |&gt; parse <span class="comment"># =&gt; %&#123; guard_id =&gt; [min_start1..min_end1] &#125;</span></span><br><span class="line">      |&gt; Enum.map(<span class="keyword">fn</span> &#123;guard_id, durations&#125; -&gt;</span><br><span class="line">        &#123;min, occurences&#125; =</span><br><span class="line">          durations</span><br><span class="line">          |&gt; Enum.flat_map(&amp;Enum.to_list/<span class="number">1</span>)</span><br><span class="line">          |&gt; Enum.group_by(&amp; &amp;<span class="number">1</span>)</span><br><span class="line">          |&gt; Enum.max_by(<span class="keyword">fn</span> &#123;_min, occurences&#125; -&gt; Enum.count(occurences) <span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line">        &#123;guard_id, &#123;min, length(occurences)&#125;&#125;</span><br><span class="line">      <span class="keyword">end</span>)</span><br><span class="line">      |&gt; Enum.max_by(<span class="keyword">fn</span> &#123;_guard_id, &#123;_min, count&#125;&#125; -&gt; count <span class="keyword">end</span>)</span><br><span class="line">    &#123;guard_id, min&#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">most_sleepy_minute</span></span>(sleep_durations) <span class="keyword">do</span></span><br><span class="line">    &#123;minute, <span class="number">_</span>&#125; =</span><br><span class="line">      sleep_durations</span><br><span class="line">      |&gt; Enum.flat_map(&amp;Enum.to_list/<span class="number">1</span>)</span><br><span class="line">      |&gt; Enum.group_by(&amp; &amp;<span class="number">1</span>)</span><br><span class="line">      |&gt; Enum.sort_by(<span class="keyword">fn</span> &#123;_k, v&#125; -&gt; -<span class="number">1</span> * Enum.count(v) <span class="keyword">end</span>)</span><br><span class="line">      |&gt; hd</span><br><span class="line"></span><br><span class="line">    minute</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">parse</span></span>(spec) <span class="keyword">do</span></span><br><span class="line">    &#123;_state, logs&#125; =</span><br><span class="line">      spec</span><br><span class="line">      |&gt; String.split(<span class="string">"\n"</span>, <span class="symbol">trim:</span> <span class="keyword">true</span>)</span><br><span class="line">      |&gt; Enum.sort()</span><br><span class="line">      |&gt; Enum.map(&amp;parse_line/<span class="number">1</span>)</span><br><span class="line">      |&gt; Enum.reduce(&#123;_state = %State&#123;&#125;, _out = %&#123;&#125;&#125;, <span class="keyword">fn</span> x, &#123;state, out&#125; -&gt;</span><br><span class="line">        <span class="keyword">case</span> x <span class="keyword">do</span></span><br><span class="line">          &#123;<span class="symbol">:start</span>, guard_id, _minutes&#125; -&gt;</span><br><span class="line">            &#123;%&#123;state | <span class="symbol">guard_id:</span> guard_id&#125;, out&#125;</span><br><span class="line"></span><br><span class="line">          &#123;<span class="symbol">:sleep</span>, minutes&#125; -&gt;</span><br><span class="line">            &#123;%&#123;state | <span class="symbol">start:</span> minutes&#125;, out&#125;</span><br><span class="line"></span><br><span class="line">          &#123;<span class="symbol">:wake</span>, minutes&#125; -&gt;</span><br><span class="line">            prev_sleep = out[state.guard_id] || []</span><br><span class="line">            &#123;state, Map.put(out, state.guard_id, [state.start..(minutes - <span class="number">1</span>) | prev_sleep])&#125;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line">    logs</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">parse_line</span></span>(line) <span class="keyword">do</span></span><br><span class="line">    &lt;&lt;<span class="string">"["</span>, <span class="symbol">_year:</span><span class="symbol">:</span><span class="number">32</span>, <span class="string">"-"</span>, <span class="symbol">_month:</span><span class="symbol">:</span><span class="number">16</span>, <span class="string">"-"</span>, <span class="symbol">_day:</span><span class="symbol">:</span><span class="number">16</span>, <span class="string">" "</span>, <span class="symbol">_hour:</span><span class="symbol">:</span><span class="number">16</span>, <span class="string">":"</span>,</span><br><span class="line">      <span class="symbol">minutes_bin:</span><span class="symbol">:binary-size</span>(<span class="number">2</span>), <span class="string">"] "</span>, <span class="symbol">note:</span><span class="symbol">:binary&gt;&gt;</span> = line</span><br><span class="line"></span><br><span class="line">    parse_note(note, String.to_integer(minutes_bin))</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">parse_note</span></span>(<span class="string">"wakes up"</span>, minutes) <span class="keyword">do</span></span><br><span class="line">    &#123;<span class="symbol">:wake</span>, minutes&#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">parse_note</span></span>(<span class="string">"falls asleep"</span>, minutes) <span class="keyword">do</span></span><br><span class="line">    &#123;<span class="symbol">:sleep</span>, minutes&#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">parse_note</span></span>(begin_note, minutes) <span class="keyword">do</span></span><br><span class="line">    guard_id =</span><br><span class="line">      Regex.named_captures(~r[Guard <span class="comment">#(?&lt;guard_id&gt;\d+) begins shift], begin_note)</span></span><br><span class="line">      |&gt; Map.get(<span class="string">"guard_id"</span>)</span><br><span class="line">      |&gt; String.to_integer()</span><br><span class="line"></span><br><span class="line">    &#123;<span class="symbol">:start</span>, guard_id, minutes&#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">Day4Test</span></span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">use</span> ExUnit.Case</span><br><span class="line"></span><br><span class="line">  import Day4</span><br><span class="line"></span><br><span class="line">  test <span class="string">"parses the times when each guard sleeps"</span> <span class="keyword">do</span></span><br><span class="line">    assert parse(<span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">           [1518-11-01 00:00] Guard #10 begins shift</span></span><br><span class="line"><span class="string">           [1518-11-01 00:05] falls asleep</span></span><br><span class="line"><span class="string">           [1518-11-01 00:25] wakes up</span></span><br><span class="line"><span class="string">           [1518-11-01 00:30] falls asleep</span></span><br><span class="line"><span class="string">           [1518-11-01 00:55] wakes up</span></span><br><span class="line"><span class="string">           [1518-11-01 23:58] Guard #99 begins shift</span></span><br><span class="line"><span class="string">           [1518-11-02 00:40] falls asleep</span></span><br><span class="line"><span class="string">           [1518-11-02 00:50] wakes up</span></span><br><span class="line"><span class="string">           [1518-11-03 00:05] Guard #10 begins shift</span></span><br><span class="line"><span class="string">           [1518-11-03 00:24] falls asleep</span></span><br><span class="line"><span class="string">           [1518-11-03 00:29] wakes up</span></span><br><span class="line"><span class="string">           [1518-11-04 00:02] Guard #99 begins shift</span></span><br><span class="line"><span class="string">           [1518-11-04 00:36] falls asleep</span></span><br><span class="line"><span class="string">           [1518-11-04 00:46] wakes up</span></span><br><span class="line"><span class="string">           [1518-11-05 00:03] Guard #99 begins shift</span></span><br><span class="line"><span class="string">           [1518-11-05 00:45] falls asleep</span></span><br><span class="line"><span class="string">           [1518-11-05 00:55] wakes up</span></span><br><span class="line"><span class="string">           [1518-11-08 00:03] Guard #99334 begins shift</span></span><br><span class="line"><span class="string">           [1518-11-08 00:45] falls asleep</span></span><br><span class="line"><span class="string">           [1518-11-08 00:55] wakes up</span></span><br><span class="line"><span class="string">           "</span><span class="string">""</span>) == %&#123;</span><br><span class="line">             <span class="number">10</span> =&gt; [<span class="number">5</span>..<span class="number">24</span>, <span class="number">30</span>..<span class="number">54</span>, <span class="number">24</span>..<span class="number">28</span>] |&gt; Enum.reverse(),</span><br><span class="line">             <span class="number">99</span> =&gt; [<span class="number">40</span>..<span class="number">49</span>, <span class="number">36</span>..<span class="number">45</span>, <span class="number">45</span>..<span class="number">54</span>] |&gt; Enum.reverse(),</span><br><span class="line">             <span class="number">99334</span> =&gt; [<span class="number">45</span>..<span class="number">54</span>]</span><br><span class="line">           &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  test <span class="string">"find_sleep_constant"</span> <span class="keyword">do</span></span><br><span class="line">    assert find_sleep_constant(<span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">           [1518-11-01 00:00] Guard #10 begins shift</span></span><br><span class="line"><span class="string">           [1518-11-01 00:05] falls asleep</span></span><br><span class="line"><span class="string">           [1518-11-01 00:25] wakes up</span></span><br><span class="line"><span class="string">           [1518-11-01 00:30] falls asleep</span></span><br><span class="line"><span class="string">           [1518-11-01 00:55] wakes up</span></span><br><span class="line"><span class="string">           [1518-11-01 23:58] Guard #99 begins shift</span></span><br><span class="line"><span class="string">           [1518-11-02 00:40] falls asleep</span></span><br><span class="line"><span class="string">           [1518-11-02 00:50] wakes up</span></span><br><span class="line"><span class="string">           [1518-11-03 00:05] Guard #10 begins shift</span></span><br><span class="line"><span class="string">           [1518-11-03 00:24] falls asleep</span></span><br><span class="line"><span class="string">           [1518-11-03 00:29] wakes up</span></span><br><span class="line"><span class="string">           [1518-11-04 00:02] Guard #99 begins shift</span></span><br><span class="line"><span class="string">           [1518-11-04 00:36] falls asleep</span></span><br><span class="line"><span class="string">           [1518-11-04 00:46] wakes up</span></span><br><span class="line"><span class="string">           [1518-11-05 00:03] Guard #99 begins shift</span></span><br><span class="line"><span class="string">           [1518-11-05 00:45] falls asleep</span></span><br><span class="line"><span class="string">           [1518-11-05 00:55] wakes up</span></span><br><span class="line"><span class="string">           "</span><span class="string">""</span>) == <span class="number">240</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  test <span class="string">"parses line"</span> <span class="keyword">do</span></span><br><span class="line">    assert parse_line(<span class="string">"[1518-11-01 00:08] wakes up"</span>) == &#123;<span class="symbol">:wake</span>, <span class="number">8</span>&#125;</span><br><span class="line">    assert parse_line(<span class="string">"[1518-11-01 00:30] falls asleep"</span>) == &#123;<span class="symbol">:sleep</span>, <span class="number">30</span>&#125;</span><br><span class="line">    assert parse_line(<span class="string">"[1518-11-01 00:23] Guard #10 begins shift"</span>) == &#123;<span class="symbol">:start</span>, <span class="number">10</span>, <span class="number">23</span>&#125;</span><br><span class="line">    assert parse_line(<span class="string">"[1518-11-01 00:23] Guard #99 begins shift"</span>) == &#123;<span class="symbol">:start</span>, <span class="number">99</span>, <span class="number">23</span>&#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  test <span class="string">"file"</span> <span class="keyword">do</span></span><br><span class="line">    assert <span class="number">240</span> ==</span><br><span class="line">             find_sleep_constant(<span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">             [1518-11-01 00:00] Guard #10 begins shift</span></span><br><span class="line"><span class="string">             [1518-11-01 00:05] falls asleep</span></span><br><span class="line"><span class="string">             [1518-11-01 00:25] wakes up</span></span><br><span class="line"><span class="string">             [1518-11-01 00:30] falls asleep</span></span><br><span class="line"><span class="string">             [1518-11-01 00:55] wakes up</span></span><br><span class="line"><span class="string">             [1518-11-01 23:58] Guard #99 begins shift</span></span><br><span class="line"><span class="string">             [1518-11-02 00:40] falls asleep</span></span><br><span class="line"><span class="string">             [1518-11-02 00:50] wakes up</span></span><br><span class="line"><span class="string">             [1518-11-03 00:05] Guard #10 begins shift</span></span><br><span class="line"><span class="string">             [1518-11-03 00:24] falls asleep</span></span><br><span class="line"><span class="string">             [1518-11-03 00:29] wakes up</span></span><br><span class="line"><span class="string">             [1518-11-04 00:02] Guard #99 begins shift</span></span><br><span class="line"><span class="string">             [1518-11-04 00:36] falls asleep</span></span><br><span class="line"><span class="string">             [1518-11-04 00:46] wakes up</span></span><br><span class="line"><span class="string">             [1518-11-05 00:03] Guard #99 begins shift</span></span><br><span class="line"><span class="string">             [1518-11-05 00:45] falls asleep</span></span><br><span class="line"><span class="string">             [1518-11-05 00:55] wakes up</span></span><br><span class="line"><span class="string">             "</span><span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">    assert File.read!(<span class="string">"./input.txt"</span>)</span><br><span class="line">           |&gt; find_sleep_constant == <span class="number">30630</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  test <span class="string">"sleepiest_guard_minute"</span> <span class="keyword">do</span></span><br><span class="line">    assert &#123;<span class="number">99</span>, <span class="number">45</span>&#125; ==</span><br><span class="line">             sleepiest_guard_minute(<span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">             [1518-11-01 00:00] Guard #10 begins shift</span></span><br><span class="line"><span class="string">             [1518-11-01 00:05] falls asleep</span></span><br><span class="line"><span class="string">             [1518-11-01 00:25] wakes up</span></span><br><span class="line"><span class="string">             [1518-11-01 00:30] falls asleep</span></span><br><span class="line"><span class="string">             [1518-11-01 00:55] wakes up</span></span><br><span class="line"><span class="string">             [1518-11-01 23:58] Guard #99 begins shift</span></span><br><span class="line"><span class="string">             [1518-11-02 00:40] falls asleep</span></span><br><span class="line"><span class="string">             [1518-11-02 00:50] wakes up</span></span><br><span class="line"><span class="string">             [1518-11-03 00:05] Guard #10 begins shift</span></span><br><span class="line"><span class="string">             [1518-11-03 00:24] falls asleep</span></span><br><span class="line"><span class="string">             [1518-11-03 00:29] wakes up</span></span><br><span class="line"><span class="string">             [1518-11-04 00:02] Guard #99 begins shift</span></span><br><span class="line"><span class="string">             [1518-11-04 00:36] falls asleep</span></span><br><span class="line"><span class="string">             [1518-11-04 00:46] wakes up</span></span><br><span class="line"><span class="string">             [1518-11-05 00:03] Guard #99 begins shift</span></span><br><span class="line"><span class="string">             [1518-11-05 00:45] falls asleep</span></span><br><span class="line"><span class="string">             [1518-11-05 00:55] wakes up</span></span><br><span class="line"><span class="string">             "</span><span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">    assert &#123;guard, min&#125; =</span><br><span class="line">             File.read!(<span class="string">"./input.txt"</span>)</span><br><span class="line">             |&gt; sleepiest_guard_minute</span><br><span class="line"></span><br><span class="line">    assert guard * min == <span class="number">99</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
    
      <category term="Elixir" scheme="http://minhajuddin.com/tags/elixir/"/>
    
      <category term="Advent of Code" scheme="http://minhajuddin.com/tags/advent-of-code/"/>
    
  </entry>
  
</feed>
